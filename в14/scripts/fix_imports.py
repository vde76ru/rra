#!/usr/bin/env python3
"""
fix_imports.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤
"""
import os
import sys

def fix_file_imports(filepath, fixes):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        for old, new in fixes.items():
            content = content.replace(old, new)
        
        if content != original_content:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {filepath}")
            return True
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {filepath}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    fixes = {
        # –û–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        "from typing import ": "from typing import Dict, List, Optional, Tuple, ",
        "import asyncio\n": "import asyncio\nimport sys\n",
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è auth.py
        "return asyncio.run(": "import asyncio\n    return asyncio.run(",
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è exchange/client.py  
        "from typing import Dict": "from typing import Dict, Optional, List",
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è strategies
        "from typing import Dict": "from typing import Dict, Any",
    }
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_fix = [
        "src/bot/manager.py",
        "src/bot/trader.py", 
        "src/bot/risk_manager.py",
        "src/web/auth.py",
        "src/web/api.py",
        "src/web/websocket.py",
        "src/exchange/client.py",
        "src/exchange/humanizer.py",
        "src/strategies/base.py",
        "src/strategies/momentum.py",
        "src/strategies/multi_indicator.py",
        "src/strategies/scalping.py",
        "src/analysis/market_analyzer.py",
        "src/notifications/telegram.py"
    ]
    
    fixed_count = 0
    for filepath in files_to_fix:
        if os.path.exists(filepath):
            if fix_file_imports(filepath, fixes):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
    
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º auth.py - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç asyncio
    auth_file = "src/web/auth.py"
    if os.path.exists(auth_file):
        with open(auth_file, 'r') as f:
            content = f.read()
        
        if "import asyncio" not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            content = content.replace(
                "from sqlalchemy.orm import Session\n",
                "from sqlalchemy.orm import Session\nimport asyncio\n"
            )
            
            with open(auth_file, 'w') as f:
                f.write(content)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω import asyncio –≤ {auth_file}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º exchange/humanizer.py
    humanizer_file = "src/exchange/humanizer.py"
    if os.path.exists(humanizer_file):
        with open(humanizer_file, 'r') as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
        if "from typing import" not in content:
            content = "from typing import Optional, Tuple\n" + content
        
        if "micro_delay" in content and "async def micro_delay" not in content:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ micro_delay
            content = content.replace(
                "    async def human_delay(",
                """    async def micro_delay(self):
        \"\"\"–ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\"\"\"
        if self.enable_human_mode:
            await asyncio.sleep(random.uniform(0.1, 0.5))
    
    async def human_delay("""
            )
        
        with open(humanizer_file, 'w') as f:
            f.write(content)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω {humanizer_file}")
    
    print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

if __name__ == "__main__":
    main()