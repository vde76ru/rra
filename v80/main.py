#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Crypto Trading Bot - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: main.py
"""
import os
import sys
import asyncio
import argparse
import logging
from pathlib import Path

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ü–ï–†–ï–î –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
import warnings
warnings.filterwarnings('ignore', message='pkg_resources is deprecated')
warnings.filterwarnings('ignore', category=DeprecationWarning)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # –û—Ç–∫–ª—é—á–∞–µ–º GPU –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = Path('/etc/crypto/config/.env')
    if not env_path.exists():
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dirs = ['logs', 'data', 'data/cache', 'data/backups', 'models', 'static', 'templates']
    for dir_name in dirs:
        Path(dir_name).mkdir(parents=True, exist_ok=True)
    
    logger.info("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î"""
    try:
        from src.core.database import db
        db.create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        sys.exit(1)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    try:
        from src.bot.manager import bot_manager
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        success, message = await bot_manager.start()
        
        if success:
            logger.info(f"‚úÖ {message}")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while bot_manager.is_running:
                await asyncio.sleep(1)
        else:
            logger.error(f"‚ùå {message}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot_manager.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def run_web():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        import io
        import contextlib
        
        f = io.StringIO()
        with contextlib.redirect_stdout(f):
            from src.web.app import app, socketio
        
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å SocketIO
        socketio.run(
            app,
            host='0.0.0.0',
            port=5000,
            debug=False,
            use_reloader=False,
            log_output=True
        )
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–±-–º–æ–¥—É–ª—è: {e}")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: pip install -r requirements.txt")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        sys.exit(1)

async def run_both():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from src.bot.manager import bot_manager
        from src.web.app import app, socketio
        import threading
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        web_thread = threading.Thread(
            target=socketio.run,
            args=(app,),
            kwargs={
                'host': '0.0.0.0',
                'port': 5000,
                'debug': False,
                'use_reloader': False
            }
        )
        web_thread.daemon = True
        web_thread.start()
        
        logger.info("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:5000")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await run_bot()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def setup_mode():
    """–†–µ–∂–∏–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("üîß –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
    create_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
    try:
        from src.exchange.client import ExchangeClient
        client = ExchangeClient()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
    
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py bot")
    logger.info("–ò–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python main.py web")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='Crypto Trading Bot - Professional Trading System'
    )
    parser.add_argument(
        'mode',
        choices=['bot', 'web', 'both', 'setup'],
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: bot (—Ç–æ–ª—å–∫–æ –±–æ—Ç), web (—Ç–æ–ª—å–∫–æ –≤–µ–±), both (–æ–±–∞), setup (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
    
    # –í—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_environment()
    
    # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    create_database()
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {args.mode}")
    
    if args.mode == 'bot':
        asyncio.run(run_bot())
    elif args.mode == 'web':
        run_web()
    elif args.mode == 'both':
        asyncio.run(run_both())
    elif args.mode == 'setup':
        setup_mode()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)