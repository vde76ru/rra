"""
–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
–§–∞–π–ª: main_debug.py
"""

import asyncio
import argparse
import signal
import sys
import socket
from pathlib import Path
from typing import Optional
from contextlib import asynccontextmanager

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from src.core.config import Config
from src.core.clean_logging import init_logging_system, get_clean_logger, trading_logger
from src.bot.manager import BotManager
from src.web.api_routes import router as api_router, set_bot_manager, ws_manager
from src.core.database import init_database, init_database_async

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
config = Config()
bot_manager: Optional[BotManager] = None
web_app: Optional[FastAPI] = None
shutdown_event = asyncio.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = None

def check_port_availability(host: str, port: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
    
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É.
    –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)  # –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
            result = s.connect_ex((host, port))
            return result != 0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ—Ä—Ç –∑–∞–Ω—è—Ç)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
        return True  # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π lifespan manager –¥–ª—è FastAPI
    
    –≠—Ç–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    - –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    - –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    """
    logger.info("üåê Lifespan: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    
    try:
        # === STARTUP PHASE ===
        logger.info("üöÄ Lifespan: Startup phase –Ω–∞—á–∞–ª—Å—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üíæ Lifespan: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        result = await init_database_async()
        if result:
            logger.info("‚úÖ Lifespan: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è Lifespan: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        logger.info("‚úÖ Lifespan: Startup phase –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # === YIELD - –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ ===
        yield
        
    except Exception as startup_error:
        logger.error(f"‚ùå Lifespan: –û—à–∏–±–∫–∞ –≤ startup phase: {startup_error}", exc_info=True)
        raise
    finally:
        # === SHUTDOWN PHASE ===
        logger.info("üõë Lifespan: –ù–∞—á–∏–Ω–∞–µ–º shutdown phase...")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å cleanup –ª–æ–≥–∏–∫—É
            logger.info("üßπ Lifespan: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ BotManager –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            global bot_manager
            if bot_manager and hasattr(bot_manager, 'status'):
                logger.info("ü§ñ Lifespan: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BotManager...")
                try:
                    await bot_manager.stop()
                    logger.info("‚úÖ Lifespan: BotManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as bot_stop_error:
                    logger.warning(f"‚ö†Ô∏è Lifespan: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ BotManager: {bot_stop_error}")
            
            logger.info("‚úÖ Lifespan: Shutdown phase –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as shutdown_error:
            logger.error(f"‚ùå Lifespan: –û—à–∏–±–∫–∞ –≤ shutdown phase: {shutdown_error}")

def create_web_app() -> FastAPI:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º lifespan
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏
    –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ middleware.
    """
    logger.info("üèóÔ∏è –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    app = FastAPI(
        title="üöÄ Crypto Trading Bot Dashboard",
        description="–ü–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–æ–º",
        version="3.0.0",
        docs_url="/docs",
        redoc_url="/redoc",
        lifespan=lifespan  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    )
    
    logger.info("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS middleware...")
    
    # CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    logger.info("üõ£Ô∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç—ã...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
    app.include_router(api_router)
    
    logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return app

async def run_web_only():
    """
    –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
    """
    global web_app
    
    logger.info("üåê === –ó–ê–ü–£–°–ö –í–ï–ë–ê –í –†–ï–ñ–ò–ú–ï WEB-ONLY ===")
    
    try:
        # === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–ê ===
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000...")
        if not check_port_availability("0.0.0.0", 8000):
            logger.error("‚ùå –ü–æ—Ä—Ç 8000 —É–∂–µ –∑–∞–Ω—è—Ç! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.")
            logger.info("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'netstat -tulpn | grep :8000' –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return
        logger.info("‚úÖ –ü–æ—Ä—Ç 8000 –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # === –®–ê–ì 2: –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
        logger.info("üèóÔ∏è –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        web_app = create_web_app()
        logger.info("‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # === –®–ê–ì 3: –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê ===
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º uvicorn —Å–µ—Ä–≤–µ—Ä...")
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0",
            port=8000,
            log_level="info",  # –£–≤–µ–ª–∏—á–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            access_log=True,   # –í–∫–ª—é—á–∏–º access –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            ws_ping_interval=20,
            ws_ping_timeout=10,
            loop="asyncio"     # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º event loop
        )
        
        server = uvicorn.Server(config_uvicorn)
        logger.info("‚úÖ Uvicorn —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # === –®–ê–ì 4: –ò–ù–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        logger.info("üöÄ " + "=" * 50)
        logger.info("üöÄ –í–ï–ë–ê-–°–ï–†–í–ï–† –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        logger.info("üöÄ " + "=" * 50)
        logger.info("üåê URL: http://0.0.0.0:8000")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥: http://localhost:8000")
        logger.info("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
        logger.info("üîß Redoc: http://localhost:8000/redoc")
        logger.info("üöÄ " + "=" * 50)
        
        # === –®–ê–ì 5: –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===
        logger.info("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn —Å–µ—Ä–≤–µ—Ä...")
        logger.info("‚ö° –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è uvicorn...")
        
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", exc_info=True)
        logger.error("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   1. –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
        logger.error("   2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞")
        logger.error("   3. –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        logger.error("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        raise

async def run_bot_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global bot_manager
    
    logger.info("ü§ñ === –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –†–ï–ñ–ò–ú–ï BOT-ONLY ===")
    
    try:
        logger.info("üîß –°–æ–∑–¥–∞–µ–º BotManager...")
        bot_manager = BotManager()
        logger.info("‚úÖ BotManager —Å–æ–∑–¥–∞–Ω")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        success, message = await bot_manager.start()
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {message}")
            return
        
        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)...")
        
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ: {e}", exc_info=True)
        raise
    finally:
        if bot_manager:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            await bot_manager.stop()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def run_full_system():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –±–æ—Ç + –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global bot_manager, web_app
    
    logger.info("üöÄ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
    
    try:
        # === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–ê ===
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000...")
        if not check_port_availability("0.0.0.0", 8000):
            logger.error("‚ùå –ü–æ—Ä—Ç 8000 —É–∂–µ –∑–∞–Ω—è—Ç!")
            return
        
        # === –®–ê–ì 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
        logger.info("ü§ñ –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º BotManager...")
        bot_manager = BotManager()
        set_bot_manager(bot_manager)  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        logger.info("‚úÖ BotManager —Å–æ–∑–¥–∞–Ω –∏ —Å–≤—è–∑–∞–Ω —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
        
        # === –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
        logger.info("üåê –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        web_app = create_web_app()
        
        # === –®–ê–ì 4: –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê ===
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            access_log=True,
            ws_ping_interval=20,
            ws_ping_timeout=10,
            loop="asyncio"
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        # === –®–ê–ì 5: –ò–ù–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï ===
        logger.info("üöÄ " + "=" * 50)
        logger.info("üöÄ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
        logger.info("üöÄ " + "=" * 50)
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
        logger.info("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥: http://localhost:8000")
        logger.info("üìñ API Docs: http://localhost:8000/docs")
        logger.info("üöÄ " + "=" * 50)
        
        # === –®–ê–ì 6: –ó–ê–ü–£–°–ö ===
        logger.info("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        raise
    finally:
        if bot_manager:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
            await bot_manager.stop()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
    """
    global logger
    
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    init_logging_system()
    logger = get_clean_logger(__name__)
    
    # === –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–ò–ì–ù–ê–õ–û–í ===
    logger.info("üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    setup_signal_handlers()
    
    # === –ü–ê–†–°–ò–ù–ì –ê–†–ì–£–ú–ï–ù–¢–û–í ===
    parser = argparse.ArgumentParser(description="Crypto Trading Bot")
    parser.add_argument("--mode", choices=["bot", "web", "full"], default="full",
                        help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (bot=—Ç–æ–ª—å–∫–æ –±–æ—Ç, web=—Ç–æ–ª—å–∫–æ –≤–µ–±, full=–ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
    parser.add_argument("--debug", action="store_true", 
                        help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")
    args = parser.parse_args()
    
    # === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
    logger.info("=" * 60)
    logger.info("üöÄ CRYPTO TRADING BOT v3.0 - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø")
    logger.info("=" * 60)
    logger.info(f"üéØ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {args.mode.upper()}")
    logger.info(f"üêõ –û—Ç–ª–∞–¥–∫–∞: {'–í–ö–õ' if args.debug else '–í–´–ö–õ'}")
    logger.info("=" * 60)
    
    try:
        # === –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –†–ê–ë–û–¢–´ ===
        if args.mode == "bot":
            logger.info("ü§ñ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –¢–û–õ–¨–ö–û –¢–û–†–ì–û–í–´–ô –ë–û–¢")
            await run_bot_only()
        elif args.mode == "web":
            logger.info("üåê –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –¢–û–õ–¨–ö–û –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°")
            await run_web_only()
        else:  # full
            logger.info("üöÄ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
            await run_full_system()
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        logger.error("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:")
        logger.error("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env —Ñ–∞–π–ª–∞")
        logger.error("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        logger.error("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000")
        logger.error("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
        sys.exit(1)
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    asyncio.run(main())