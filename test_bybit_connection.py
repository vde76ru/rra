#!/usr/bin/env python3
# test_bybit_connection.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API

import os
import sys
from dotenv import load_dotenv
import ccxt

print("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API")
print("=" * 50)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
api_key = os.getenv('BYBIT_API_KEY')
api_secret = os.getenv('BYBIT_API_SECRET')
testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'

if not api_key or not api_secret:
    print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python add_api_keys.py")
    sys.exit(1)

if api_key == '' or api_key == 'your_testnet_api_key_here':
    print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo python add_api_keys.py")
    sys.exit(1)

print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print(f"   –†–µ–∂–∏–º: {'TESTNET' if testnet else 'MAINNET'}")
print(f"   API Key: {api_key[:10]}...{api_key[-4:]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∫–ª—é—á–∞

try:
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
    
    exchange = ccxt.bybit({
        'apiKey': api_key,
        'secret': api_secret,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',  # –î–ª—è –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            'testnet': testnet
        }
    })
    
    if testnet:
        exchange.set_sandbox_mode(True)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
    balance = exchange.fetch_balance()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    print("\nüìä –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:")
    for currency, balance_info in balance['total'].items():
        if balance_info > 0:
            print(f"   {currency}: {balance_info:.8f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º USDT –±–∞–ª–∞–Ω—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    usdt_balance = balance.get('USDT', {})
    if usdt_balance:
        total_usdt = usdt_balance.get('total', 0)
        free_usdt = usdt_balance.get('free', 0)
        print(f"\nüíµ USDT –±–∞–ª–∞–Ω—Å:")
        print(f"   –í—Å–µ–≥–æ: {total_usdt:.2f} USDT")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {free_usdt:.2f} USDT")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
    print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    ticker = exchange.fetch_ticker('BTCUSDT')
    current_price = ticker['last']
    volume_24h = ticker['quoteVolume']
    
    print(f"   BTC/USDT: ${current_price:,.2f}")
    print(f"   –û–±—ä–µ–º 24—á: ${volume_24h:,.0f}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
    print("\nüîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
    markets = exchange.load_markets()
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä—ã–Ω–∫–æ–≤: {len(markets)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
    popular_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT']
    print("\nüìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã:")
    for pair in popular_pairs:
        if pair in markets:
            print(f"   ‚úÖ {pair}")
    
    print("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    
    if testnet and total_usdt == 0:
        print("\nüí° –°–æ–≤–µ—Ç: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ https://testnet.bybit.com/faucet")
    
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞:")
    print("   python main_simple.py")
    
except ccxt.BaseError as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ API: {e}")
    print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("1. –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏")
    print("2. API –∫–ª—é—á–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    print("3. –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    print("4. IP –∞–¥—Ä–µ—Å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞)")
    
except Exception as e:
    print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")