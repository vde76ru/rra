# src/web/async_handler.py
"""
AsyncRouteHandler - –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ asyncio —Å Flask

–ú–æ–¥—É–ª—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è Event Loop Management –ø—Ä–æ–±–ª–µ–º
–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø - —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
1. –ï–¥–∏–Ω—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
2. ThreadPoolExecutor –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö loop
4. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
"""

import asyncio
import threading
import logging
import time
from functools import wraps
from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
from typing import Callable, Any, Optional
from datetime import datetime
import sys

logger = logging.getLogger(__name__)

class AsyncRouteHandler:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async –∫–æ–¥–∞ –≤ Flask –º–∞—Ä—à—Ä—É—Ç–∞—Ö
    
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:
    - Event loop is closed
    - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É sync/async –∫–æ–¥–æ–º  
    - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ lifecycle event loop
    """
    
    def __init__(self, max_workers: int = 4, default_timeout: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncRouteHandler
        
        Args:
            max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
            default_timeout: –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        self.max_workers = max_workers
        self.default_timeout = default_timeout
        self.loop: Optional[asyncio.AbstractEventLoop] = None
        self.loop_thread: Optional[threading.Thread] = None
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        self._shutdown_event = threading.Event()
        self._loop_ready = threading.Event()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'timeout_requests': 0,
            'last_restart': None
        }
        
        self._init_async_loop()
        
        logger.info(f"‚úÖ AsyncRouteHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (workers: {max_workers}, timeout: {default_timeout}s)")
    
    def _init_async_loop(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_event_loop():
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                self.loop = asyncio.new_event_loop()
                asyncio.set_event_loop(self.loop)
                
                logger.info("üîÑ Event loop –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                self._loop_ready.set()  # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º loop –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                self.loop.run_forever()
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ event loop: {e}")
                self._loop_ready.set()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            finally:
                if self.loop and not self.loop.is_closed():
                    self.loop.close()
                logger.info("üõë Event loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å event loop
        self.loop_thread = threading.Thread(
            target=run_event_loop, 
            name="AsyncEventLoop",
            daemon=True
        )
        self.loop_thread.start()
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ loop (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
        if not self._loop_ready.wait(timeout=5.0):
            raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å event loop")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ loop –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω
        if self.loop is None or self.loop.is_closed():
            raise RuntimeError("‚ùå Event loop –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω")
    
    
    def _get_python_version(self) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Python –¥–ª—è compatibility checks"""
        return sys.version_info[:2]
    
    def _supports_executor_timeout(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ timeout parameter –≤ ThreadPoolExecutor.shutdown()"""
        python_version = self._get_python_version()
        # timeout parameter –¥–æ–±–∞–≤–ª–µ–Ω –≤ Python 3.9
        return python_version >= (3, 9)
    
    def _ensure_loop_healthy(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è event loop –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ loop –∑–¥–æ—Ä–æ–≤ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        """
        if self.loop is None or self.loop.is_closed() or not self.loop.is_running():
            logger.warning("‚ö†Ô∏è Event loop –Ω–µ–∑–¥–æ—Ä–æ–≤, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π loop –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if self.loop and not self.loop.is_closed():
                    self.loop.call_soon_threadsafe(self.loop.stop)
                    time.sleep(0.5)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                if self.loop_thread and self.loop_thread.is_alive():
                    self.loop_thread.join(timeout=2.0)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                self._loop_ready.clear()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π loop
                self._init_async_loop()
                self.stats['last_restart'] = datetime.utcnow()
                
                logger.info("‚úÖ Event loop —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å event loop: {e}")
                return False
        
        return True
    
    def async_route(self, timeout: Optional[int] = None) -> Callable:
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è Flask –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å async —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default_timeout)
            
        Returns:
            –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            
        Example:
            @app.route('/api/bot/start', methods=['POST'])
            @async_handler.async_route(timeout=30)
            async def start_bot():
                result = await bot_controller.start_bot()
                return jsonify(result)
        """
        def decorator(func: Callable) -> Callable:
            @wraps(func)
            def wrapper(*args, **kwargs):
                operation_timeout = timeout or self.default_timeout
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['total_requests'] += 1
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ event loop
                    if not self._ensure_loop_healthy():
                        self.stats['failed_requests'] += 1
                        return {
                            'success': False, 
                            'error': 'Event loop unavailable'
                        }, 500
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º async —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ event loop
                    future = asyncio.run_coroutine_threadsafe(
                        func(*args, **kwargs), 
                        self.loop
                    )
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    result = future.result(timeout=operation_timeout)
                    
                    self.stats['successful_requests'] += 1
                    return result
                    
                except FutureTimeoutError:
                    self.stats['timeout_requests'] += 1
                    logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç async –æ–ø–µ—Ä–∞—Ü–∏–∏: {func.__name__} (>{operation_timeout}s)")
                    return {
                        'success': False, 
                        'error': f'Operation timeout ({operation_timeout}s)'
                    }, 408
                    
                except asyncio.CancelledError:
                    self.stats['failed_requests'] += 1
                    logger.warning(f"üö´ Async –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: {func.__name__}")
                    return {
                        'success': False, 
                        'error': 'Operation cancelled'
                    }, 499
                    
                except Exception as e:
                    self.stats['failed_requests'] += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ async –º–∞—Ä—à—Ä—É—Ç–µ {func.__name__}: {e}")
                    return {
                        'success': False, 
                        'error': str(e)
                    }, 500
            
            return wrapper
        return decorator
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã handler'–∞"""
        if self.stats['total_requests'] > 0:
            success_rate = (self.stats['successful_requests'] / self.stats['total_requests']) * 100
        else:
            success_rate = 0.0
            
        return {
            **self.stats,
            'success_rate': round(success_rate, 2),
            'loop_status': {
                'running': self.loop is not None and self.loop.is_running(),
                'closed': self.loop is None or self.loop.is_closed(),
                'thread_alive': self.loop_thread is not None and self.loop_thread.is_alive()
            }
        }
    
    def shutdown(self):
        """–í–µ—Ä—Å–∏–æ–Ω–Ω–æ-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã handler'–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AsyncRouteHandler...")
        
        try:
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self._shutdown_event.set()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
            if self.loop and not self.loop.is_closed():
                self.loop.call_soon_threadsafe(self.loop.stop)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.loop_thread and self.loop_thread.is_alive():
                self.loop_thread.join(timeout=5.0)
                
            # –í–µ—Ä—Å–∏–æ–Ω–Ω–æ-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π executor shutdown
            if self._supports_executor_timeout():
                logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º executor shutdown —Å timeout")
                self.executor.shutdown(wait=True, timeout=5.0)
            else:
                logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º executor shutdown –±–µ–∑ timeout (Python < 3.9)")
                self.executor.shutdown(wait=True)
                
            logger.info("‚úÖ AsyncRouteHandler –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ AsyncRouteHandler: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
async_handler = AsyncRouteHandler()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è handler'–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
def get_async_handler(max_workers: int = 4, timeout: int = 30) -> AsyncRouteHandler:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ AsyncRouteHandler
    
    Args:
        max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        timeout: –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AsyncRouteHandler
    """
    return AsyncRouteHandler(max_workers=max_workers, default_timeout=timeout)

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = ['AsyncRouteHandler', 'async_handler', 'get_async_handler']