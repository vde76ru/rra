"""
WebSocket Manager - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Flask-SocketIO
–ü—É—Ç—å: src/web/websocket_manager.py
"""
import logging
import json
from datetime import datetime
from typing import Dict, Set, Any, Optional
from flask_socketio import SocketIO, emit, disconnect
from flask import request
import threading
from ..bot.state_manager import state_manager

logger = logging.getLogger(__name__)

class WebSocketManager:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    –†–∞–±–æ—Ç–∞–µ—Ç —Å Flask-SocketIO –±–µ–∑ asyncio –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    """
    
    def __init__(self, socketio: SocketIO):
        self.socketio = socketio
        self.active_connections: Set[str] = set()
        self.subscriptions: Dict[str, Set[str]] = {}  # channel -> set of sids
        self._lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_connections': 0,
            'active_connections': 0,
            'messages_sent': 0,
            'start_time': datetime.utcnow()
        }
        
        self._setup_handlers()
        logger.info("‚úÖ WebSocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ SocketIO"""
        
        @self.socketio.on('connect')
        def handle_connect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
            sid = request.sid
            with self._lock:
                self.active_connections.add(sid)
                self.stats['total_connections'] += 1
                self.stats['active_connections'] = len(self.active_connections)
            
            logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {sid}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            emit('connected', {
                'status': 'connected',
                'timestamp': datetime.utcnow().isoformat()
            })
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
            sid = request.sid
            with self._lock:
                self.active_connections.discard(sid)
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                for channel_sids in self.subscriptions.values():
                    channel_sids.discard(sid)
                self.stats['active_connections'] = len(self.active_connections)
            
            logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {sid}")
        
        @self.socketio.on('subscribe')
        def handle_subscribe(data):
            """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"""
            sid = request.sid
            channel = data.get('channel')
            
            if channel:
                with self._lock:
                    if channel not in self.subscriptions:
                        self.subscriptions[channel] = set()
                    self.subscriptions[channel].add(sid)
                
                emit('subscribed', {'channel': channel})
                logger.info(f"üì° {sid} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {channel}")
        
        @self.socketio.on('unsubscribe')
        def handle_unsubscribe(data):
            """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞"""
            sid = request.sid
            channel = data.get('channel')
            
            if channel:
                with self._lock:
                    if channel in self.subscriptions:
                        self.subscriptions[channel].discard(sid)
                
                emit('unsubscribed', {'channel': channel})
                logger.info(f"üì° {sid} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {channel}")
    
    def broadcast_to_all(self, event: str, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        try:
            self.socketio.emit(event, data)
            self.stats['messages_sent'] += 1
            logger.debug(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º: {event}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ broadcast: {e}")
    
    def broadcast_to_channel(self, channel: str, event: str, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞"""
        try:
            with self._lock:
                channel_sids = self.subscriptions.get(channel, set())
            
            for sid in channel_sids:
                self.socketio.emit(event, data, room=sid)
            
            self.stats['messages_sent'] += len(channel_sids)
            logger.debug(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel}: {event}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ broadcast to channel: {e}")
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            return {
                **self.stats,
                'active_connections': len(self.active_connections),
                'channels': len(self.subscriptions),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logger.info("‚úÖ WebSocketManager –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        with self._lock:
            self.active_connections.clear()
            self.subscriptions.clear()
        logger.info("üõë WebSocketManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _on_bot_state_changed(self, bot_state):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            self.broadcast_to_all('bot_status', bot_state.to_api_dict())
            logger.debug("üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ WebSocket")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {e}")
        
    # –ù–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
    state_manager.add_observer(self._on_bot_state_changed)
    logger.info("‚úÖ WebSocketManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å StateManager")

def create_websocket_manager(socketio: SocketIO, bot_manager=None) -> WebSocketManager:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return WebSocketManager(socketio)