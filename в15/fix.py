#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""
import os
import re
import shutil
from pathlib import Path

def fix_imports_in_file(filepath):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å from typing import
        typing_pattern = r'from typing import (.+)'
        
        def fix_typing_imports(match):
            imports = match.group(1)
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            import_list = [imp.strip() for imp in imports.split(',')]
            unique_imports = []
            seen = set()
            for imp in import_list:
                if imp and imp not in seen:
                    seen.add(imp)
                    unique_imports.append(imp)
            return f"from typing import {', '.join(unique_imports)}"
        
        content = re.sub(typing_pattern, fix_typing_imports, content)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        lines = content.split('\n')
        seen_imports = set()
        new_lines = []
        
        for line in lines:
            if line.strip().startswith(('import ', 'from ')):
                if line.strip() not in seen_imports:
                    seen_imports.add(line.strip())
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        content = '\n'.join(new_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if content != original_content:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = filepath + '.backup'
            shutil.copy2(filepath, backup_path)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {filepath}")
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {filepath}: {e}")
        return False

def remove_unused_files():
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã"""
    unused_files = [
        'src/strategies/improved_multi_indicator.py',
        'src/strategies/simple_momentum.py',
        'src/strategies/advanced_strategies.py',
    ]
    
    for filepath in unused_files:
        if os.path.exists(filepath):
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ –ø–∞–ø–∫–µ backup
            backup_dir = 'backup_unused'
            os.makedirs(backup_dir, exist_ok=True)
            backup_path = os.path.join(backup_dir, os.path.basename(filepath))
            shutil.move(filepath, backup_path)
            print(f"üóëÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤ backup: {filepath} -> {backup_path}")

def fix_strategies_init():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç __init__.py –≤ strategies"""
    init_file = 'src/strategies/__init__.py'
    
    correct_content = '''"""–¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
from .factory import StrategyFactory

__all__ = ['StrategyFactory']
'''
    
    with open(init_file, 'w', encoding='utf-8') as f:
        f.write(correct_content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {init_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    print("=" * 50)
    
    # 1. –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    remove_unused_files()
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º __init__.py –≤ strategies
    print("\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ __init__.py...")
    fix_strategies_init()
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤–æ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–∞—Ö
    print("\nüîç –ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    fixed_count = 0
    total_count = 0
    
    for root, dirs, files in os.walk('src'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__
        if '__pycache__' in root:
            continue
            
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                total_count += 1
                
                if fix_imports_in_file(filepath):
                    fixed_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_count}")
    print(f"   –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import src.bot.manager
        import src.exchange.client
        import src.strategies.factory
        import src.web.app
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

if __name__ == "__main__":
    main()