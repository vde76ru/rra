"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º - –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: src/web/balance_api.py

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –°–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ src/web/
"""

from flask import jsonify, request
from datetime import datetime, timedelta
import logging
import threading
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class BalanceAPI:
    """–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    
    def __init__(self, exchange_client=None):
        self.exchange_client = exchange_client
        self.cache = {}
        self.cache_ttl = 30  # 30 —Å–µ–∫—É–Ω–¥
        self._lock = threading.Lock()
    
    def get_balance_from_db(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from ..core.database import SessionLocal
            from src.core.models import Balance
            from sqlalchemy import desc
            
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT
                latest_balance = db.query(Balance).filter(
                    Balance.asset == 'USDT'
                ).order_by(desc(Balance.updated_at)).first()
                
                if latest_balance:
                    return {
                        'USDT': {
                            'total': float(latest_balance.total),
                            'free': float(latest_balance.free),
                            'used': float(latest_balance.locked or 0)
                        }
                    }
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    return {
                        'USDT': {
                            'total': 1000.0,
                            'free': 950.0,
                            'used': 50.0
                        }
                    }
            finally:
                db.close()
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ë–î: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'USDT': {
                    'total': 1000.0,
                    'free': 950.0,
                    'used': 50.0
                }
            }
    
    def get_cached_balance(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–∑ –∫–µ—à–∞"""
        with self._lock:
            if 'balance' in self.cache:
                cached_data, timestamp = self.cache['balance']
                if (datetime.utcnow() - timestamp).seconds < self.cache_ttl:
                    return cached_data
        return None
    
    def set_cached_balance(self, balance_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –∫–µ—à–µ"""
        with self._lock:
            self.cache['balance'] = (balance_data, datetime.utcnow())
    
    def get_balance(self) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_balance = self.get_cached_balance()
        if cached_balance:
            return cached_balance
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_balance = self.get_balance_from_db()
        formatted_balance = self.format_balance_response(db_balance, source='database')
        self.set_cached_balance(formatted_balance)
        return formatted_balance
    
    def format_balance_response(self, balance_data: Dict[str, Any], source: str = 'unknown') -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º"""
        usdt_balance = balance_data.get('USDT', {})
        
        total = float(usdt_balance.get('total', 0))
        free = float(usdt_balance.get('free', 0))
        used = float(usdt_balance.get('used', 0))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
        initial_balance = 1000.0
        pnl_today = total - initial_balance
        pnl_percent = (pnl_today / initial_balance * 100) if initial_balance > 0 else 0
        
        return {
            'success': True,
            'total_usdt': total,
            'available_usdt': free,
            'in_positions': used,
            'pnl_today': round(pnl_today, 2),
            'pnl_percent': round(pnl_percent, 2),
            'source': source,
            'timestamp': datetime.utcnow().isoformat(),
            'last_update': datetime.utcnow().strftime('%H:%M:%S')
        }


def register_balance_routes(app, exchange_client=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –≤ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        exchange_client: –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    """
    balance_api = BalanceAPI(exchange_client)
    
    @app.route('/api/balance')
    def get_balance_api():
        """–û–°–ù–û–í–ù–û–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ë–ê–õ–ê–ù–°–ê"""
        try:
            balance_data = balance_api.get_balance()
            return jsonify(balance_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –±–∞–ª–∞–Ω—Å–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'total_usdt': 0,
                'available_usdt': 0,
                'in_positions': 0,
                'pnl_today': 0,
                'pnl_percent': 0,
                'source': 'error'
            }), 500
    
    @app.route('/api/balance/refresh', methods=['POST'])
    def refresh_balance():
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Å–±—Ä–æ—Å –∫–µ—à–∞)"""
        try:
            balance_api.cache.clear()
            balance_data = balance_api.get_balance()
            return jsonify({
                'success': True,
                'message': 'Balance refreshed',
                'data': balance_data
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return jsonify({'success': False, 'error': str(e)}), 500
    
    logger.info("‚úÖ –†–æ—É—Ç—ã –±–∞–ª–∞–Ω—Å–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   üü¢ GET /api/balance")
    logger.info("   üü¢ POST /api/balance/refresh")
    
    return balance_api