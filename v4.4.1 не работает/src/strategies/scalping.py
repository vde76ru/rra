"""
–°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/strategies/scalping.py
"""
import pandas as pd
import numpy as np
import logging
from typing import Dict, Any, Optional  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω Any

from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import VolumeWeightedAveragePrice

from .base import BaseStrategy, TradingSignal

logger = logging.getLogger(__name__)

class ScalpingStrategy(BaseStrategy):
    """
    üöÄ –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–¥–µ–ª–æ–∫
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–∞–ª—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (1m, 5m)
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–µ—Å—Ç–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
    - –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–π
    - –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ Bollinger Bands, RSI –∏ VWAP
    """
    
    # ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    STRATEGY_TYPE = "scalping"
    RISK_LEVEL = "high"
    TIMEFRAMES = ["1m", "5m", "15m"]
    MIN_VOLATILITY = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ %
    MAX_VOLATILITY = 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ %
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫:
                - bb_period: –ø–µ—Ä–∏–æ–¥ Bollinger Bands (default: 20)
                - bb_std: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ BB (default: 2)
                - rsi_period: –ø–µ—Ä–∏–æ–¥ RSI (default: 7)
                - min_profit_percent: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å % (default: 0.3)
                - max_loss_percent: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è % (default: 0.2)
                - min_volume_ratio: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º (default: 1.5)
        """
        super().__init__("scalping")
        
        # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–§–ò–ì–ê
        if config is None:
            config = {}
        elif not isinstance(config, dict):
            logger.error(f"‚ùå Config –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict, –ø–æ–ª—É—á–µ–Ω {type(config)}: {config}")
            config = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Bollinger Bands
        self.bb_period = config.get('bb_period', 20)
        self.bb_std = config.get('bb_std', 2)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI
        self.rsi_period = config.get('rsi_period', 7)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        self.min_profit_percent = config.get('min_profit_percent', 0.3)  # 0.3% –º–∏–Ω–∏–º—É–º
        self.max_loss_percent = config.get('max_loss_percent', 0.2)      # 0.2% –º–∞–∫—Å–∏–º—É–º
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–º–∞
        self.min_volume_ratio = config.get('min_volume_ratio', 1.5)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.min_confidence = config.get('min_confidence', 0.7)
        
        logger.info(f"üöÄ ScalpingStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: profit={self.min_profit_percent}%, loss={self.max_loss_percent}%")
    
    async def analyze(self, df: pd.DataFrame, symbol: str) -> TradingSignal:
        """
        üîç –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            TradingSignal: –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        """
        
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        validation_result = self._validate_scalping_data(df, symbol)
        if validation_result:
            return validation_result
        
        try:
            logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è {symbol}, –¥–∞–Ω–Ω—ã—Ö: {len(df)}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_scalping_indicators(df)
            
            if not indicators:
                return TradingSignal('WAIT', 0, 0, reason='‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            scalp_signal = self._check_scalping_conditions(indicators)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            return self._make_scalping_decision(scalp_signal, indicators, symbol)
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
            return TradingSignal('WAIT', 0, 0, reason=f'üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)[:100]}')
    
    def _validate_scalping_data(self, df: pd.DataFrame, symbol: str) -> Optional[TradingSignal]:
        """
        üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        –°–∫–∞–ª—å–ø–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.validate_dataframe(df):
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        min_required = max(self.bb_period, self.rsi_period, 20)
        if len(df) < min_required:
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {len(df)}/{min_required}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['open', 'high', 'low', 'close', 'volume']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {", ".join(missing_cols)}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ NaN –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö)
        recent_data = df.tail(5)
        if recent_data[required_cols].isnull().any().any():
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –æ–±—ä–µ–º—ã
        if (recent_data['volume'] == 0).any():
            return TradingSignal('WAIT', 0, 0, reason='‚ö†Ô∏è –ù—É–ª–µ–≤—ã–µ –æ–±—ä–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö')
        
        return None  # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
    
    def _calculate_scalping_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        üìä –†–ê–°–ß–ï–¢ –ò–ù–î–ò–ö–ê–¢–û–†–û–í –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        indicators = {}
        
        try:
            current_price = df['close'].iloc[-1]
            
            # ‚úÖ BOLLINGER BANDS - –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            try:
                bb = BollingerBands(df['close'], window=self.bb_period, window_dev=self.bb_std)
                
                bb_upper = bb.bollinger_hband()
                bb_lower = bb.bollinger_lband()
                bb_middle = bb.bollinger_mavg()
                bb_width = bb.bollinger_wband()
                bb_percent = bb.bollinger_pband()
                
                indicators['bb_upper'] = bb_upper.iloc[-1] if not bb_upper.empty else current_price * 1.02
                indicators['bb_lower'] = bb_lower.iloc[-1] if not bb_lower.empty else current_price * 0.98
                indicators['bb_middle'] = bb_middle.iloc[-1] if not bb_middle.empty else current_price
                indicators['bb_width'] = bb_width.iloc[-1] if not bb_width.empty else 0.02
                indicators['bb_percent'] = bb_percent.iloc[-1] if not bb_percent.empty else 0.5
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ BB: {e}")
                indicators.update({
                    'bb_upper': current_price * 1.02,
                    'bb_lower': current_price * 0.98,
                    'bb_middle': current_price,
                    'bb_width': 0.02,
                    'bb_percent': 0.5
                })
            
            # ‚úÖ RSI - –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            try:
                rsi = RSIIndicator(df['close'], window=self.rsi_period)
                rsi_values = rsi.rsi()
                indicators['rsi'] = rsi_values.iloc[-1] if not rsi_values.empty else 50.0
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ RSI: {e}")
                indicators['rsi'] = 50.0
            
            # ‚úÖ VWAP - –≤–∞–∂–µ–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            try:
                vwap = VolumeWeightedAveragePrice(df['high'], df['low'], df['close'], df['volume'])
                vwap_values = vwap.volume_weighted_average_price()
                indicators['vwap'] = vwap_values.iloc[-1] if not vwap_values.empty else current_price
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ VWAP: {e}")
                indicators['vwap'] = current_price
            
            # ‚úÖ ATR - –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
            try:
                atr = AverageTrueRange(df['high'], df['low'], df['close'], window=14)
                atr_values = atr.average_true_range()
                atr_value = atr_values.iloc[-1] if not atr_values.empty else current_price * 0.01
                
                indicators['atr'] = atr_value
                indicators['atr_percent'] = (atr_value / current_price) * 100
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ATR: {e}")
                indicators['atr'] = current_price * 0.01
                indicators['atr_percent'] = 1.0
            
            # ‚úÖ –û–ë–™–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó
            try:
                volume_sma = df['volume'].rolling(window=20).mean().iloc[-1]
                current_volume = df['volume'].iloc[-1]
                
                indicators['volume_sma'] = volume_sma if pd.notna(volume_sma) else current_volume
                indicators['volume_ratio'] = current_volume / indicators['volume_sma'] if indicators['volume_sma'] > 0 else 1.0
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Volume: {e}")
                indicators['volume_sma'] = df['volume'].iloc[-1]
                indicators['volume_ratio'] = 1.0
            
            # ‚úÖ PRICE ACTION –ê–ù–ê–õ–ò–ó
            try:
                last_candle = df.iloc[-1]
                
                indicators['current_price'] = current_price
                indicators['price_range'] = last_candle['high'] - last_candle['low']
                indicators['candle_body'] = abs(last_candle['close'] - last_candle['open'])
                indicators['upper_wick'] = last_candle['high'] - max(last_candle['close'], last_candle['open'])
                indicators['lower_wick'] = min(last_candle['close'], last_candle['open']) - last_candle['low']
                
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                if indicators['price_range'] > 0:
                    indicators['body_ratio'] = indicators['candle_body'] / indicators['price_range']
                    indicators['upper_wick_ratio'] = indicators['upper_wick'] / indicators['price_range']
                    indicators['lower_wick_ratio'] = indicators['lower_wick'] / indicators['price_range']
                else:
                    indicators['body_ratio'] = 0.5
                    indicators['upper_wick_ratio'] = 0.0
                    indicators['lower_wick_ratio'] = 0.0
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Price Action: {e}")
                indicators.update({
                    'current_price': current_price,
                    'price_range': current_price * 0.01,
                    'candle_body': current_price * 0.005,
                    'upper_wick': 0,
                    'lower_wick': 0,
                    'body_ratio': 0.5,
                    'upper_wick_ratio': 0.0,
                    'lower_wick_ratio': 0.0
                })
            
            # ‚úÖ –ú–ò–ö–†–û-–¢–†–ï–ù–î (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π)
            try:
                if len(df) >= 5:
                    price_5_ago = df['close'].iloc[-5]
                    indicators['micro_trend'] = 'UP' if current_price > price_5_ago else 'DOWN'
                    indicators['micro_trend_strength'] = abs(current_price - price_5_ago) / price_5_ago * 100
                else:
                    indicators['micro_trend'] = 'FLAT'
                    indicators['micro_trend_strength'] = 0.0
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Micro Trend: {e}")
                indicators['micro_trend'] = 'FLAT'
                indicators['micro_trend_strength'] = 0.0
            
            logger.debug(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
            return indicators
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}", exc_info=True)
            return {}
    
    def _check_scalping_conditions(self, indicators: Dict[str, Any]) -> Dict[str, Any]:
        """
        üéØ –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–≥–Ω–∞–ª–µ
        """
        signal = {
            'direction': None,
            'strength': 0.0,
            'entry_type': None,
            'reasons': [],
            'confidence': 0.0
        }
        
        try:
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò
            atr_percent = indicators.get('atr_percent', 1.0)
            
            if atr_percent > self.MAX_VOLATILITY:
                signal['reasons'].append(f'–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {atr_percent:.2f}%')
                return signal
            
            if atr_percent < self.MIN_VOLATILITY:
                signal['reasons'].append(f'–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {atr_percent:.2f}%')
                return signal
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–ê
            volume_ratio = indicators.get('volume_ratio', 1.0)
            if volume_ratio < self.min_volume_ratio:
                signal['reasons'].append(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º: {volume_ratio:.2f}x')
                return signal
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            bb_percent = indicators.get('bb_percent', 0.5)
            rsi = indicators.get('rsi', 50.0)
            current_price = indicators.get('current_price', 0)
            vwap = indicators.get('vwap', current_price)
            lower_wick_ratio = indicators.get('lower_wick_ratio', 0.0)
            upper_wick_ratio = indicators.get('upper_wick_ratio', 0.0)
            micro_trend = indicators.get('micro_trend', 'FLAT')
            
            # === üü¢ –£–°–õ–û–í–ò–Ø –î–õ–Ø –ü–û–ö–£–ü–ö–ò ===
            
            # 1. –û—Ç—Å–∫–æ–∫ –æ—Ç –Ω–∏–∂–Ω–µ–π Bollinger Band
            if (bb_percent < 0.2 and 
                rsi < 35 and
                lower_wick_ratio > 0.4):  # –î–ª–∏–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å (40% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
                
                signal['direction'] = 'BUY'
                signal['entry_type'] = 'BB_BOUNCE_LOW'
                signal['strength'] = 0.8
                signal['confidence'] = 0.8
                signal['reasons'].append(f'–û—Ç—Å–∫–æ–∫ –æ—Ç –Ω–∏–∂–Ω–µ–π BB: RSI={rsi:.1f}, BB%={bb_percent:.2f}')
            
            # 2. –ü—Ä–æ—Ä—ã–≤ VWAP –≤–≤–µ—Ä—Ö —Å –æ–±—ä–µ–º–æ–º
            elif (current_price > vwap and
                  current_price < vwap * 1.003 and  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.3% –æ—Ç VWAP
                  volume_ratio > self.min_volume_ratio and
                  micro_trend == 'UP' and
                  bb_percent > 0.3 and bb_percent < 0.7):  # –í —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ BB
                
                signal['direction'] = 'BUY'
                signal['entry_type'] = 'VWAP_BREAKOUT_UP'
                signal['strength'] = 0.7
                signal['confidence'] = 0.75
                signal['reasons'].append(f'–ü—Ä–æ—Ä—ã–≤ VWAP –≤–≤–µ—Ä—Ö: –æ–±—ä–µ–º={volume_ratio:.1f}x, —Ç—Ä–µ–Ω–¥={micro_trend}')
            
            # 3. –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—Å–∫–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ BB
            elif (bb_percent > 0.3 and bb_percent < 0.5 and
                  rsi > 45 and rsi < 55 and
                  lower_wick_ratio > 0.3 and
                  volume_ratio > 1.3):
                
                signal['direction'] = 'BUY'
                signal['entry_type'] = 'MIDDLE_BOUNCE'
                signal['strength'] = 0.6
                signal['confidence'] = 0.65
                signal['reasons'].append(f'–û—Ç—Å–∫–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ: RSI={rsi:.1f}, —Ç–µ–Ω—å={lower_wick_ratio:.2f}')
            
            # === üî¥ –£–°–õ–û–í–ò–Ø –î–õ–Ø –ü–†–û–î–ê–ñ–ò ===
            
            # 1. –û—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π Bollinger Band
            elif (bb_percent > 0.8 and
                  rsi > 65 and
                  upper_wick_ratio > 0.4):  # –î–ª–∏–Ω–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å
                
                signal['direction'] = 'SELL'
                signal['entry_type'] = 'BB_BOUNCE_HIGH'
                signal['strength'] = 0.8
                signal['confidence'] = 0.8
                signal['reasons'].append(f'–û—Ç—Å–∫–æ–∫ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π BB: RSI={rsi:.1f}, BB%={bb_percent:.2f}')
            
            # 2. –ü—Ä–æ–±–æ–π VWAP –≤–Ω–∏–∑ —Å –æ–±—ä–µ–º–æ–º
            elif (current_price < vwap and
                  current_price > vwap * 0.997 and  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.3% –æ—Ç VWAP
                  volume_ratio > self.min_volume_ratio and
                  micro_trend == 'DOWN' and
                  bb_percent > 0.3 and bb_percent < 0.7):  # –í —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ BB
                
                signal['direction'] = 'SELL'
                signal['entry_type'] = 'VWAP_BREAKOUT_DOWN'
                signal['strength'] = 0.7
                signal['confidence'] = 0.75
                signal['reasons'].append(f'–ü—Ä–æ–±–æ–π VWAP –≤–Ω–∏–∑: –æ–±—ä–µ–º={volume_ratio:.1f}x, —Ç—Ä–µ–Ω–¥={micro_trend}')
            
            # 3. –ë—ã—Å—Ç—Ä—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ BB
            elif (bb_percent > 0.5 and bb_percent < 0.7 and
                  rsi > 45 and rsi < 55 and
                  upper_wick_ratio > 0.3 and
                  volume_ratio > 1.3):
                
                signal['direction'] = 'SELL'
                signal['entry_type'] = 'MIDDLE_REVERSAL'
                signal['strength'] = 0.6
                signal['confidence'] = 0.65
                signal['reasons'].append(f'–†–∞–∑–≤–æ—Ä–æ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–π –∑–æ–Ω–µ: RSI={rsi:.1f}, —Ç–µ–Ω—å={upper_wick_ratio:.2f}')
            
            else:
                # –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                signal['reasons'].append('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞')
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {e}")
            signal['reasons'].append(f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)[:50]}')
            return signal
    
    def _make_scalping_decision(self, scalp_signal: Dict[str, Any], 
                              indicators: Dict[str, Any], symbol: str) -> TradingSignal:
        """
        üéØ –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        
        Args:
            scalp_signal: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            symbol: –°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            TradingSignal: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        """
        
        try:
            current_price = indicators.get('current_price', 0)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∂–¥–µ–º
            if not scalp_signal.get('direction'):
                reason = scalp_signal['reasons'][0] if scalp_signal['reasons'] else '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞'
                return TradingSignal(
                    action='WAIT',
                    confidence=0,
                    price=current_price,
                    reason=f'‚è≥ {reason}',
                    indicators=indicators
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = scalp_signal.get('confidence', 0)
            if confidence < self.min_confidence:
                return TradingSignal(
                    action='WAIT',
                    confidence=confidence,
                    price=current_price,
                    reason=f'‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {confidence:.2f}',
                    indicators=indicators
                )
            
            # ‚úÖ –†–ê–°–ß–ï–¢ –£–†–û–í–ù–ï–ô –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (–∂–µ—Å—Ç–∫–∏–µ —Å—Ç–æ–ø—ã!)
            direction = scalp_signal['direction']
            
            if direction == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ - –∂–µ—Å—Ç–∫–∏–µ —É—Ä–æ–≤–Ω–∏
                stop_loss = current_price * (1 - self.max_loss_percent / 100)
                take_profit = current_price * (1 + self.min_profit_percent / 100)
                
            else:  # SELL
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ - –∂–µ—Å—Ç–∫–∏–µ —É—Ä–æ–≤–Ω–∏
                stop_loss = current_price * (1 + self.max_loss_percent / 100)
                take_profit = current_price * (1 - self.min_profit_percent / 100)
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê RISK/REWARD –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
            
            # –î–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–æ–ø—É—Å—Ç–∏–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π R:R
            min_rr = 0.8  # –ú–∏–Ω–∏–º—É–º 0.8:1 –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            if risk_reward < min_rr:
                return TradingSignal(
                    action='WAIT',
                    confidence=confidence,
                    price=current_price,
                    reason=f'‚ö†Ô∏è –ù–∏–∑–∫–∏–π R:R –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {risk_reward:.2f} < {min_rr}',
                    indicators=indicators
                )
            
            # ‚úÖ –§–û–†–ú–ò–†–£–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ
            entry_type = scalp_signal.get('entry_type', 'UNKNOWN')
            reasons = scalp_signal.get('reasons', ['–°–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª'])
            main_reason = reasons[0] if reasons else '–°–∫–∞–ª—å–ø–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
            
            return TradingSignal(
                action=direction,
                confidence=confidence,
                price=current_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                reason=f'üöÄ –°–∫–∞–ª—å–ø–∏–Ω–≥ ({entry_type}): {main_reason}',
                risk_reward_ratio=risk_reward,
                indicators=indicators
            )
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –¥–ª—è {symbol}: {e}")
            return TradingSignal(
                action='WAIT',
                confidence=0,
                price=indicators.get('current_price', 0),
                reason=f'üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {str(e)[:100]}'
            )