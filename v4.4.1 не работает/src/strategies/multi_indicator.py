"""
–ú—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/strategies/multi_indicator.py

üéØ –û–°–ù–û–í–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –£—Å–∏–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
"""

import pandas as pd
import numpy as np
import logging
import hashlib
from typing import Dict, Any, Optional, List, Tuple  # ‚úÖ –í–°–ï –∏–º–ø–æ—Ä—Ç—ã –∏–∑ typing –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import EMAIndicator, MACD, ADXIndicator
from ta.volatility import BollingerBands, AverageTrueRange
from ta.volume import OnBalanceVolumeIndicator

from .base import BaseStrategy, TradingSignal

logger = logging.getLogger(__name__)


class MultiIndicatorStrategy(BaseStrategy):
    """
    üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    - –ö–µ—à–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ò–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ó–∞—â–∏—â–µ–Ω–∞ –æ—Ç –æ—à–∏–±–æ–∫ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    # ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–´: –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –¥–ª—è –ª–µ–≥–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    RSI_OVERSOLD = 30
    RSI_OVERBOUGHT = 70
    STOCH_OVERSOLD = 20
    STOCH_OVERBOUGHT = 80
    ADX_TREND_THRESHOLD = 25
    VOLUME_RATIO_THRESHOLD = 1.5
    BB_LOWER_THRESHOLD = 0.2
    BB_UPPER_THRESHOLD = 0.8
    MIN_DATA_LENGTH = 200  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    MIN_VOLATILITY_THRESHOLD = 0.01  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        üèóÔ∏è –ö–û–ù–°–¢–†–£–ö–¢–û–† —Å –≥–∏–±–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                - min_confidence: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (default: 0.65)
                - min_indicators_confirm: –º–∏–Ω–∏–º—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (default: 3)
                - rsi_oversold/overbought: –ø–æ—Ä–æ–≥–∏ RSI (default: 30/70)
                - –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...
        """
        super().__init__("multi_indicator")
        
        # ‚úÖ –ì–ò–ë–ö–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ config –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if config:
            self.min_confidence = config.get('min_confidence', 0.65)
            self.min_indicators_confirm = config.get('min_indicators_confirm', 3)
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            self.RSI_OVERSOLD = config.get('rsi_oversold', self.RSI_OVERSOLD)
            self.RSI_OVERBOUGHT = config.get('rsi_overbought', self.RSI_OVERBOUGHT)
            self.STOCH_OVERSOLD = config.get('stoch_oversold', self.STOCH_OVERSOLD)
            self.STOCH_OVERBOUGHT = config.get('stoch_overbought', self.STOCH_OVERBOUGHT)
            self.ADX_TREND_THRESHOLD = config.get('adx_threshold', self.ADX_TREND_THRESHOLD)
            self.VOLUME_RATIO_THRESHOLD = config.get('volume_threshold', self.VOLUME_RATIO_THRESHOLD)
        else:
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.min_confidence = 0.65
            self.min_indicators_confirm = 3
        
        # ‚úÖ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._indicators_cache = {}
        self._last_df_hash = None
        
        logger.info(f"üöÄ MultiIndicatorStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å min_confidence={self.min_confidence}")
    
    async def analyze(self, df: pd.DataFrame, symbol: str) -> TradingSignal:
        """
        üîç –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –ê–ù–ê–õ–ò–ó–ê —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            TradingSignal: –°–∏–≥–Ω–∞–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π (BUY/SELL/WAIT)
        """
        
        # ‚úÖ –†–ê–ù–ù–Ø–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
        validation_result = self._validate_input_data(df, symbol)
        if validation_result:
            return validation_result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª WAIT —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        
        try:
            # ‚úÖ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—á–∏—Å–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
            df_hash = self._calculate_dataframe_hash(df)
            if df_hash == self._last_df_hash and self._indicators_cache:
                logger.debug(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}")
                indicators = self._indicators_cache
            else:
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–Ω–æ–≤–æ
                logger.debug(f"üîÑ –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}")
                indicators = self._calculate_indicators(df)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                if not indicators:
                    return TradingSignal('WAIT', 0, 0, reason='‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                self._indicators_cache = indicators
                self._last_df_hash = df_hash
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            signals = self._analyze_signals(indicators, df)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            return self._make_decision(signals, indicators, df, symbol)
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", exc_info=True)
            return TradingSignal('WAIT', 0, 0, reason=f'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}')
    
    def _validate_input_data(self, df: pd.DataFrame, symbol: str) -> Optional[TradingSignal]:
        """
        üõ°Ô∏è –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –Ω–µ–ø—É—Å—Ç–æ—Ç—É DataFrame
        - –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ NaN –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        
        Returns:
            None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏–Ω–∞—á–µ TradingSignal —Å –æ—à–∏–±–∫–æ–π
        """
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ –ø—É—Å—Ç–æ—Ç—É
        if df is None:
            logger.error(f"‚ùå DataFrame is None –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ')
        
        if df.empty:
            logger.error(f"‚ùå DataFrame –ø—É—Å—Ç–æ–π –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –ü—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['open', 'high', 'low', 'close', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ {missing_columns} –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {", ".join(missing_columns)}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
        nan_columns = df[required_columns].columns[df[required_columns].isnull().any()].tolist()
        if nan_columns:
            logger.warning(f"‚ö†Ô∏è NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö {nan_columns} –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤: {", ".join(nan_columns)}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ)
        price_columns = ['open', 'high', 'low', 'close']
        invalid_prices = (df[price_columns] <= 0).any()
        if invalid_prices.any():
            invalid_cols = invalid_prices[invalid_prices].index.tolist()
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –≤ {invalid_cols} –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –≤: {", ".join(invalid_cols)}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω (high >= low, close –º–µ–∂–¥—É high –∏ low)
        if (df['high'] < df['low']).any():
            logger.error(f"‚ùå High < Low –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –ù–∞—Ä—É—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω (High < Low)')
        
        if ((df['close'] > df['high']) | (df['close'] < df['low'])).any():
            logger.error(f"‚ùå Close –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ High-Low –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, reason='‚ùå Close —Ü–µ–Ω–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ High-Low')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(df) < self.MIN_DATA_LENGTH:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(df)} < {self.MIN_DATA_LENGTH}")
            return TradingSignal('WAIT', 0, 0, 
                               reason=f'‚ö†Ô∏è –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)}/{self.MIN_DATA_LENGTH}')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã
        if (df['volume'] < 0).any():
            logger.error(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è {symbol}")
            return TradingSignal('WAIT', 0, 0, reason='‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–æ–≤')
        
        logger.debug(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {symbol}")
        return None  # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    
    def _calculate_dataframe_hash(self, df: pd.DataFrame) -> str:
        """
        üî¢ –í–´–ß–ò–°–õ–ï–ù–ò–ï –•–ï–®–ê DataFrame –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        """
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            recent_data = df.tail(50)
            data_string = recent_data.to_string()
            return hashlib.md5(data_string.encode()).hexdigest()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞: {e}")
            return str(hash(str(df.iloc[-1].tolist())))  # Fallback —Ö–µ—à
    
    def _calculate_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        """
        üìä –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ –í–°–ï–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        
        Returns:
            Dict —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π dict –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        indicators = {}
        
        try:
            logger.debug("üìä –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            
            # ‚úÖ RSI - –ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã
            indicators.update(self._calculate_rsi_safely(df))
            
            # ‚úÖ MACD - –°—Ö–æ–∂–¥–µ–Ω–∏–µ-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            indicators.update(self._calculate_macd_safely(df))
            
            # ‚úÖ Bollinger Bands - –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
            indicators.update(self._calculate_bollinger_safely(df))
            
            # ‚úÖ EMA - –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            indicators.update(self._calculate_ema_safely(df))
            
            # ‚úÖ ADX - –ò–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            indicators.update(self._calculate_adx_safely(df))
            
            # ‚úÖ ATR - –°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤)
            indicators.update(self._calculate_atr_safely(df))
            
            # ‚úÖ Volume indicators - –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators.update(self._calculate_volume_safely(df))
            
            # ‚úÖ Stochastic - –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
            indicators.update(self._calculate_stochastic_safely(df))
            
            # ‚úÖ Price action - –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            indicators.update(self._calculate_price_action(df))
            
            logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return indicators
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}", exc_info=True)
            return {}
    
    def _calculate_rsi_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìà –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ RSI"""
        try:
            if len(df) >= 14:  # RSI —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 14 –ø–µ—Ä–∏–æ–¥–æ–≤
                rsi_indicator = RSIIndicator(df['close'], window=14)
                rsi_values = rsi_indicator.rsi()
                
                if not rsi_values.empty and not pd.isna(rsi_values.iloc[-1]):
                    return {'rsi': float(rsi_values.iloc[-1])}
            
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RSI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            return {'rsi': 50.0}  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            return {'rsi': 50.0}
    
    def _calculate_macd_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìä –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ MACD"""
        try:
            if len(df) >= 26:  # MACD —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 26 –ø–µ—Ä–∏–æ–¥–æ–≤
                macd = MACD(df['close'])
                macd_line = macd.macd()
                macd_signal = macd.macd_signal()
                macd_diff = macd.macd_diff()
                
                result = {}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                if not macd_line.empty and not pd.isna(macd_line.iloc[-1]):
                    result['macd'] = float(macd_line.iloc[-1])
                else:
                    result['macd'] = 0.0
                
                if not macd_signal.empty and not pd.isna(macd_signal.iloc[-1]):
                    result['macd_signal'] = float(macd_signal.iloc[-1])
                else:
                    result['macd_signal'] = 0.0
                
                if not macd_diff.empty and not pd.isna(macd_diff.iloc[-1]):
                    result['macd_diff'] = float(macd_diff.iloc[-1])
                else:
                    result['macd_diff'] = 0.0
                
                return result
            
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MACD")
            return {'macd': 0.0, 'macd_signal': 0.0, 'macd_diff': 0.0}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD: {e}")
            return {'macd': 0.0, 'macd_signal': 0.0, 'macd_diff': 0.0}
    
    def _calculate_bollinger_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìè –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ BOLLINGER BANDS"""
        try:
            if len(df) >= 20:  # BB —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 20 –ø–µ—Ä–∏–æ–¥–æ–≤
                bb = BollingerBands(df['close'], window=20, window_dev=2)
                
                bb_upper = bb.bollinger_hband()
                bb_middle = bb.bollinger_mavg()
                bb_lower = bb.bollinger_lband()
                bb_width = bb.bollinger_wband()
                bb_percent = bb.bollinger_pband()
                
                current_price = df['close'].iloc[-1]
                
                result = {}
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                result['bb_upper'] = float(bb_upper.iloc[-1]) if not bb_upper.empty and not pd.isna(bb_upper.iloc[-1]) else current_price * 1.02
                result['bb_middle'] = float(bb_middle.iloc[-1]) if not bb_middle.empty and not pd.isna(bb_middle.iloc[-1]) else current_price
                result['bb_lower'] = float(bb_lower.iloc[-1]) if not bb_lower.empty and not pd.isna(bb_lower.iloc[-1]) else current_price * 0.98
                result['bb_width'] = float(bb_width.iloc[-1]) if not bb_width.empty and not pd.isna(bb_width.iloc[-1]) else 0.02
                result['bb_percent'] = float(bb_percent.iloc[-1]) if not bb_percent.empty and not pd.isna(bb_percent.iloc[-1]) else 0.5
                
                return result
            
            current_price = df['close'].iloc[-1]
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Bollinger Bands")
            return {
                'bb_upper': current_price * 1.02,
                'bb_middle': current_price,
                'bb_lower': current_price * 0.98,
                'bb_width': 0.02,
                'bb_percent': 0.5
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands: {e}")
            current_price = df['close'].iloc[-1] if len(df) > 0 else 100.0
            return {
                'bb_upper': current_price * 1.02,
                'bb_middle': current_price,
                'bb_lower': current_price * 0.98,
                'bb_width': 0.02,
                'bb_percent': 0.5
            }
    
    def _calculate_ema_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìà –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ EMA –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
        result = {}
        periods = [9, 21, 50, 200]
        current_price = df['close'].iloc[-1]
        
        for period in periods:
            try:
                if len(df) >= period:
                    ema_indicator = EMAIndicator(df['close'], window=period)
                    ema_values = ema_indicator.ema_indicator()
                    
                    if not ema_values.empty and not pd.isna(ema_values.iloc[-1]):
                        result[f'ema_{period}'] = float(ema_values.iloc[-1])
                    else:
                        result[f'ema_{period}'] = current_price
                else:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    result[f'ema_{period}'] = current_price
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA-{period}: {e}")
                result[f'ema_{period}'] = current_price
        
        return result
    
    def _calculate_adx_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üí™ –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ ADX (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)"""
        try:
            if len(df) >= 14:  # ADX —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 14 –ø–µ—Ä–∏–æ–¥–æ–≤
                adx = ADXIndicator(df['high'], df['low'], df['close'])
                adx_values = adx.adx()
                adx_pos_values = adx.adx_pos()
                adx_neg_values = adx.adx_neg()
                
                result = {}
                result['adx'] = float(adx_values.iloc[-1]) if not adx_values.empty and not pd.isna(adx_values.iloc[-1]) else 0.0
                result['adx_pos'] = float(adx_pos_values.iloc[-1]) if not adx_pos_values.empty and not pd.isna(adx_pos_values.iloc[-1]) else 0.0
                result['adx_neg'] = float(adx_neg_values.iloc[-1]) if not adx_neg_values.empty and not pd.isna(adx_neg_values.iloc[-1]) else 0.0
                
                return result
            
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX")
            return {'adx': 0.0, 'adx_pos': 0.0, 'adx_neg': 0.0}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
            return {'adx': 0.0, 'adx_pos': 0.0, 'adx_neg': 0.0}
    
    def _calculate_atr_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìè –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ ATR –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤"""
        try:
            if len(df) >= 14:  # ATR —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 14 –ø–µ—Ä–∏–æ–¥–æ–≤
                atr = AverageTrueRange(df['high'], df['low'], df['close'])
                atr_values = atr.average_true_range()
                
                if not atr_values.empty and not pd.isna(atr_values.iloc[-1]):
                    return {'atr': float(atr_values.iloc[-1])}
            
            # Fallback: 2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            fallback_atr = df['close'].iloc[-1] * 0.02
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback ATR: {fallback_atr}")
            return {'atr': fallback_atr}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return {'atr': df['close'].iloc[-1] * 0.02}
    
    def _calculate_volume_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìä –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ –û–ë–™–ï–ú–ù–´–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í"""
        try:
            current_volume = df['volume'].iloc[-1]
            
            if len(df) >= 20:
                volume_sma = df['volume'].rolling(window=20).mean().iloc[-1]
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                if pd.notna(volume_sma) and volume_sma > 0:
                    volume_ratio = current_volume / volume_sma
                else:
                    volume_ratio = 1.0
                    volume_sma = current_volume
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                volume_sma = df['volume'].mean()
                volume_ratio = current_volume / volume_sma if volume_sma > 0 else 1.0
            
            return {
                'volume_sma': float(volume_sma),
                'volume_ratio': float(volume_ratio)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            current_volume = df['volume'].iloc[-1] if len(df) > 0 else 1.0
            return {'volume_sma': current_volume, 'volume_ratio': 1.0}
    
    def _calculate_stochastic_safely(self, df: pd.DataFrame) -> Dict[str, float]:
        """üìà –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ê–°–ß–ï–¢ STOCHASTIC"""
        try:
            if len(df) >= 14:  # Stochastic —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 14 –ø–µ—Ä–∏–æ–¥–æ–≤
                stoch = StochasticOscillator(df['high'], df['low'], df['close'])
                stoch_k_values = stoch.stoch()
                stoch_d_values = stoch.stoch_signal()
                
                result = {}
                result['stoch_k'] = float(stoch_k_values.iloc[-1]) if not stoch_k_values.empty and not pd.isna(stoch_k_values.iloc[-1]) else 50.0
                result['stoch_d'] = float(stoch_d_values.iloc[-1]) if not stoch_d_values.empty and not pd.isna(stoch_d_values.iloc[-1]) else 50.0
                
                return result
            
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Stochastic")
            return {'stoch_k': 50.0, 'stoch_d': 50.0}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Stochastic: {e}")
            return {'stoch_k': 50.0, 'stoch_d': 50.0}
    
    def _calculate_price_action(self, df: pd.DataFrame) -> Dict[str, float]:
        """üí∞ –†–ê–°–ß–ï–¢ –¶–ï–ù–û–í–´–• –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö"""
        try:
            current_price = float(df['close'].iloc[-1])
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            if len(df) >= 2:
                prev_price = df['close'].iloc[-2]
                price_change = ((current_price - prev_price) / prev_price * 100) if prev_price > 0 else 0.0
            else:
                price_change = 0.0
            
            return {
                'current_price': current_price,
                'price_change': float(price_change)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'current_price': 100.0, 'price_change': 0.0}
    
    def _analyze_signals(self, indicators: Dict[str, Any], df: pd.DataFrame) -> Dict[str, List]:
        """
        üîç –ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–û–í –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        –ö–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂: (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Å)
        –í–µ—Å –æ—Ç 0.0 –¥–æ 1.0 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        """
        signals = {
            'buy_signals': [],
            'sell_signals': [],
            'neutral_signals': []
        }
        
        try:
            # üìà RSI –°–ò–ì–ù–ê–õ–´
            rsi = indicators.get('rsi', 50)
            if rsi < self.RSI_OVERSOLD:
                signals['buy_signals'].append(('RSI', f'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})', 0.8))
            elif rsi > self.RSI_OVERBOUGHT:
                signals['sell_signals'].append(('RSI', f'–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({rsi:.1f})', 0.8))
            
            # üìä MACD –°–ò–ì–ù–ê–õ–´
            macd = indicators.get('macd', 0)
            macd_signal = indicators.get('macd_signal', 0)
            macd_diff = indicators.get('macd_diff', 0)
            
            if macd > macd_signal and macd_diff > 0:
                signals['buy_signals'].append(('MACD', '–ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ', 0.7))
            elif macd < macd_signal and macd_diff < 0:
                signals['sell_signals'].append(('MACD', '–ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ', 0.7))
            
            # üìè BOLLINGER BANDS –°–ò–ì–ù–ê–õ–´
            bb_percent = indicators.get('bb_percent', 0.5)
            if bb_percent < self.BB_LOWER_THRESHOLD:
                signals['buy_signals'].append(('BB', f'–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã ({bb_percent:.2f})', 0.6))
            elif bb_percent > self.BB_UPPER_THRESHOLD:
                signals['sell_signals'].append(('BB', f'–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã ({bb_percent:.2f})', 0.6))
            
            # üìà EMA –¢–†–ï–ù–î –ê–ù–ê–õ–ò–ó
            current_price = indicators.get('current_price', 0)
            ema_9 = indicators.get('ema_9', 0)
            ema_21 = indicators.get('ema_21', 0)
            ema_50 = indicators.get('ema_50', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            if (ema_9 > ema_21 > ema_50 and current_price > ema_9):
                signals['buy_signals'].append(('EMA', '–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.7))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            elif (ema_9 < ema_21 < ema_50 and current_price < ema_9):
                signals['sell_signals'].append(('EMA', '–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.7))
            
            # üí™ ADX –°–ò–õ–ê –¢–†–ï–ù–î–ê
            adx = indicators.get('adx', 0)
            adx_pos = indicators.get('adx_pos', 0)
            adx_neg = indicators.get('adx_neg', 0)
            
            if adx > self.ADX_TREND_THRESHOLD:
                if adx_pos > adx_neg:
                    signals['buy_signals'].append(('ADX', f'–°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ({adx:.1f})', 0.6))
                else:
                    signals['sell_signals'].append(('ADX', f'–°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ ({adx:.1f})', 0.6))
            
            # üìä VOLUME –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
            volume_ratio = indicators.get('volume_ratio', 1.0)
            if volume_ratio > self.VOLUME_RATIO_THRESHOLD:
                signals['neutral_signals'].append(('Volume', f'–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)', 0.5))
            
            # üìà STOCHASTIC –°–ò–ì–ù–ê–õ–´
            stoch_k = indicators.get('stoch_k', 50)
            stoch_d = indicators.get('stoch_d', 50)
            
            if stoch_k < self.STOCH_OVERSOLD and stoch_k > stoch_d:
                signals['buy_signals'].append(('Stochastic', f'–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å + –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ({stoch_k:.1f})', 0.6))
            elif stoch_k > self.STOCH_OVERBOUGHT and stoch_k < stoch_d:
                signals['sell_signals'].append(('Stochastic', f'–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å + –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ({stoch_k:.1f})', 0.6))
            
            logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: BUY={len(signals['buy_signals'])}, SELL={len(signals['sell_signals'])}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        return signals
    
    def _make_decision(self, signals: Dict[str, List], indicators: Dict[str, Any], 
                      df: pd.DataFrame, symbol: str) -> TradingSignal:
        """
        üéØ –ü–†–ò–ù–Ø–¢–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        
        try:
            buy_signals = signals.get('buy_signals', [])
            sell_signals = signals.get('sell_signals', [])
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if not buy_signals and not sell_signals:
                return TradingSignal('WAIT', 0, 0, reason='ü§∑ –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤', indicators=indicators)
            
            # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            buy_score = sum(signal[2] for signal in buy_signals)
            sell_score = sum(signal[2] for signal in sell_signals)
            buy_count = len(buy_signals)
            sell_count = len(sell_signals)
            
            current_price = indicators.get('current_price', 0)
            if current_price <= 0:
                return TradingSignal('WAIT', 0, 0, reason='‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞', indicators=indicators)
            
            atr = indicators.get('atr', current_price * 0.02)
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò: –ò–∑–±–µ–≥–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            bb_width = indicators.get('bb_width', 0)
            if bb_width < self.MIN_VOLATILITY_THRESHOLD:
                return TradingSignal('WAIT', 0, 0, 
                                   reason=f'üìä –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({bb_width:.3f})', 
                                   indicators=indicators)
            
            logger.debug(f"üìä –°—á–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: BUY={buy_score:.2f}({buy_count}), SELL={sell_score:.2f}({sell_count})")
            
            # üîç –õ–û–ì–ò–ö–ê –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–Ø
            
            # BUY –°–ò–ì–ù–ê–õ
            if (buy_count >= self.min_indicators_confirm and 
                buy_score > sell_score and 
                buy_score >= self.min_confidence):
                
                return self._create_buy_signal(current_price, atr, buy_score, buy_count, 
                                             buy_signals, indicators)
            
            # SELL –°–ò–ì–ù–ê–õ
            elif (sell_count >= self.min_indicators_confirm and 
                  sell_score > buy_score and 
                  sell_score >= self.min_confidence):
                
                return self._create_sell_signal(current_price, atr, sell_score, sell_count, 
                                              sell_signals, indicators)
            
            # WAIT –°–ò–ì–ù–ê–õ
            else:
                reason_parts = []
                
                if buy_count < self.min_indicators_confirm and sell_count < self.min_indicators_confirm:
                    reason_parts.append(f"–ú–∞–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (BUY:{buy_count}, SELL:{sell_count})")
                
                if max(buy_score, sell_score) < self.min_confidence:
                    reason_parts.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({max(buy_score, sell_score):.2f})")
                
                if abs(buy_score - sell_score) < 0.3:
                    reason_parts.append("–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
                
                reason = " | ".join(reason_parts) if reason_parts else "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
                
                return TradingSignal('WAIT', 0, current_price, reason=f'‚è≥ {reason}', indicators=indicators)
        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return TradingSignal('WAIT', 0, 0, reason=f'üí• –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {str(e)[:100]}')
    
    def _create_buy_signal(self, current_price: float, atr: float, buy_score: float, 
                          buy_count: int, buy_signals: List, indicators: Dict) -> TradingSignal:
        """üü¢ –°–û–ó–î–ê–ù–ò–ï BUY –°–ò–ì–ù–ê–õ–ê"""
        try:
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
            stop_loss = self.calculate_stop_loss(current_price, 'BUY', atr)
            take_profit = self.calculate_take_profit(current_price, 'BUY', atr)
            risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –º–∞–∫—Å–∏–º—É–º 0.95)
            max_possible_score = buy_count * 0.8  # –°—Ä–µ–¥–Ω–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Å–∏–≥–Ω–∞–ª–∞
            confidence = min(0.95, buy_score / max_possible_score) if max_possible_score > 0 else 0.5
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã (—Ç–æ–ø-3 —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö)
            top_signals = sorted(buy_signals, key=lambda x: x[2], reverse=True)[:3]
            reasons = [f"{sig[0]}: {sig[1]}" for sig in top_signals]
            reason = " | ".join(reasons)
            
            return TradingSignal(
                action='BUY',
                confidence=confidence,
                price=current_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                reason=f'üü¢ {reason}',
                risk_reward_ratio=risk_reward,
                indicators=indicators
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BUY —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return TradingSignal('WAIT', 0, current_price, reason='‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BUY —Å–∏–≥–Ω–∞–ª–∞')
    
    def _create_sell_signal(self, current_price: float, atr: float, sell_score: float, 
                           sell_count: int, sell_signals: List, indicators: Dict) -> TradingSignal:
        """üî¥ –°–û–ó–î–ê–ù–ò–ï SELL –°–ò–ì–ù–ê–õ–ê"""
        try:
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
            stop_loss = self.calculate_stop_loss(current_price, 'SELL', atr)
            take_profit = self.calculate_take_profit(current_price, 'SELL', atr)
            risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
            
            # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            max_possible_score = sell_count * 0.8
            confidence = min(0.95, sell_score / max_possible_score) if max_possible_score > 0 else 0.5
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã (—Ç–æ–ø-3 —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö)
            top_signals = sorted(sell_signals, key=lambda x: x[2], reverse=True)[:3]
            reasons = [f"{sig[0]}: {sig[1]}" for sig in top_signals]
            reason = " | ".join(reasons)
            
            return TradingSignal(
                action='SELL',
                confidence=confidence,
                price=current_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                reason=f'üî¥ {reason}',
                risk_reward_ratio=risk_reward,
                indicators=indicators
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SELL —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return TradingSignal('WAIT', 0, current_price, reason='‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SELL —Å–∏–≥–Ω–∞–ª–∞')