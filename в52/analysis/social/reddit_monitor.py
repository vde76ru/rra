"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Reddit –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/analysis/social/reddit_monitor.py
"""
import os
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Set
import re
from collections import defaultdict, deque
import praw
import prawcore
import numpy as np

from ...core.database import SessionLocal
from ...logging.smart_logger import SmartLogger
from ..news.nlp_analyzer import nlp_analyzer


class RedditMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç Reddit –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    """
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    KEY_SUBREDDITS = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã
        'cryptocurrency': {'weight': 1.0, 'category': 'general'},
        'bitcoin': {'weight': 0.9, 'category': 'bitcoin'},
        'ethereum': {'weight': 0.9, 'category': 'ethereum'},
        'altcoin': {'weight': 0.8, 'category': 'altcoins'},
        'cryptomarkets': {'weight': 0.9, 'category': 'trading'},
        'cryptocurrencytrading': {'weight': 0.8, 'category': 'trading'},
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        'cryptomoonshots': {'weight': 0.5, 'category': 'speculation'},
        'satoshistreetbets': {'weight': 0.6, 'category': 'speculation'},
        'wallstreetbetscrypto': {'weight': 0.6, 'category': 'speculation'},
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        'cryptotechnicalanalysis': {'weight': 0.8, 'category': 'technical'},
        'bitcoinmarkets': {'weight': 0.8, 'category': 'technical'},
        
        # DeFi –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        'defi': {'weight': 0.7, 'category': 'defi'},
        'nft': {'weight': 0.6, 'category': 'nft'},
        
        # –ü—Ä–æ–µ–∫—Ç—ã
        'cardano': {'weight': 0.7, 'category': 'project'},
        'solana': {'weight': 0.7, 'category': 'project'},
        'binance': {'weight': 0.7, 'category': 'project'},
        'dogecoin': {'weight': 0.6, 'category': 'project'},
    }
    
    # –§–ª–µ–π—Ä—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å
    IMPORTANT_FLAIRS = {
        'news': 1.2,
        'discussion': 1.0,
        'technical analysis': 1.3,
        'analysis': 1.2,
        'warning': 1.5,
        'scam alert': 1.5,
        'due diligence': 1.3,
        'dd': 1.3
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è pump & dump
    PUMP_DUMP_PATTERNS = [
        r'to the moon',
        r'moon\s*(?:ing|shot|bound)',
        r'(?:100|1000)x',
        r'get in (?:now|early|before)',
        r'don\'t miss (?:out|this)',
        r'next (?:bitcoin|ethereum|100x)',
        r'guaranteed (?:profit|gains|return)',
        r'(?:buy|get) now or regret',
        r'pumping (?:now|soon|hard)'
    ]
    
    def __init__(self):
        self.logger = SmartLogger("RedditMonitor")
        
        # Reddit API credentials
        self.client_id = os.getenv('REDDIT_CLIENT_ID')
        self.client_secret = os.getenv('REDDIT_CLIENT_SECRET')
        self.user_agent = os.getenv('REDDIT_USER_AGENT', 'CryptoBot/1.0')
        
        # Reddit –∫–ª–∏–µ–Ω—Ç
        self.reddit = None
        
        # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        self.processed_posts: Set[str] = set()
        self.processed_comments: Set[str] = set()
        self.post_cache = deque(maxlen=500)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = defaultdict(int)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_reddit()
    
    def _init_reddit(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reddit –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.client_id or not self.client_secret:
            self.logger.warning(
                "Reddit credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ REDDIT_CLIENT_ID –∏ REDDIT_CLIENT_SECRET",
                category='social'
            )
            return
        
        try:
            self.reddit = praw.Reddit(
                client_id=self.client_id,
                client_secret=self.client_secret,
                user_agent=self.user_agent
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.reddit.user.me()
            
            self.logger.info(
                "Reddit –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                category='social'
            )
            
        except prawcore.exceptions.ResponseException:
            # –†–µ–∂–∏–º read-only (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            self.reddit = praw.Reddit(
                client_id=self.client_id,
                client_secret=self.client_secret,
                user_agent=self.user_agent
            )
            self.logger.info(
                "Reddit –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ read-only",
                category='social'
            )
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Reddit: {e}",
                category='social'
            )
    
    def extract_tickers(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        tickers = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
        patterns = [
            r'\$([A-Z]{2,10})\b',  # $BTC
            r'\b([A-Z]{2,10})\b(?:\s*(?:coin|token|crypto))',  # BTC coin
            r'(?:buy|sell|long|short)\s+([A-Z]{2,10})\b',  # buy BTC
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if 2 <= len(match) <= 5 and match not in tickers:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞
                    if match not in ['THE', 'AND', 'FOR', 'NOT', 'BUT', 'CAN', 'WILL']:
                        tickers.append(match)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        known_cryptos = {
            'bitcoin': 'BTC', 'ethereum': 'ETH', 'binance': 'BNB',
            'cardano': 'ADA', 'solana': 'SOL', 'polygon': 'MATIC',
            'dogecoin': 'DOGE', 'shiba': 'SHIB', 'ripple': 'XRP'
        }
        
        text_lower = text.lower()
        for name, ticker in known_cryptos.items():
            if name in text_lower and ticker not in tickers:
                tickers.append(ticker)
        
        return tickers
    
    def detect_pump_dump(self, text: str) -> float:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å pump & dump —Å—Ö–µ–º—ã
        
        Returns:
            –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
        """
        text_lower = text.lower()
        score = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in self.PUMP_DUMP_PATTERNS:
            if re.search(pattern, text_lower):
                score += 0.15
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if text.count('!') > 3:
            score += 0.1
        if text.count('üöÄ') > 2:
            score += 0.1
        if 'not financial advice' in text_lower:
            score += 0.05
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
        emoji_pattern = r'[üöÄüåôüíéüôåüí∞üí∏üìàüìäüî•üéØüíØ]'
        emoji_count = len(re.findall(emoji_pattern, text))
        if emoji_count > 5:
            score += 0.1
        
        return min(score, 1.0)
    
    def calculate_post_quality(self, post_data: Dict[str, Any]) -> float:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞
        
        Returns:
            –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç 0 –¥–æ 10
        """
        score = 5.0  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –§–∞–∫—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        text_length = len(post_data.get('text', ''))
        upvote_ratio = post_data.get('upvote_ratio', 0.5)
        score_value = post_data.get('score', 0)
        num_comments = post_data.get('num_comments', 0)
        
        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        if text_length > 500:
            score += 1.0
        elif text_length < 100:
            score -= 1.0
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ upvotes
        if upvote_ratio > 0.9:
            score += 2.0
        elif upvote_ratio > 0.8:
            score += 1.0
        elif upvote_ratio < 0.5:
            score -= 2.0
        
        # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ upvotes
        if score_value > 1000:
            score += 2.0
        elif score_value > 100:
            score += 1.0
        elif score_value < 0:
            score -= 2.0
        
        # –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        if num_comments > 100:
            score += 1.0
        elif num_comments > 20:
            score += 0.5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ pump & dump
        pump_dump_prob = self.detect_pump_dump(post_data.get('text', ''))
        if pump_dump_prob > 0.5:
            score -= 3.0
        
        # –£—á–µ—Ç —Ñ–ª–µ–π—Ä–∞
        flair = post_data.get('flair', '').lower()
        for important_flair, multiplier in self.IMPORTANT_FLAIRS.items():
            if important_flair in flair:
                score *= multiplier
                break
        
        return max(0.0, min(score, 10.0))
    
    async def analyze_post(self, post) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Reddit –ø–æ—Å—Ç
        
        Args:
            post: PRAW post –æ–±—ä–µ–∫—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ
            if post.id in self.processed_posts:
                return None
            
            self.processed_posts.add(post.id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = f"{post.title}\n{post.selftext}" if post.selftext else post.title
            
            # NLP –∞–Ω–∞–ª–∏–∑
            nlp_result = await nlp_analyzer.analyze_text(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã
            tickers = self.extract_tickers(text)
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = {
                'id': post.id,
                'title': post.title,
                'text': text,
                'author': str(post.author) if post.author else '[deleted]',
                'subreddit': str(post.subreddit),
                'score': post.score,
                'upvote_ratio': post.upvote_ratio,
                'num_comments': post.num_comments,
                'flair': post.link_flair_text or '',
                'created_utc': datetime.fromtimestamp(post.created_utc),
                'url': f"https://reddit.com{post.permalink}"
            }
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = self.calculate_post_quality(post_data)
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ pump & dump
            pump_dump_score = self.detect_pump_dump(text)
            
            # –í–µ—Å —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞
            subreddit_weight = self.KEY_SUBREDDITS.get(
                post.subreddit.display_name.lower(), 
                {'weight': 0.5}
            )['weight']
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è
            influence_score = quality_score * subreddit_weight
            
            result = {
                'post_id': post.id,
                'type': 'post',
                'subreddit': post.subreddit.display_name,
                'author': post_data['author'],
                'title': post.title,
                'text': text[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                'url': post_data['url'],
                'sentiment': nlp_result['sentiment'],
                'keywords': nlp_result['keywords'],
                'mentioned_cryptos': tickers,
                'quality_score': round(quality_score, 2),
                'influence_score': round(influence_score, 2),
                'pump_dump_probability': round(pump_dump_score, 2),
                'metrics': {
                    'score': post.score,
                    'upvote_ratio': post.upvote_ratio,
                    'comments': post.num_comments
                },
                'created_at': post_data['created_utc'],
                'analyzed_at': datetime.utcnow()
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
            result['signal_type'] = self._determine_signal(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['posts_analyzed'] += 1
            self.stats[f'signal_{result["signal_type"]}'] += 1
            
            # –ö—ç—à–∏—Ä—É–µ–º
            self.post_cache.append(result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã
            if influence_score > 7:
                self.logger.info(
                    f"–í–∞–∂–Ω—ã–π –ø–æ—Å—Ç –≤ r/{post.subreddit}: {post.title[:50]}...",
                    category='social',
                    influence=influence_score,
                    cryptos=tickers
                )
            
            return result
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞: {e}",
                category='social'
            )
            return None
    
    async def analyze_comment(self, comment) -> Optional[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Reddit"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ
            if comment.id in self.processed_comments:
                return None
            
            self.processed_comments.add(comment.id)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if len(comment.body) < 20:
                return None
            
            # NLP –∞–Ω–∞–ª–∏–∑
            nlp_result = await nlp_analyzer.analyze_text(comment.body)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã
            tickers = self.extract_tickers(comment.body)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫—Ä–∏–ø—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not tickers and not nlp_result.get('detected_cryptos'):
                return None
            
            result = {
                'comment_id': comment.id,
                'type': 'comment',
                'subreddit': str(comment.subreddit),
                'author': str(comment.author) if comment.author else '[deleted]',
                'text': comment.body[:500],
                'sentiment': nlp_result['sentiment'],
                'mentioned_cryptos': tickers,
                'score': comment.score,
                'created_at': datetime.fromtimestamp(comment.created_utc),
                'analyzed_at': datetime.utcnow()
            }
            
            return result
            
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", category='social')
            return None
    
    def _determine_signal(self, analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        sentiment = analysis['sentiment']
        pump_dump = analysis['pump_dump_probability']
        quality = analysis['quality_score']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º pump & dump
        if pump_dump > 0.6:
            return 'pump_dump_warning'
        
        # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ = –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if quality < 3:
            return 'low_quality'
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ sentiment –∏ –∫–∞—á–µ—Å—Ç–≤–∞
        sentiment_score = sentiment.get('compound', 0)
        
        if sentiment_score > 0.5 and quality > 6:
            return 'buy'
        elif sentiment_score < -0.5 and quality > 6:
            return 'sell'
        elif quality > 7:
            return 'high_quality_neutral'
        
        return 'neutral'
    
    async def monitor_subreddit(self, 
                              subreddit_name: str,
                              sort_by: str = 'hot',
                              limit: int = 25) -> List[Dict[str, Any]]:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–±—Ä–µ–¥–¥–∏—Ç
        
        Args:
            subreddit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞
            sort_by: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (hot, new, top, rising)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not self.reddit:
            self.logger.error("Reddit –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", category='social')
            return []
        
        try:
            subreddit = self.reddit.subreddit(subreddit_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
            if sort_by == 'hot':
                posts = subreddit.hot(limit=limit)
            elif sort_by == 'new':
                posts = subreddit.new(limit=limit)
            elif sort_by == 'top':
                posts = subreddit.top(limit=limit, time_filter='day')
            elif sort_by == 'rising':
                posts = subreddit.rising(limit=limit)
            else:
                posts = subreddit.hot(limit=limit)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã
            results = []
            for post in posts:
                analysis = await self.analyze_post(post)
                if analysis:
                    results.append(analysis)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                if post.score > 100 and post.num_comments > 20:
                    post.comments.replace_more(limit=0)
                    for comment in post.comments[:10]:
                        comment_analysis = await self.analyze_comment(comment)
                        if comment_analysis:
                            results.append(comment_analysis)
            
            self.logger.info(
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ r/{subreddit_name}",
                category='social'
            )
            
            return results
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ r/{subreddit_name}: {e}",
                category='social'
            )
            return []
    
    async def monitor_all_subreddits(self) -> List[Dict[str, Any]]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–∞–±—Ä–µ–¥–¥–∏—Ç—ã"""
        all_results = []
        
        for subreddit_name in self.KEY_SUBREDDITS:
            try:
                # –î–ª—è —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤ —Å–º–æ—Ç—Ä–∏–º new
                if self.KEY_SUBREDDITS[subreddit_name]['category'] == 'speculation':
                    results = await self.monitor_subreddit(subreddit_name, 'new', 15)
                else:
                    results = await self.monitor_subreddit(subreddit_name, 'hot', 20)
                
                all_results.extend(results)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ r/{subreddit_name}: {e}",
                    category='social'
                )
        
        return all_results
    
    async def search_posts(self, 
                         query: str,
                         subreddit: str = 'all',
                         time_filter: str = 'day',
                         limit: int = 100) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            subreddit: –°–∞–±—Ä–µ–¥–¥–∏—Ç –∏–ª–∏ 'all'
            time_filter: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (hour, day, week, month, year, all)
            limit: –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not self.reddit:
            return []
        
        try:
            if subreddit == 'all':
                search_sub = self.reddit.subreddit('all')
            else:
                search_sub = self.reddit.subreddit(subreddit)
            
            # –ü–æ–∏—Å–∫
            posts = search_sub.search(query, time_filter=time_filter, limit=limit)
            
            # –ê–Ω–∞–ª–∏–∑
            results = []
            for post in posts:
                analysis = await self.analyze_post(post)
                if analysis:
                    results.append(analysis)
            
            return results
            
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}",
                category='social'
            )
            return []
    
    async def get_trending_cryptos(self) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Reddit"""
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≥–æ—Ä—è—á–∏–µ –ø–æ—Å—Ç—ã
        results = await self.monitor_all_subreddits()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        crypto_mentions = defaultdict(int)
        crypto_sentiment = defaultdict(list)
        
        for result in results:
            cryptos = result.get('mentioned_cryptos', [])
            sentiment_score = result['sentiment']['compound']
            influence = result.get('influence_score', 1)
            
            for crypto in cryptos:
                crypto_mentions[crypto] += influence
                crypto_sentiment[crypto].append(sentiment_score)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        trending = []
        for crypto, mentions in crypto_mentions.items():
            if mentions > 1:  # –ú–∏–Ω–∏–º—É–º 2 —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                sentiments = crypto_sentiment[crypto]
                avg_sentiment = np.mean(sentiments) if sentiments else 0
                
                trending.append({
                    'symbol': crypto,
                    'mentions_score': round(mentions, 2),
                    'avg_sentiment': round(avg_sentiment, 3),
                    'posts_count': len([r for r in results if crypto in r.get('mentioned_cryptos', [])])
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        trending.sort(key=lambda x: x['mentions_score'], reverse=True)
        
        return {
            'trending_cryptos': trending[:10],
            'total_posts_analyzed': len(results),
            'timestamp': datetime.utcnow()
        }
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        return {
            'posts_analyzed': self.stats['posts_analyzed'],
            'signals': {
                'buy': self.stats.get('signal_buy', 0),
                'sell': self.stats.get('signal_sell', 0),
                'neutral': self.stats.get('signal_neutral', 0),
                'pump_dump_warning': self.stats.get('signal_pump_dump_warning', 0),
                'low_quality': self.stats.get('signal_low_quality', 0)
            },
            'cache_size': len(self.post_cache),
            'processed_posts': len(self.processed_posts),
            'processed_comments': len(self.processed_comments)
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
reddit_monitor = RedditMonitor()