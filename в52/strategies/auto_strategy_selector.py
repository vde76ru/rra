"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
–ü—É—Ç—å: src/strategies/auto_strategy_selector.py

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç
–æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.
"""
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import ta
import logging
from dataclasses import dataclass
from collections import defaultdict
import pickle
import json
from pathlib import Path

from ..core.database import SessionLocal
from ..core.models import Trade, Signal, TradeStatus
from ..core.clean_logging import get_clean_logger
from ..analysis.market_analyzer import MarketAnalyzer

logger = get_clean_logger(__name__)

@dataclass
class MarketCondition:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
    trend: str  # 'UPTREND', 'DOWNTREND', 'SIDEWAYS'
    volatility: str  # 'LOW', 'MEDIUM', 'HIGH'
    volume: str  # 'LOW', 'NORMAL', 'HIGH'
    momentum: float  # -100 to 100
    support_resistance_ratio: float  # –ë–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—è–º
    market_phase: str  # 'ACCUMULATION', 'MARKUP', 'DISTRIBUTION', 'MARKDOWN'
    confidence: float  # 0-1

@dataclass
class StrategyPerformance:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"""
    strategy_name: str
    win_rate: float
    average_profit: float
    profit_factor: float
    max_drawdown: float
    sharpe_ratio: float
    trades_count: int
    last_updated: datetime

class AutoStrategySelector:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    2. –ò–∑—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    3. –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞
    4. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    """
    
    def __init__(self):
        self.analyzer = MarketAnalyzer()
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.available_strategies = [
            'momentum',           # –î–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
            'multi_indicator',    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
            'scalping',          # –î–ª—è –±–æ–∫–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            'safe_multi_indicator',  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            'conservative'       # –î–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        ]
        
        # –ö—ç—à –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.performance_cache: Dict[str, Dict[str, StrategyPerformance]] = defaultdict(dict)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        self.model_path = Path("models/strategy_selector.pkl")
        self.model_path.parent.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        self.ml_model = self._load_model()
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.selection_history = []
        
        logger.info("‚úÖ AutoStrategySelector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def select_best_strategy(self, symbol: str, timeframe: str = '5m') -> Tuple[str, float]:
        """
        –í—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
        Returns:
            Tuple[—Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å]
        """
        try:
            logger.info(f"üéØ –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è {symbol}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            market_data = await self.analyzer.analyze_symbol(symbol)
            if not market_data:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
                return 'safe_multi_indicator', 0.5
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_condition = self._analyze_market_conditions(market_data)
            logger.info(f"üìä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è {symbol}: {market_condition.trend}, "
                       f"–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_condition.volatility}, "
                       f"—Ñ–∞–∑–∞: {market_condition.market_phase}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_data = self._get_historical_performance(symbol, market_condition)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.ml_model:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML –º–æ–¥–µ–ª—å
                best_strategy, confidence = self._ml_select_strategy(
                    symbol, market_condition, performance_data
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–∞
                best_strategy, confidence = self._rule_based_selection(
                    market_condition, performance_data
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            self._save_selection(symbol, market_condition, best_strategy)
            
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è '{best_strategy}' –¥–ª—è {symbol} "
                       f"—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.1%}")
            
            return best_strategy, confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {symbol}: {e}")
            return 'safe_multi_indicator', 0.3
    
    def _analyze_market_conditions(self, market_data: Dict) -> MarketCondition:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            df = market_data['df']
            current_price = market_data['current_price']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            trend = market_data['trend']['direction']
            trend_strength = market_data['trend']['strength']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = market_data['volatility']
            if volatility['daily'] < 0.01:  # < 1%
                volatility_level = 'LOW'
            elif volatility['daily'] < 0.03:  # < 3%
                volatility_level = 'MEDIUM'
            else:
                volatility_level = 'HIGH'
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_analysis = market_data['volume_analysis']
            if volume_analysis['ratio'] < 0.7:
                volume_level = 'LOW'
            elif volume_analysis['ratio'] < 1.3:
                volume_level = 'NORMAL'
            else:
                volume_level = 'HIGH'
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º momentum
            momentum = self._calculate_momentum(df)
            
            # –ë–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—è–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            sr_ratio = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if market_data['support'] and market_data['resistance']:
                price_range = market_data['resistance'] - market_data['support']
                if price_range > 0:
                    sr_ratio = (current_price - market_data['support']) / price_range
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ñ–∞–∑—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –í–∞–π–∫–æ—Ñ—Ñ–∞)
            market_phase = self._determine_market_phase(
                df, trend, volume_analysis, volatility
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self._calculate_condition_confidence(
                trend_strength, volatility, volume_analysis
            )
            
            return MarketCondition(
                trend=trend,
                volatility=volatility_level,
                volume=volume_level,
                momentum=momentum,
                support_resistance_ratio=sr_ratio,
                market_phase=market_phase,
                confidence=confidence
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return MarketCondition(
                trend='SIDEWAYS',
                volatility='MEDIUM',
                volume='NORMAL',
                momentum=0,
                support_resistance_ratio=0.5,
                market_phase='UNKNOWN',
                confidence=0.3
            )
    
    def _calculate_momentum(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ momentum (-100 to 100)"""
        try:
            # RSI momentum
            rsi = ta.momentum.rsi(df['close'], window=14).iloc[-1]
            rsi_momentum = (rsi - 50) * 2  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫ -100...100
            
            # Price momentum
            price_change_5 = ((df['close'].iloc[-1] - df['close'].iloc[-5]) / 
                            df['close'].iloc[-5] * 100)
            price_change_10 = ((df['close'].iloc[-1] - df['close'].iloc[-10]) / 
                             df['close'].iloc[-10] * 100)
            
            # MACD momentum
            macd = ta.trend.MACD(df['close'])
            macd_momentum = macd.macd_diff().iloc[-1] * 100  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π momentum
            momentum = (rsi_momentum * 0.3 + 
                       price_change_5 * 0.2 + 
                       price_change_10 * 0.2 + 
                       np.clip(macd_momentum, -100, 100) * 0.3)
            
            return np.clip(momentum, -100, 100)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ momentum: {e}")
            return 0
    
    def _determine_market_phase(self, df: pd.DataFrame, trend: str, 
                               volume: Dict, volatility: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É –í–∞–π–∫–æ—Ñ—Ñ–∞"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã
            if trend == 'SIDEWAYS' and volume['trend'] == 'DECREASING':
                return 'ACCUMULATION'  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
            elif trend == 'UPTREND' and volume['trend'] == 'INCREASING':
                return 'MARKUP'  # –†–æ—Å—Ç
            elif trend == 'SIDEWAYS' and volume['trend'] == 'INCREASING':
                return 'DISTRIBUTION'  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            elif trend == 'DOWNTREND':
                return 'MARKDOWN'  # –°–Ω–∏–∂–µ–Ω–∏–µ
            else:
                return 'UNKNOWN'
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞: {e}")
            return 'UNKNOWN'
    
    def _calculate_condition_confidence(self, trend_strength: float, 
                                      volatility: Dict, volume: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π"""
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–≤—ã—à–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if trend_strength > 5:
            confidence += 0.2
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if 0.5 < volatility['daily'] < 3:
            confidence += 0.15
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
        if volume['price_correlation'] > 0.5:
            confidence += 0.15
        
        return min(confidence, 1.0)
    
    def _get_historical_performance(self, symbol: str, 
                                  condition: MarketCondition) -> Dict[str, StrategyPerformance]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{symbol}_{condition.trend}_{condition.volatility}"
        if cache_key in self.performance_cache:
            cached_data = self.performance_cache[cache_key]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å)
            if any(p.last_updated > datetime.utcnow() - timedelta(hours=1) 
                   for p in cached_data.values()):
                return cached_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        performance_data = self._load_performance_from_db(symbol, condition)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.performance_cache[cache_key] = performance_data
        
        return performance_data
    
    def _load_performance_from_db(self, symbol: str, 
                                condition: MarketCondition) -> Dict[str, StrategyPerformance]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î"""
        db = SessionLocal()
        performance_data = {}
        
        try:
            # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            for strategy in self.available_strategies:
                # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                trades = db.query(Trade).filter(
                    Trade.symbol == symbol,
                    Trade.strategy == strategy,
                    Trade.status == TradeStatus.CLOSED,
                    Trade.created_at >= datetime.utcnow() - timedelta(days=30)
                ).all()
                
                if len(trades) < 5:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    performance_data[strategy] = StrategyPerformance(
                        strategy_name=strategy,
                        win_rate=0.5,
                        average_profit=0,
                        profit_factor=1.0,
                        max_drawdown=0,
                        sharpe_ratio=0,
                        trades_count=len(trades),
                        last_updated=datetime.utcnow()
                    )
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                profitable_trades = [t for t in trades if t.profit and t.profit > 0]
                win_rate = len(profitable_trades) / len(trades)
                
                profits = [t.profit for t in trades if t.profit is not None]
                average_profit = np.mean(profits) if profits else 0
                
                # Profit factor
                gross_profit = sum(p for p in profits if p > 0)
                gross_loss = abs(sum(p for p in profits if p < 0))
                profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
                
                # Max drawdown
                cumulative_profits = np.cumsum(profits)
                running_max = np.maximum.accumulate(cumulative_profits)
                drawdown = (running_max - cumulative_profits) / running_max
                max_drawdown = np.max(drawdown) if len(drawdown) > 0 else 0
                
                # Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                if len(profits) > 1:
                    returns = np.array(profits) / 1000  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0
                else:
                    sharpe_ratio = 0
                
                performance_data[strategy] = StrategyPerformance(
                    strategy_name=strategy,
                    win_rate=win_rate,
                    average_profit=average_profit,
                    profit_factor=min(profit_factor, 10),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                    max_drawdown=max_drawdown,
                    sharpe_ratio=sharpe_ratio,
                    trades_count=len(trades),
                    last_updated=datetime.utcnow()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        finally:
            db.close()
        
        return performance_data
    
    def _rule_based_selection(self, condition: MarketCondition, 
                            performance: Dict[str, StrategyPerformance]) -> Tuple[str, float]:
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª"""
        scores = {}
        
        for strategy in self.available_strategies:
            score = 0
            
            # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if strategy in performance:
                perf = performance[strategy]
                score += perf.win_rate * 30  # Win rate –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ
                score += min(perf.profit_factor, 3) * 20  # Profit factor
                score += (1 - perf.max_drawdown) * 15  # –ú–µ–Ω—å—à–µ drawdown - –ª—É—á—à–µ
                score += min(perf.sharpe_ratio, 2) * 10  # Sharpe ratio
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö - –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è)
                confidence_factor = min(perf.trades_count / 20, 1.0)
                score *= confidence_factor
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            if strategy == 'momentum':
                # Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ö–æ—Ä–æ—à–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
                if condition.trend in ['UPTREND', 'DOWNTREND']:
                    score *= 1.5
                if abs(condition.momentum) > 50:
                    score *= 1.3
                if condition.volatility == 'HIGH':
                    score *= 0.7  # –ù–µ –æ—á–µ–Ω—å –¥–ª—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                    
            elif strategy == 'scalping':
                # –°–∫–∞–ª—å–ø–∏–Ω–≥ –¥–ª—è –±–æ–∫–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                if condition.trend == 'SIDEWAYS':
                    score *= 1.5
                if condition.volatility == 'LOW':
                    score *= 1.4
                if condition.volume == 'HIGH':
                    score *= 1.2
                    
            elif strategy == 'multi_indicator':
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                score *= 1.1  # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å
                if condition.confidence > 0.7:
                    score *= 1.2
                    
            elif strategy == 'safe_multi_indicator':
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
                if condition.confidence < 0.5:
                    score *= 1.5
                if condition.volatility == 'HIGH':
                    score *= 1.3
                    
            elif strategy == 'conservative':
                # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞
                if condition.market_phase == 'DISTRIBUTION':
                    score *= 1.4
                if condition.volatility == 'HIGH':
                    score *= 1.2
            
            scores[strategy] = score
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        best_strategy = max(scores, key=scores.get)
        best_score = scores[best_strategy]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)
        max_possible_score = 100
        confidence = min(best_score / max_possible_score, 1.0)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = max(confidence, 0.3)
        
        return best_strategy, confidence
    
    def _ml_select_strategy(self, symbol: str, condition: MarketCondition,
                          performance: Dict[str, StrategyPerformance]) -> Tuple[str, float]:
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º features
            features = self._prepare_ml_features(symbol, condition, performance)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.ml_model.predict([features])[0]
            confidence = self.ml_model.predict_proba([features]).max()
            
            # –ú–∞–ø–∏–º –∏–Ω–¥–µ–∫—Å –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy = self.available_strategies[prediction]
            
            return strategy, confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            # Fallback –∫ rule-based
            return self._rule_based_selection(condition, performance)
    
    def _prepare_ml_features(self, symbol: str, condition: MarketCondition,
                           performance: Dict[str, StrategyPerformance]) -> List[float]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ features –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
        features = []
        
        # Market condition features
        features.append(1 if condition.trend == 'UPTREND' else 
                       -1 if condition.trend == 'DOWNTREND' else 0)
        features.append(1 if condition.volatility == 'HIGH' else 
                       0.5 if condition.volatility == 'MEDIUM' else 0)
        features.append(1 if condition.volume == 'HIGH' else 
                       0.5 if condition.volume == 'NORMAL' else 0)
        features.append(condition.momentum / 100)  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π
        features.append(condition.support_resistance_ratio)
        features.append(condition.confidence)
        
        # Performance features –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for strategy in self.available_strategies:
            if strategy in performance:
                perf = performance[strategy]
                features.extend([
                    perf.win_rate,
                    perf.average_profit / 100,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    min(perf.profit_factor, 5) / 5,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    perf.max_drawdown,
                    min(perf.sharpe_ratio, 3) / 3,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    min(perf.trades_count, 50) / 50  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                ])
            else:
                # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                features.extend([0.5, 0, 0.2, 0.1, 0, 0])
        
        return features
    
    def _save_selection(self, symbol: str, condition: MarketCondition, strategy: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        self.selection_history.append({
            'timestamp': datetime.utcnow(),
            'symbol': symbol,
            'condition': condition,
            'selected_strategy': strategy
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.selection_history) > 10000:
            self.selection_history = self.selection_history[-5000:]
    
    def train_ml_model(self):
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üéì –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            X, y = self._prepare_training_data()
            
            if len(X) < 100:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π RandomForest
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.model_selection import train_test_split
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42
            )
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = RandomForestClassifier(
                n_estimators=100,
                max_depth=10,
                random_state=42
            )
            model.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞
            train_score = model.score(X_train, y_train)
            test_score = model.score(X_test, y_test)
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. Train score: {train_score:.2f}, "
                       f"Test score: {test_score:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            self.ml_model = model
            self._save_model()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
    
    def _prepare_training_data(self) -> Tuple[List[List[float]], List[int]]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        X = []
        y = []
        
        db = SessionLocal()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏
            trades = db.query(Trade).filter(
                Trade.status == TradeStatus.CLOSED,
                Trade.created_at >= datetime.utcnow() - timedelta(days=90)
            ).all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –∏ —É—Å–ª–æ–≤–∏—è–º
            for trade in trades:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                features = self._extract_features_from_trade(trade)
                if features:
                    X.append(features)
                    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    strategy_idx = self.available_strategies.index(trade.strategy)
                    y.append(strategy_idx)
            
        finally:
            db.close()
        
        return X, y
    
    def _extract_features_from_trade(self, trade: Trade) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ features –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å–¥–µ–ª–∫–∏"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        # —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏
        return None  # TODO: Implement
    
    def _save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if self.ml_model:
            with open(self.model_path, 'wb') as f:
                pickle.dump(self.ml_model, f)
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.model_path}")
    
    def _load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if self.model_path.exists():
            try:
                with open(self.model_path, 'rb') as f:
                    model = pickle.load(f)
                logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return model
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None
    
    async def analyze_and_select_all_pairs(self, pairs: List[str]) -> Dict[str, Tuple[str, float]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        
        Returns:
            Dict[symbol, (strategy, confidence)]
        """
        results = {}
        
        for symbol in pairs:
            strategy, confidence = await self.select_best_strategy(symbol)
            results[symbol] = (strategy, confidence)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await asyncio.sleep(0.5)
        
        return results

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_strategy_selector = AutoStrategySelector()