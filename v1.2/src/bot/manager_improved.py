# ========================================
# –§–ê–ô–õ: src/bot/manager_improved.py
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BotManager —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
# ========================================

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
–§–∞–π–ª: src/bot/manager_improved.py
"""

import asyncio
import logging
from typing import Dict, Any, Optional, Tuple
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
from ..core.component_system import component_manager, ComponentStatus

logger = logging.getLogger(__name__)

class ImprovedBotManager:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    - Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.status = "stopped"
        self.start_time = None
        self.active_pairs = []
        self.positions = {}
        self.cycles_count = 0
        self.trades_today = 0
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._register_components()
        
        logger.info("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_components(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        component_manager.register_component(
            name="database",
            initializer=self._init_database,
            dependencies=[],
            is_critical=True,
            max_retries=3
        )
        
        # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        component_manager.register_component(
            name="config",
            initializer=self._init_config,
            dependencies=[],
            is_critical=True,
            max_retries=1
        )
        
        # 3. Exchange –∫–ª–∏–µ–Ω—Ç (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="exchange",
            initializer=self._init_exchange,
            dependencies=["config"],
            is_critical=True,
            max_retries=5
        )
        
        # 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="logging",
            initializer=self._init_logging,
            dependencies=["config"],
            is_critical=False,
            max_retries=2
        )
        
        # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="notifications",
            initializer=self._init_notifications,
            dependencies=["config"],
            is_critical=False,
            max_retries=3
        )
        
        # 6. Market Analyzer (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Exchange)
        component_manager.register_component(
            name="market_analyzer",
            initializer=self._init_market_analyzer,
            dependencies=["exchange"],
            is_critical=True,
            max_retries=3
        )
        
        # 7. Risk Manager (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="risk_manager",
            initializer=self._init_risk_manager,
            dependencies=["config"],
            is_critical=True,
            max_retries=2
        )
        
        # 8. Trader (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Exchange –∏ Risk Manager)
        component_manager.register_component(
            name="trader",
            initializer=self._init_trader,
            dependencies=["exchange", "risk_manager"],
            is_critical=True,
            max_retries=3
        )
        
        # 9. Strategy Factory (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="strategy_factory",
            initializer=self._init_strategy_factory,
            dependencies=["config"],
            is_critical=True,
            max_retries=2
        )
        
        # 10. ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ, –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        component_manager.register_component(
            name="ml_components",
            initializer=self._init_ml_components,
            dependencies=["database", "config"],
            is_critical=False,
            max_retries=2
        )
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # =========================================================================
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–†–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
    # =========================================================================
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from ..core.database import SessionLocal
            from sqlalchemy import text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            db = SessionLocal()
            try:
                result = db.execute(text("SELECT 1")).scalar()
                if result != 1:
                    raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return db
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def _init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        try:
            from ..core.config import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not hasattr(config, 'BYBIT_API_KEY') or not config.BYBIT_API_KEY:
                raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            if not hasattr(config, 'BYBIT_API_SECRET') or not config.BYBIT_API_SECRET:
                raise ValueError("Secret –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def _init_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Exchange –∫–ª–∏–µ–Ω—Ç...")
        
        try:
            from ..exchange.client import get_exchange_client
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            exchange = get_exchange_client()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection_test = await exchange.test_connection()
            if not connection_test:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
            
            logger.info("‚úÖ Exchange –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            return exchange
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Exchange: {e}")
            raise
    
    def _init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SmartLogger
            try:
                from ..logging.smart_logger import SmartLogger
                smart_logger = SmartLogger(__name__)
                logger.info("‚úÖ SmartLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return smart_logger
            except ImportError:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
                return logging.getLogger(__name__)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
            return logging.getLogger(__name__)
    
    def _init_notifications(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        try:
            from ..notifications.telegram import telegram_notifier
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            config = component_manager.get_component("config")
            if hasattr(config, 'TELEGRAM_BOT_TOKEN') and config.TELEGRAM_BOT_TOKEN:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã")
                return telegram_notifier
            else:
                logger.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
    
    async def _init_market_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Market Analyzer...")
        
        try:
            from ..analysis.market_analyzer import MarketAnalyzer
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer = MarketAnalyzer()
            
            logger.info("‚úÖ Market Analyzer –≥–æ—Ç–æ–≤")
            return analyzer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Market Analyzer: {e}")
            raise
    
    def _init_risk_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("‚öñÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Risk Manager...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            try:
                from ..bot.risk_manager import RiskManager
                risk_manager = RiskManager()
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return risk_manager
            except ImportError:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                from ..risk.simple_risk_manager import SimpleRiskManager
                risk_manager = SimpleRiskManager()
                logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return risk_manager
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Risk Manager: {e}")
            raise
    
    async def _init_trader(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        logger.info("üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Trader...")
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            exchange = component_manager.get_component("exchange")
            if not exchange:
                raise Exception("Exchange –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: bot.trader
            try:
                from ..bot.trader import Trader
                try:
                    trader = Trader(exchange=exchange)
                    logger.info("‚úÖ Trader –≥–æ—Ç–æ–≤ (bot.trader —Å exchange)")
                    return trader
                except TypeError:
                    trader = Trader()
                    logger.info("‚úÖ Trader –≥–æ—Ç–æ–≤ (bot.trader –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)")
                    return trader
            except ImportError:
                pass
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: trading.trader
            try:
                from ..trading.trader import Trader
                try:
                    trader = Trader(exchange=exchange)
                    logger.info("‚úÖ Trader –≥–æ—Ç–æ–≤ (trading.trader —Å exchange)")
                    return trader
                except TypeError:
                    trader = Trader()
                    logger.info("‚úÖ Trader –≥–æ—Ç–æ–≤ (trading.trader –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)")
                    return trader
            except ImportError:
                pass
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å Trader")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Trader: {e}")
            raise
    
    def _init_strategy_factory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Strategy Factory...")
        
        try:
            from ..strategies import strategy_factory
            
            logger.info("‚úÖ Strategy Factory –≥–æ—Ç–æ–≤–∞")
            return strategy_factory
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Strategy Factory: {e}")
            raise
    
    def _init_ml_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        ml_components = {}
        
        # Strategy Selector (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π)
        try:
            from ..strategies.auto_strategy_selector import auto_strategy_selector
            ml_components['strategy_selector'] = auto_strategy_selector
            logger.info("‚úÖ Strategy Selector –≥–æ—Ç–æ–≤")
        except ImportError:
            logger.info("üì¶ Strategy Selector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        # Feature Engineering (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π)
        try:
            from ..ml.features import FeatureEngineering
            if FeatureEngineering:
                ml_components['feature_engineering'] = FeatureEngineering()
                logger.info("‚úÖ Feature Engineering –≥–æ—Ç–æ–≤")
        except ImportError:
            logger.info("üì¶ Feature Engineering –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        # ML Models (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
        try:
            from ..ml.models import DirectionClassifier, PriceLevelRegressor
            if DirectionClassifier:
                ml_components['classifier'] = DirectionClassifier()
            if PriceLevelRegressor:
                ml_components['regressor'] = PriceLevelRegressor()
            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã")
        except ImportError:
            logger.info("üì¶ ML –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        return ml_components
    
    # =========================================================================
    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===
    # =========================================================================
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            results = await component_manager.initialize_all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            critical_components = ['database', 'config', 'exchange', 'market_analyzer', 'risk_manager', 'trader', 'strategy_factory']
            critical_failed = []
            
            for comp in critical_components:
                if not results.get(comp, False):
                    critical_failed.append(comp)
            
            if critical_failed:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {critical_failed}")
                return False
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_component(self, name: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return component_manager.get_component(name)
    
    def get_system_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
        """
        component_status = component_manager.get_status()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(component_status)
        ready = sum(1 for comp in component_status.values() if comp['status'] == 'ready')
        failed = sum(1 for comp in component_status.values() if comp['status'] == 'failed')
        critical_failed = sum(1 for comp in component_status.values() 
                             if comp['status'] == 'failed' and comp['is_critical'])
        
        return {
            'overall_status': 'healthy' if critical_failed == 0 else 'degraded' if ready > failed else 'unhealthy',
            'components': component_status,
            'statistics': {
                'total_components': total,
                'ready_components': ready,
                'failed_components': failed,
                'critical_failed': critical_failed
            },
            'timestamp': datetime.utcnow().isoformat()
        }
    
    async def restart_component(self, name: str) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        return await component_manager.restart_component(name)
    
    # =========================================================================
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –û–°–ù–û–í–ù–´–ú BOTMANAGER ===
    # =========================================================================
    
    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        required_components = ['exchange', 'trader', 'market_analyzer', 'risk_manager']
        
        for comp_name in required_components:
            if not component_manager.is_ready(comp_name):
                logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {comp_name} –Ω–µ –≥–æ—Ç–æ–≤")
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        trader = self.get_component("trader")
        analyzer = self.get_component("market_analyzer")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        try:
            if hasattr(trader, 'start'):
                if asyncio.iscoroutinefunction(trader.start):
                    await trader.start()
                else:
                    trader.start()
            
            if hasattr(analyzer, 'start'):
                if asyncio.iscoroutinefunction(analyzer.start):
                    await analyzer.start()
                else:
                    analyzer.start()
            
            self.status = "running"
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        
        trader = self.get_component("trader")
        analyzer = self.get_component("market_analyzer")
        
        try:
            if trader and hasattr(trader, 'stop'):
                if asyncio.iscoroutinefunction(trader.stop):
                    await trader.stop()
                else:
                    trader.stop()
            
            if analyzer and hasattr(analyzer, 'stop'):
                if asyncio.iscoroutinefunction(analyzer.stop):
                    await analyzer.stop()
                else:
                    analyzer.stop()
            
            self.status = "stopped"
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            return False
    
    # =========================================================================
    # === GRACEFUL SHUTDOWN –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    # =========================================================================
    
    async def graceful_shutdown(self):
        """Graceful –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        shutdown_tasks = []
        
        # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        trader = self.get_component("trader")
        if trader:
            logger.info("üîí –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
            if hasattr(trader, 'stop'):
                shutdown_tasks.append(self._safe_shutdown_component("trader", trader.stop))
        
        # 2. –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        exchange = self.get_component("exchange")
        if exchange:
            logger.info("üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
            shutdown_tasks.append(self._safe_close_positions(exchange))
        
        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
        shutdown_tasks.append(self._save_final_state())
        
        # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        notifier = self.get_component("notifications")
        if notifier:
            shutdown_tasks.append(self._send_shutdown_notification(notifier))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                asyncio.gather(*shutdown_tasks, return_exceptions=True),
                timeout=30.0
            )
        except asyncio.TimeoutError:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ graceful shutdown")
        
        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _safe_shutdown_component(self, name: str, shutdown_func):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            if asyncio.iscoroutinefunction(shutdown_func):
                await shutdown_func()
            else:
                shutdown_func()
            logger.info(f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {name}: {e}")
    
    async def _safe_close_positions(self, exchange):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if hasattr(exchange, 'get_positions'):
                positions = await exchange.get_positions()
                for position in positions:
                    if float(position.get('size', 0)) != 0:
                        logger.warning(f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {position['symbol']}")
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _save_final_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            from ..core.database import SessionLocal
            from ..core.models import BotState
            
            db = SessionLocal()
            try:
                bot_state = db.query(BotState).first()
                if bot_state:
                    bot_state.is_running = False
                    bot_state.stop_time = datetime.utcnow()
                    db.commit()
                    logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            finally:
                db.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def _send_shutdown_notification(self, notifier):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if hasattr(notifier, 'send_message'):
                if asyncio.iscoroutinefunction(notifier.send_message):
                    await notifier.send_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                else:
                    notifier.send_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# ========================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú BOTMANAGER
# ========================================

def upgrade_existing_bot_manager():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º BotManager
    –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π manager.py
    """
    
    integration_code = """
    # –î–æ–±–∞–≤–∏—Ç—å –≤ BotManager.__init__():
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    self.improved_manager = ImprovedBotManager()
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ BotManager._init_components():
    
    async def _init_components_improved(self):
        '''–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É'''
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        success = await self.improved_manager.initialize()
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.exchange = self.improved_manager.get_component("exchange")
            self.analyzer = self.improved_manager.get_component("market_analyzer") 
            self.trader = self.improved_manager.get_component("trader")
            self.risk_manager = self.improved_manager.get_component("risk_manager")
            self.notifier = self.improved_manager.get_component("notifications")
            self.strategy_factory = self.improved_manager.get_component("strategy_factory")
            
            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
            return True
        else:
            logger.warning("‚ö†Ô∏è –û—Ç–∫–∞—Ç –∫ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return self._init_components_basic()
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ BotManager.start():
    
    async def start_improved(self):
        '''–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏'''
        
        if self.status != BotStatus.STOPPED:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if hasattr(self, 'improved_manager'):
                success = await self.improved_manager.start_trading()
                if success:
                    self.status = BotStatus.RUNNING
                    self.start_time = datetime.utcnow()
                    await self._update_bot_state()
                    return True
            
            # –û—Ç–∫–∞—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –∑–∞–ø—É—Å–∫—É
            return await self._start_basic()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.status = BotStatus.ERROR
            return False
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ BotManager.stop():
    
    async def stop_improved(self):
        '''–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å graceful shutdown'''
        
        if self.status == BotStatus.STOPPED:
            logger.warning("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if hasattr(self, 'improved_manager'):
                await self.improved_manager.graceful_shutdown()
            
            self.status = BotStatus.STOPPED
            self.stop_time = datetime.utcnow()
            await self._update_bot_state()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    """
    
    return integration_code


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
improved_bot_manager = ImprovedBotManager()

# ========================================
# –≠–ö–°–ü–û–†–¢–´
# ========================================

__all__ = [
    'ImprovedBotManager',
    'improved_bot_manager', 
    'upgrade_existing_bot_manager'
]