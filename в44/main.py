#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Crypto Trading Bot
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞
"""
import asyncio
import argparse
import sys
import os
from pathlib import Path
from dotenv import load_dotenv
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
from src.web.app import create_app
from src.bot.manager import BotManager
from src.core.database import init_db, SessionLocal
from src.logging.smart_logger import SmartLogger
from src.logging.log_manager import cleanup_scheduler
from src.web.websocket_server import WebSocketServer
from src.ml.data_pipeline import DataPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
smart_logger = SmartLogger("main")
logger = smart_logger


class CryptoTradingApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.web_app = None
        self.bot_manager = None
        self.websocket_server = None
        self.data_pipeline = None
        self.is_running = False
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", category='system')
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            init_db()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            db = SessionLocal()
            db.execute("SELECT 1")
            db.close()
            
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", category='system')
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", category='error')
            return False
    
    async def start_web_interface(self, host='0.0.0.0', port=5000):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ {host}:{port}", category='system')
        
        try:
            # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.web_app = create_app()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
            self.websocket_server = WebSocketServer(self.web_app)
            await self.websocket_server.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            from werkzeug.serving import run_simple
            
            def run_flask():
                run_simple(host, port, self.web_app, use_reloader=False, use_debugger=False)
            
            flask_thread = threading.Thread(target=run_flask)
            flask_thread.daemon = True
            flask_thread.start()
            
            logger.info(f"‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω: http://{host}:{port}", category='system')
            logger.info("üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000/dashboard", category='system')
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", category='error')
            return False
    
    async def start_trading_bot(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...", category='system')
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
            self.bot_manager = BotManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML pipeline
            self.data_pipeline = DataPipeline()
            await self.data_pipeline.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.bot_manager.start()
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", category='system')
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", category='error')
            return False
    
    async def start_full_app(self, host='0.0.0.0', port=5000):
        """–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤–µ–± + –±–æ—Ç)"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", category='system')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        if not await self.init_database():
            return False
        
        # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        await smart_logger.start_db_writer()
        await cleanup_scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if not await self.start_web_interface(host, port):
            return False
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if not await self.start_trading_bot():
            return False
        
        self.is_running = True
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–æ!", category='system')
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while self.is_running:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", category='system')
        
        await self.shutdown()
    
    async def start_web_only(self, host='0.0.0.0', port=5000):
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("üåê –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...", category='system')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        if not await self.init_database():
            return False
        
        # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        await smart_logger.start_db_writer()
        await cleanup_scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if not await self.start_web_interface(host, port):
            return False
        
        self.is_running = True
        logger.info("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω! –ë–æ—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞", category='system')
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while self.is_running:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", category='system')
        
        await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", category='system')
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if self.bot_manager:
            await self.bot_manager.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
        if self.websocket_server:
            await self.websocket_server.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await smart_logger.stop_db_writer()
        await cleanup_scheduler.stop()
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", category='system')


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='Crypto Trading Bot - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞'
    )
    
    parser.add_argument(
        '--mode',
        choices=['full', 'web', 'bot'],
        default='web',
        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: full (–≤–µ–±+–±–æ—Ç), web (—Ç–æ–ª—å–∫–æ –≤–µ–±), bot (—Ç–æ–ª—å–∫–æ –±–æ—Ç)'
    )
    
    parser.add_argument(
        '--host',
        default='0.0.0.0',
        help='–•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (default: 0.0.0.0)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=5000,
        help='–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (default: 5000)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )
    
    return parser.parse_args()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env = ['EXCHANGE_API_KEY', 'EXCHANGE_API_SECRET', 'DATABASE_URL']
    missing_env = [var for var in required_env if not os.getenv(var)]
    
    if missing_env:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_env)}", category='error')
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example", category='system')
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = CryptoTradingApp()
    
    try:
        if args.mode == 'full':
            await app.start_full_app(args.host, args.port)
        elif args.mode == 'web':
            await app.start_web_only(args.host, args.port)
        elif args.mode == 'bot':
            # –¢–æ–ª—å–∫–æ –±–æ—Ç (–±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
            if await app.init_database():
                await smart_logger.start_db_writer()
                await cleanup_scheduler.start()
                await app.start_trading_bot()
                
                # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
                try:
                    while True:
                        await asyncio.sleep(1)
                except KeyboardInterrupt:
                    pass
                
                await app.shutdown()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", category='error')
        await app.shutdown()


if __name__ == '__main__':
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            CRYPTO TRADING BOT v2.0                        ‚ïë
‚ïë    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å ML         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)