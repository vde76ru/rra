"""
–ú–æ–¥—É–ª—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è ThreadPoolExecutor –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Python
–ü—É—Ç—å: src/utils/threading_compat.py
"""
import asyncio
import sys
import threading
import logging
import subprocess
import os
from concurrent.futures import ThreadPoolExecutor
from typing import Optional, Any, Callable
from contextlib import asynccontextmanager

logger = logging.getLogger(__name__)

class CompatibleThreadPoolExecutor:
    """
    –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ ThreadPoolExecutor —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Python
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å timeout –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ shutdown()
    """
    
    def __init__(self, max_workers: int = 4, thread_name_prefix: str = 'ThreadPool'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            thread_name_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω –ø–æ—Ç–æ–∫–æ–≤
        """
        self.max_workers = max_workers
        self.thread_name_prefix = thread_name_prefix
        self._executor: Optional[ThreadPoolExecutor] = None
        self._shutdown = False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Python –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.python_version = sys.version_info
        self.supports_timeout = self.python_version >= (3, 9)
        
        logger.info(f"‚úÖ CompatibleThreadPoolExecutor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω "
                   f"(Python {self.python_version.major}.{self.python_version.minor}, "
                   f"timeout support: {self.supports_timeout})")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤"""
        if self._executor is None:
            self._executor = ThreadPoolExecutor(
                max_workers=self.max_workers,
                thread_name_prefix=self.thread_name_prefix
            )
            self._shutdown = False
            logger.info(f"üöÄ ThreadPool –∑–∞–ø—É—â–µ–Ω —Å {self.max_workers} –ø–æ—Ç–æ–∫–∞–º–∏")
    
    def shutdown(self, wait: bool = True, timeout: Optional[float] = None):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏ Python
        
        Args:
            wait: –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å Python 3.9+)
        """
        if self._executor is None or self._shutdown:
            return
            
        try:
            if self.supports_timeout and timeout is not None:
                # Python 3.9+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç timeout
                self._executor.shutdown(wait=wait, timeout=timeout)
                logger.info(f"üõë ThreadPool –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å timeout={timeout}s")
            else:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
                self._executor.shutdown(wait=wait)
                logger.info("üõë ThreadPool –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±–µ–∑ timeout)")
                
        except TypeError as e:
            # Fallback –¥–ª—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å shutdown –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {e}")
            try:
                self._executor.shutdown(wait=wait)
                logger.info("üõë ThreadPool –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (fallback —Ä–µ–∂–∏–º)")
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ThreadPool: {fallback_error}")
        
        finally:
            self._shutdown = True
            self._executor = None
    
    def submit(self, fn: Callable, *args, **kwargs):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        
        Args:
            fn: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            
        Returns:
            Future –æ–±—ä–µ–∫—Ç
        """
        if self._executor is None:
            raise RuntimeError("ThreadPool –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ start() —Å–Ω–∞—á–∞–ª–∞.")
            
        return self._executor.submit(fn, *args, **kwargs)
    
    def map(self, fn: Callable, *iterables, timeout: Optional[float] = None, chunksize: int = 1):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–∞–º
        
        Args:
            fn: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            *iterables: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
            timeout: –¢–∞–π–º–∞—É—Ç
            chunksize: –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            
        Returns:
            –ò—Ç–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if self._executor is None:
            raise RuntimeError("ThreadPool –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ start() —Å–Ω–∞—á–∞–ª–∞.")
            
        return self._executor.map(fn, *iterables, timeout=timeout, chunksize=chunksize)
    
    @property
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞"""
        return self._executor is not None and not self._shutdown
    
    def __enter__(self):
        """Context manager entry"""
        self.start()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.shutdown(wait=True, timeout=30)

class AsyncRouteHandler:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å ThreadPoolExecutor
    """
    
    def __init__(self, max_workers: int = 4, request_timeout: float = 30.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
            request_timeout: –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        self.max_workers = max_workers
        self.request_timeout = request_timeout
        self.executor = CompatibleThreadPoolExecutor(
            max_workers=max_workers,
            thread_name_prefix='AsyncRoute'
        )
        self._running = False
        
        logger.info(f"‚úÖ AsyncRouteHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω "
                   f"(workers: {max_workers}, timeout: {request_timeout}s)")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if not self._running:
            self.executor.start()
            self._running = True
            logger.info("üöÄ AsyncRouteHandler –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self._running:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AsyncRouteHandler...")
            
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏ Python
                self.executor.shutdown(wait=True, timeout=self.request_timeout)
                logger.info("‚úÖ AsyncRouteHandler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ AsyncRouteHandler: {e}")
                
            finally:
                self._running = False
    
    async def execute_in_thread(self, func: Callable, *args, **kwargs) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        """
        if not self._running:
            await self.start()
        
        loop = asyncio.get_event_loop()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            future = self.executor.submit(func, *args, **kwargs)
            result = await asyncio.wait_for(
                loop.run_in_executor(None, future.result),
                timeout=self.request_timeout
            )
            return result
            
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__}: {e}")
            raise
    
    @asynccontextmanager
    async def managed_execution(self):
        """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await self.start()
        try:
            yield self
        finally:
            await self.stop()

class SystemdCompatibleService:
    """
    –°–µ—Ä–≤–∏—Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å systemd –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    
    def __init__(self, service_name: str = "crypto-trading-bot"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            service_name: –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
        """
        self.service_name = service_name
        self.is_running = False
        self.shutdown_event = threading.Event()
        
    def create_systemd_service_file(self) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .service —Ñ–∞–π–ª–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
        work_dir = os.getcwd()
        python_path = sys.executable
        script_path = os.path.join(work_dir, "main.py")
        
        service_content = f"""[Unit]
Description=Crypto Trading Bot v3.0
After=network.target
Wants=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory={work_dir}
Environment=PATH={os.environ.get('PATH', '')}
Environment=PYTHONPATH={work_dir}
ExecStart={python_path} {script_path} web
ExecReload=/bin/kill -HUP $MAINPID
KillMode=mixed
Restart=always
RestartSec=10
TimeoutStopSec=30

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier={self.service_name}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=yes
PrivateTmp=yes

# –õ–∏–º–∏—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤
LimitNOFILE=65536
MemoryMax=2G
CPUQuota=200%

[Install]
WantedBy=multi-user.target
"""
        return service_content
    
    def install_systemd_service(self) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞
            service_content = self.create_systemd_service_file()
            service_file_path = f"/etc/systemd/system/{self.service_name}.service"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(service_file_path, 'w') as f:
                f.write(service_content)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
            subprocess.run(['systemctl', 'daemon-reload'], check=True)
            
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
            subprocess.run(['systemctl', 'enable', self.service_name], check=True)
            
            logger.info(f"‚úÖ Systemd —Å–µ—Ä–≤–∏—Å {self.service_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info(f"üìÅ –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞: {service_file_path}")
            logger.info("üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            logger.info(f"   sudo systemctl start {self.service_name}")
            logger.info(f"   sudo systemctl stop {self.service_name}")
            logger.info(f"   sudo systemctl status {self.service_name}")
            logger.info(f"   sudo journalctl -u {self.service_name} -f")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ systemd —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    def setup_auto_recovery(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_script = self.create_monitoring_script()
            monitor_path = "/opt/crypto-bot/monitor.py"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(monitor_path), exist_ok=True)
            
            with open(monitor_path, 'w') as f:
                f.write(monitor_script)
            
            # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(monitor_path, 0o755)
            
            # –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É
            cron_job = f"*/2 * * * * /usr/bin/python3 {monitor_path} >> /var/log/crypto-bot-monitor.log 2>&1\n"
            
            logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω: {monitor_path}")
            logger.info("‚è∞ –î–æ–±–∞–≤—å—Ç–µ –≤ crontab:")
            logger.info(f"   echo '{cron_job.strip()}' | crontab -")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def create_monitoring_script(self) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        script_content = f"""#!/usr/bin/env python3
\"\"\"
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Crypto Trading Bot
\"\"\"
import subprocess
import time
import sys
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

SERVICE_NAME = "{self.service_name}"
HEALTH_CHECK_URL = "http://localhost:8000/api/health"
MAX_RESTART_ATTEMPTS = 3
RESTART_DELAY = 30

def check_service_status():
    \"\"\"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ systemd —Å–µ—Ä–≤–∏—Å–∞\"\"\"
    try:
        result = subprocess.run(
            ['systemctl', 'is-active', SERVICE_NAME],
            capture_output=True,
            text=True
        )
        return result.stdout.strip() == 'active'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: {{e}}")
        return False

def check_health_endpoint():
    \"\"\"–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint\"\"\"
    try:
        response = requests.get(HEALTH_CHECK_URL, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logger.warning(f"Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {{e}}")
        return False

def restart_service():
    \"\"\"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞\"\"\"
    try:
        subprocess.run(['systemctl', 'restart', SERVICE_NAME], check=True)
        logger.info(f"–°–µ—Ä–≤–∏—Å {{SERVICE_NAME}} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {{e}}")
        return False

def main():
    \"\"\"–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\"\"\"
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Crypto Trading Bot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd —Å—Ç–∞—Ç—É—Å
    service_running = check_service_status()
    logger.info(f"Systemd —Å–µ—Ä–≤–∏—Å: {{'–∞–∫—Ç–∏–≤–µ–Ω' if service_running else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    health_ok = check_health_endpoint()
    logger.info(f"Health endpoint: {{'–¥–æ—Å—Ç—É–ø–µ–Ω' if health_ok else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}}")
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    needs_restart = not service_running or not health_ok
    
    if needs_restart:
        logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        
        if restart_service():
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(RESTART_DELAY)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if check_service_status() and check_health_endpoint():
                logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞")
    else:
        logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

if __name__ == "__main__":
    main()
"""
        return script_content

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
def safe_executor_shutdown(executor: ThreadPoolExecutor, 
                         timeout: Optional[float] = None) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ThreadPoolExecutor
    
    Args:
        executor: –≠–∫–∑–µ–º–ø–ª—è—Ä ThreadPoolExecutor
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        compatible_executor = CompatibleThreadPoolExecutor(max_workers=1)
        compatible_executor._executor = executor
        compatible_executor.shutdown(wait=True, timeout=timeout)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ executor: {e}")
        return False

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ThreadPool –æ—à–∏–±–æ–∫
def handle_threadpool_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ThreadPool
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except TypeError as e:
            if "timeout" in str(e):
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å timeout –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ {func.__name__}: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ timeout
                return func(*args, **{k: v for k, v in kwargs.items() if k != 'timeout'})
            else:
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            raise
    return wrapper