"""
‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
"""
import pandas as pd
import numpy as np
import ta
import logging
from typing import Optional, NamedTuple

logger = logging.getLogger(__name__)

class AnalysisResult(NamedTuple):
    """üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    action: str  # 'BUY', 'SELL', 'WAIT'
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (0.0 - 1.0)
    reason: str  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None

class ImprovedMultiIndicatorStrategy:
    """
    üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º—É–ª—å—Ç–∏–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    - ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    """
    
    def __init__(self):
        self.name = "improved_multi_indicator"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.rsi_period = 14
        self.rsi_oversold = 30
        self.rsi_overbought = 70
        
        self.ma_short_period = 10
        self.ma_long_period = 50
        
        self.bb_period = 20
        self.bb_std = 2
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        self.min_confidence = 0.6
    
    def analyze(self, df: pd.DataFrame) -> AnalysisResult:
        """
        üìà –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [timestamp, open, high, low, close, volume]
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - AnalysisResult —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        """
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_data(df):
                return AnalysisResult('WAIT', 0.0, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            
            # 2. –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_indicators(df)
            
            if not indicators:
                return AnalysisResult('WAIT', 0.0, '–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = self._analyze_signals(indicators, df)
            
            # 4. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = self._make_decision(signals)
            
            return decision
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return AnalysisResult('WAIT', 0.0, f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}')
    
    def _validate_data(self, df: pd.DataFrame) -> bool:
        """
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['open', 'high', 'low', 'close', 'volume']
            if not all(col in df.columns for col in required_columns):
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if len(df) < self.ma_long_period + 10:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {self.ma_long_period + 10}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if df[required_columns].isnull().any().any():
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
            if (df[['open', 'high', 'low', 'close']] <= 0).any().any():
                logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ü–µ–Ω (high >= low, etc.)
            if not ((df['high'] >= df['low']) & 
                   (df['high'] >= df['open']) & 
                   (df['high'] >= df['close']) &
                   (df['low'] <= df['open']) & 
                   (df['low'] <= df['close'])).all():
                logger.error("‚ùå –ù–∞—Ä—É—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ OHLC –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _calculate_indicators(self, df: pd.DataFrame) -> Optional[dict]:
        """
        üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        """
        try:
            indicators = {}
            
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è numpy –Ω–∞ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            with np.errstate(divide='ignore', invalid='ignore'):
                
                # 1. RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)
                try:
                    rsi_values = ta.momentum.rsi(df['close'], window=self.rsi_period)
                    indicators['rsi'] = self._clean_series(rsi_values)
                    indicators['rsi_current'] = indicators['rsi'].iloc[-1] if not indicators['rsi'].empty else np.nan
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI: {e}")
                    indicators['rsi'] = pd.Series([np.nan] * len(df))
                    indicators['rsi_current'] = np.nan
                
                # 2. –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
                try:
                    indicators['ma_short'] = self._clean_series(df['close'].rolling(window=self.ma_short_period).mean())
                    indicators['ma_long'] = self._clean_series(df['close'].rolling(window=self.ma_long_period).mean())
                    indicators['ma_short_current'] = indicators['ma_short'].iloc[-1] if not indicators['ma_short'].empty else np.nan
                    indicators['ma_long_current'] = indicators['ma_long'].iloc[-1] if not indicators['ma_long'].empty else np.nan
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è MA: {e}")
                    indicators.update({
                        'ma_short': pd.Series([np.nan] * len(df)),
                        'ma_long': pd.Series([np.nan] * len(df)),
                        'ma_short_current': np.nan,
                        'ma_long_current': np.nan
                    })
                
                # 3. –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                try:
                    bb = ta.volatility.BollingerBands(df['close'], window=self.bb_period, window_dev=self.bb_std)
                    indicators['bb_upper'] = self._clean_series(bb.bollinger_hband())
                    indicators['bb_lower'] = self._clean_series(bb.bollinger_lband())
                    indicators['bb_middle'] = self._clean_series(bb.bollinger_mavg())
                    
                    indicators['bb_upper_current'] = indicators['bb_upper'].iloc[-1] if not indicators['bb_upper'].empty else np.nan
                    indicators['bb_lower_current'] = indicators['bb_lower'].iloc[-1] if not indicators['bb_lower'].empty else np.nan
                    indicators['bb_middle_current'] = indicators['bb_middle'].iloc[-1] if not indicators['bb_middle'].empty else np.nan
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è Bollinger Bands: {e}")
                    indicators.update({
                        'bb_upper': pd.Series([np.nan] * len(df)),
                        'bb_lower': pd.Series([np.nan] * len(df)),
                        'bb_middle': pd.Series([np.nan] * len(df)),
                        'bb_upper_current': np.nan,
                        'bb_lower_current': np.nan,
                        'bb_middle_current': np.nan
                    })
                
                # 4. MACD
                try:
                    macd = ta.trend.MACD(df['close'])
                    indicators['macd'] = self._clean_series(macd.macd())
                    indicators['macd_signal'] = self._clean_series(macd.macd_signal())
                    indicators['macd_histogram'] = self._clean_series(macd.macd_diff())
                    
                    indicators['macd_current'] = indicators['macd'].iloc[-1] if not indicators['macd'].empty else np.nan
                    indicators['macd_signal_current'] = indicators['macd_signal'].iloc[-1] if not indicators['macd_signal'].empty else np.nan
                    indicators['macd_histogram_current'] = indicators['macd_histogram'].iloc[-1] if not indicators['macd_histogram'].empty else np.nan
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è MACD: {e}")
                    indicators.update({
                        'macd': pd.Series([np.nan] * len(df)),
                        'macd_signal': pd.Series([np.nan] * len(df)),
                        'macd_histogram': pd.Series([np.nan] * len(df)),
                        'macd_current': np.nan,
                        'macd_signal_current': np.nan,
                        'macd_histogram_current': np.nan
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            indicators['current_price'] = df['close'].iloc[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
            valid_indicators = sum(1 for key, value in indicators.items() 
                                 if 'current' in key and not pd.isna(value))
            
            if valid_indicators < 2:
                logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {valid_indicators}")
                return None
            
            return indicators
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return None
    
    def _clean_series(self, series: pd.Series) -> pd.Series:
        """
        üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """
        try:
            # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ NaN
            series = series.replace([np.inf, -np.inf], np.nan)
            
            # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã (–∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª–µ–µ —á–µ–º –≤ 1000 —Ä–∞–∑ –±–æ–ª—å—à–µ –º–µ–¥–∏–∞–Ω—ã)
            if not series.dropna().empty:
                median_val = series.median()
                if not pd.isna(median_val) and median_val > 0:
                    outlier_threshold = median_val * 1000
                    series = series.where(series < outlier_threshold, np.nan)
            
            return series
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return series
    
    def _analyze_signals(self, indicators: dict, df: pd.DataFrame) -> dict:
        """
        üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = {
            'rsi_signal': 0,      # -1: –ø—Ä–æ–¥–∞–∂–∞, 0: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, 1: –ø–æ–∫—É–ø–∫–∞
            'ma_signal': 0,
            'bb_signal': 0,
            'macd_signal': 0,
            'reasons': []
        }
        
        try:
            current_price = indicators['current_price']
            
            # 1. –ê–Ω–∞–ª–∏–∑ RSI
            rsi_current = indicators.get('rsi_current', np.nan)
            if not pd.isna(rsi_current):
                if rsi_current <= self.rsi_oversold:
                    signals['rsi_signal'] = 1
                    signals['reasons'].append(f'RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ ({rsi_current:.1f})')
                elif rsi_current >= self.rsi_overbought:
                    signals['rsi_signal'] = -1
                    signals['reasons'].append(f'RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ ({rsi_current:.1f})')
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
            ma_short = indicators.get('ma_short_current', np.nan)
            ma_long = indicators.get('ma_long_current', np.nan)
            if not pd.isna(ma_short) and not pd.isna(ma_long):
                if ma_short > ma_long and current_price > ma_short:
                    signals['ma_signal'] = 1
                    signals['reasons'].append('–¶–µ–Ω–∞ –≤—ã—à–µ –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö MA')
                elif ma_short < ma_long and current_price < ma_short:
                    signals['ma_signal'] = -1
                    signals['reasons'].append('–¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö MA')
            
            # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
            bb_upper = indicators.get('bb_upper_current', np.nan)
            bb_lower = indicators.get('bb_lower_current', np.nan)
            if not pd.isna(bb_upper) and not pd.isna(bb_lower):
                if current_price <= bb_lower:
                    signals['bb_signal'] = 1
                    signals['reasons'].append('–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞')
                elif current_price >= bb_upper:
                    signals['bb_signal'] = -1
                    signals['reasons'].append('–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞')
            
            # 4. –ê–Ω–∞–ª–∏–∑ MACD
            macd_current = indicators.get('macd_current', np.nan)
            macd_signal_current = indicators.get('macd_signal_current', np.nan)
            if not pd.isna(macd_current) and not pd.isna(macd_signal_current):
                if macd_current > macd_signal_current:
                    signals['macd_signal'] = 1
                    signals['reasons'].append('MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏')
                elif macd_current < macd_signal_current:
                    signals['macd_signal'] = -1
                    signals['reasons'].append('MACD –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏')
            
            return signals
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return signals
    
    def _make_decision(self, signals: dict) -> AnalysisResult:
        """
        üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–∏–≥–Ω–∞–ª
            total_signal = (signals['rsi_signal'] + 
                          signals['ma_signal'] + 
                          signals['bb_signal'] + 
                          signals['macd_signal'])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            active_indicators = sum(1 for signal in [signals['rsi_signal'], 
                                                   signals['ma_signal'], 
                                                   signals['bb_signal'], 
                                                   signals['macd_signal']] 
                                  if signal != 0)
            
            if active_indicators == 0:
                return AnalysisResult('WAIT', 0.0, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0.0 - 1.0)
            max_possible_signal = active_indicators
            confidence = abs(total_signal) / max_possible_signal if max_possible_signal > 0 else 0.0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if total_signal >= 2 and confidence >= self.min_confidence:
                action = 'BUY'
            elif total_signal <= -2 and confidence >= self.min_confidence:
                action = 'SELL'
            else:
                action = 'WAIT'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
            reason = '; '.join(signals['reasons']) if signals['reasons'] else '–ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω'
            if action == 'WAIT':
                reason = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–∏–ª–∞: {total_signal}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})'
            
            return AnalysisResult(
                action=action,
                confidence=confidence,
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            return AnalysisResult('WAIT', 0.0, f'–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {str(e)}')