#!/usr/bin/env python3
"""
ENHANCED RISK MANAGER - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
–§–∞–π–ª: src/risk/enhanced_risk_manager.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ Kelly Criterion
‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any, Union
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
import logging

from ..core.database import SessionLocal
from ..core.models import Trade, TradeStatus, Balance, TradingPair
from ..core.config import config
from ..strategies.base import TradingSignal

logger = logging.getLogger(__name__)

class RiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""
    VERY_LOW = "very_low"      # <1% —Ä–∏—Å–∫–∞
    LOW = "low"                # 1-2% —Ä–∏—Å–∫–∞
    MEDIUM = "medium"          # 2-5% —Ä–∏—Å–∫–∞
    HIGH = "high"              # 5-10% —Ä–∏—Å–∫–∞
    VERY_HIGH = "very_high"    # >10% —Ä–∏—Å–∫–∞
    EXTREME = "extreme"        # >20% —Ä–∏—Å–∫–∞

class RiskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    NORMAL = "normal"          # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    CAUTIOUS = "cautious"      # –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    DEFENSIVE = "defensive"    # –ó–∞—â–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    EMERGENCY = "emergency"    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

@dataclass
class PositionRisk:
    """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    position_size: float
    risk_amount: float         # –°—É–º–º–∞ –ø–æ–¥ —Ä–∏—Å–∫–æ–º
    risk_percent: float        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    var_95: float             # Value at Risk 95%
    expected_loss: float       # –û–∂–∏–¥–∞–µ–º—ã–π —É–±—ã—Ç–æ–∫
    correlation_risk: float    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫
    liquidity_risk: float     # –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    concentration_risk: float  # –†–∏—Å–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏

@dataclass
class PortfolioRisk:
    """–û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    total_risk_amount: float   # –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–¥ —Ä–∏—Å–∫–æ–º
    total_risk_percent: float  # –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
    max_drawdown: float        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    current_drawdown: float    # –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    correlation_matrix: np.ndarray  # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    diversification_ratio: float    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    sharpe_ratio: float        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    risk_status: RiskStatus    # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–∞

@dataclass
class RiskParameters:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞"""
    max_position_risk: float = 0.02    # 2% –º–∞–∫—Å–∏–º—É–º –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
    max_portfolio_risk: float = 0.10   # 10% –º–∞–∫—Å–∏–º—É–º –Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—å
    max_correlation: float = 0.7       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    max_drawdown: float = 0.15         # 15% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    stop_loss_atr_multiplier: float = 2.0
    kelly_fraction: float = 0.25       # –î–æ–ª—è Kelly Criterion

class EnhancedRiskManager:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
    
    üõ°Ô∏è –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´:
    
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –û–¶–ï–ù–ö–ê        ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –ö–û–ù–¢–†–û–õ–¨       ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –ò–°–ü–û–õ–ù–ï–ù–ò–ï    ‚îÇ
    ‚îÇ   –†–ò–°–ö–ê         ‚îÇ    ‚îÇ   –õ–ò–ú–ò–¢–û–í        ‚îÇ    ‚îÇ   –ó–ê–©–ò–¢–´        ‚îÇ
    ‚îÇ   - VaR         ‚îÇ    ‚îÇ   - –ü–æ–∑–∏—Ü–∏—è      ‚îÇ    ‚îÇ   - Stop Loss   ‚îÇ
    ‚îÇ   - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏  ‚îÇ    ‚îÇ   - –ü–æ—Ä—Ç—Ñ–µ–ª—å     ‚îÇ    ‚îÇ   - Emergency   ‚îÇ
    ‚îÇ   - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è‚îÇ    ‚îÇ   - –ü—Ä–æ—Å–∞–¥–∫–∞     ‚îÇ    ‚îÇ   - Position    ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚îÇ                        ‚îÇ                        ‚îÇ
             ‚ñº                        ‚ñº                        ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –ú–û–ù–ò–¢–û–†–ò–ù–ì    ‚îÇ    ‚îÇ   –ê–î–ê–ü–¢–ê–¶–ò–Ø      ‚îÇ    ‚îÇ   –û–¢–ß–ï–¢–ù–û–°–¢–¨    ‚îÇ
    ‚îÇ   - Real-time   ‚îÇ    ‚îÇ   - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å‚îÇ    ‚îÇ   - –ú–µ—Ç—Ä–∏–∫–∏     ‚îÇ
    ‚îÇ   - Alerts      ‚îÇ    ‚îÇ   - –†—ã–Ω–æ–∫        ‚îÇ    ‚îÇ   - –ò—Å—Ç–æ—Ä–∏—è     ‚îÇ
    ‚îÇ   - Dashboard   ‚îÇ    ‚îÇ   - Performance  ‚îÇ    ‚îÇ   - –ê–Ω–∞–ª–∏–∑      ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self, risk_params: Optional[RiskParameters] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        
        Args:
            risk_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        """
        self.risk_params = risk_params or RiskParameters()
        self.load_config_parameters()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.current_status = RiskStatus.NORMAL
        self.emergency_stop_active = False
        self.last_portfolio_check = None
        
        # –ö–µ—à–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
        self.position_risks = {}
        self.correlation_matrix = None
        self.price_history = defaultdict(deque)
        self.returns_history = defaultdict(deque)
        self.drawdown_history = deque(maxlen=1000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.risk_events = deque(maxlen=100)
        self.rejected_trades = 0
        self.total_risk_checks = 0
        
        logger.info("‚úÖ EnhancedRiskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_config_parameters(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ config
            self.risk_params.max_position_risk = config.MAX_RISK_PER_TRADE_PERCENT / 100
            self.risk_params.max_portfolio_risk = config.MAX_PORTFOLIO_RISK_PERCENT / 100
            self.risk_params.max_correlation = config.MAX_CORRELATION_THRESHOLD
            self.risk_params.max_drawdown = config.MAX_DRAWDOWN_PERCENT / 100
            self.risk_params.stop_loss_atr_multiplier = config.STOP_LOSS_ATR_MULTIPLIER
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.circuit_breaker_enabled = config.ENABLE_CIRCUIT_BREAKER
            self.circuit_breaker_loss = config.CIRCUIT_BREAKER_LOSS_PERCENT / 100
            self.max_consecutive_losses = config.MAX_CONSECUTIVE_LOSSES
            
            logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
    
    async def validate_trade_risk(self, signal: TradingSignal, symbol: str,
                                current_price: float, balance: float) -> Tuple[bool, Dict[str, Any]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            
        Returns:
            Tuple[is_approved, risk_analysis]
        """
        try:
            self.total_risk_checks += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.emergency_stop_active:
                return False, {
                    'reason': '–ê–∫—Ç–∏–≤–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
                    'risk_level': RiskLevel.EXTREME,
                    'recommended_action': 'wait'
                }
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self.calculate_optimal_position_size(
                signal, symbol, current_price, balance
            )
            
            if position_size <= 0:
                return False, {
                    'reason': '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ <= 0',
                    'risk_level': RiskLevel.HIGH,
                    'recommended_action': 'skip'
                }
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_risk = await self.assess_position_risk(
                symbol, position_size, current_price, signal
            )
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
            portfolio_risk = await self.assess_portfolio_risk(position_risk)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            risk_checks = self._perform_risk_checks(position_risk, portfolio_risk)
            
            # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
            is_approved = risk_checks['approved']
            
            if not is_approved:
                self.rejected_trades += 1
                logger.warning(
                    f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {risk_checks['reason']} "
                    f"(—Ä–∏—Å–∫: {risk_checks['risk_level'].value})"
                )
            
            return is_approved, {
                'position_size': position_size,
                'position_risk': position_risk,
                'portfolio_risk': portfolio_risk,
                'risk_checks': risk_checks,
                'recommended_stop_loss': self._calculate_dynamic_stop_loss(
                    current_price, symbol, signal.action
                ),
                'recommended_take_profit': self._calculate_dynamic_take_profit(
                    current_price, signal.action, position_risk.var_95
                )
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞: {e}")
            return False, {
                'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞: {e}',
                'risk_level': RiskLevel.HIGH,
                'recommended_action': 'skip'
            }
    
    async def calculate_optimal_position_size(self, signal: TradingSignal, symbol: str,
                                            current_price: float, balance: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Kelly Criterion –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        """
        try:
            # –ú–µ—Ç–æ–¥ 1: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞
            risk_amount = balance * self.risk_params.max_position_risk
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º stop-loss
            if signal.stop_loss:
                stop_distance = abs(current_price - signal.stop_loss)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ stop-loss
                atr = await self._get_atr(symbol)
                stop_distance = atr * self.risk_params.stop_loss_atr_multiplier
            
            if stop_distance <= 0:
                return 0.0
            
            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
            position_size_risk = risk_amount / stop_distance
            
            # –ú–µ—Ç–æ–¥ 2: Kelly Criterion (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
            kelly_size = await self._calculate_kelly_position_size(
                symbol, current_price, balance
            )
            
            # –ú–µ—Ç–æ–¥ 3: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å-based sizing
            volatility_size = await self._calculate_volatility_based_size(
                symbol, balance, current_price
            )
            
            # –ë–µ—Ä–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–∏–Ω–∏–º—É–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤)
            optimal_size = min(
                position_size_risk,
                kelly_size,
                volatility_size,
                balance * 0.1  # –ú–∞–∫—Å–∏–º—É–º 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            max_position_value = balance * self.risk_params.max_position_risk * 10
            max_size_by_value = max_position_value / current_price
            
            final_size = min(optimal_size, max_size_by_value)
            
            logger.debug(
                f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {final_size:.6f} "
                f"(risk: {position_size_risk:.6f}, kelly: {kelly_size:.6f}, "
                f"vol: {volatility_size:.6f})"
            )
            
            return max(0.0, final_size)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0
    
    async def assess_position_risk(self, symbol: str, position_size: float,
                                 current_price: float, signal: TradingSignal) -> PositionRisk:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position_value = position_size * current_price
            
            # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
            if signal.stop_loss:
                risk_amount = abs(current_price - signal.stop_loss) * position_size
            else:
                atr = await self._get_atr(symbol)
                risk_amount = atr * self.risk_params.stop_loss_atr_multiplier * position_size
            
            # Value at Risk (95%)
            volatility = await self._get_volatility(symbol)
            var_95 = position_value * volatility * 1.645  # 95% VaR
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫
            correlation_risk = await self._calculate_correlation_risk(symbol)
            
            # –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            liquidity_risk = min(0.1, position_value / 1000000)  # 1M USD –∫–∞–∫ –±–∞–∑–æ–≤–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            
            # –†–∏—Å–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
            total_portfolio_value = await self._get_total_portfolio_value()
            concentration_risk = position_value / total_portfolio_value if total_portfolio_value > 0 else 0
            
            return PositionRisk(
                symbol=symbol,
                position_size=position_size,
                risk_amount=risk_amount,
                risk_percent=risk_amount / total_portfolio_value if total_portfolio_value > 0 else 0,
                var_95=var_95,
                expected_loss=risk_amount * 0.5,  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                correlation_risk=correlation_risk,
                liquidity_risk=liquidity_risk,
                concentration_risk=concentration_risk
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return PositionRisk(
                symbol=symbol,
                position_size=position_size,
                risk_amount=position_size * current_price * 0.02,
                risk_percent=0.02,
                var_95=position_size * current_price * 0.05,
                expected_loss=position_size * current_price * 0.01,
                correlation_risk=0.1,
                liquidity_risk=0.05,
                concentration_risk=0.1
            )
    
    async def assess_portfolio_risk(self, new_position: PositionRisk) -> PortfolioRisk:
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            current_positions = await self._get_current_positions()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_positions = current_positions + [new_position]
            
            # –û–±—â–∏–π —Ä–∏—Å–∫
            total_risk_amount = sum(pos.risk_amount for pos in all_positions)
            total_value = await self._get_total_portfolio_value()
            total_risk_percent = total_risk_amount / total_value if total_value > 0 else 0
            
            # –ü—Ä–æ—Å–∞–¥–∫–∞
            current_drawdown, max_drawdown = await self._calculate_drawdown()
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
            correlation_matrix = await self._build_correlation_matrix([pos.symbol for pos in all_positions])
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            diversification_ratio = self._calculate_diversification_ratio(all_positions, correlation_matrix)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            sharpe_ratio = await self._calculate_portfolio_sharpe(all_positions)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–∞
            risk_status = self._determine_risk_status(
                total_risk_percent, current_drawdown, diversification_ratio
            )
            
            return PortfolioRisk(
                total_risk_amount=total_risk_amount,
                total_risk_percent=total_risk_percent,
                max_drawdown=max_drawdown,
                current_drawdown=current_drawdown,
                correlation_matrix=correlation_matrix,
                diversification_ratio=diversification_ratio,
                sharpe_ratio=sharpe_ratio,
                risk_status=risk_status
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞: {e}")
            return PortfolioRisk(
                total_risk_amount=0.0,
                total_risk_percent=0.0,
                max_drawdown=0.0,
                current_drawdown=0.0,
                correlation_matrix=np.array([]),
                diversification_ratio=1.0,
                sharpe_ratio=0.0,
                risk_status=RiskStatus.NORMAL
            )
    
    def _perform_risk_checks(self, position_risk: PositionRisk,
                           portfolio_risk: PortfolioRisk) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–æ–≤"""
        checks = {
            'approved': True,
            'reason': '',
            'risk_level': RiskLevel.LOW,
            'violations': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            if position_risk.risk_percent > self.risk_params.max_position_risk:
                checks['approved'] = False
                checks['reason'] = f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_risk.risk_percent:.2%}'
                checks['risk_level'] = RiskLevel.HIGH
                checks['violations'].append('position_risk_limit')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
            if portfolio_risk.total_risk_percent > self.risk_params.max_portfolio_risk:
                checks['approved'] = False
                checks['reason'] = f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞: {portfolio_risk.total_risk_percent:.2%}'
                checks['risk_level'] = RiskLevel.HIGH
                checks['violations'].append('portfolio_risk_limit')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
            if portfolio_risk.current_drawdown > self.risk_params.max_drawdown:
                checks['approved'] = False
                checks['reason'] = f'–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {portfolio_risk.current_drawdown:.2%}'
                checks['risk_level'] = RiskLevel.EXTREME
                checks['violations'].append('max_drawdown')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
            if position_risk.concentration_risk > 0.3:  # 30% –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
                checks['approved'] = False
                checks['reason'] = f'–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {position_risk.concentration_risk:.2%}'
                checks['risk_level'] = RiskLevel.HIGH
                checks['violations'].append('concentration_risk')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            if position_risk.correlation_risk > self.risk_params.max_correlation:
                checks['approved'] = False
                checks['reason'] = f'–í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º: {position_risk.correlation_risk:.2f}'
                checks['risk_level'] = RiskLevel.MEDIUM
                checks['violations'].append('correlation_risk')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if portfolio_risk.risk_status in [RiskStatus.EMERGENCY]:
                checks['approved'] = False
                checks['reason'] = f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_risk.risk_status.value}'
                checks['risk_level'] = RiskLevel.EXTREME
                checks['violations'].append('portfolio_status')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if not checks['violations']:
                if portfolio_risk.total_risk_percent > 0.05:
                    checks['risk_level'] = RiskLevel.MEDIUM
                else:
                    checks['risk_level'] = RiskLevel.LOW
            
            return checks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–æ–≤: {e}")
            return {
                'approved': False,
                'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}',
                'risk_level': RiskLevel.HIGH,
                'violations': ['system_error']
            }
    
    async def monitor_portfolio_health(self) -> Dict[str, Any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            current_positions = await self._get_current_positions()
            portfolio_risk = await self.assess_portfolio_risk(
                PositionRisk('DUMMY', 0, 0, 0, 0, 0, 0, 0, 0)  # Dummy –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            )
            
            health_metrics = {
                'timestamp': datetime.utcnow(),
                'total_positions': len(current_positions),
                'total_risk_percent': portfolio_risk.total_risk_percent,
                'current_drawdown': portfolio_risk.current_drawdown,
                'max_drawdown': portfolio_risk.max_drawdown,
                'diversification_ratio': portfolio_risk.diversification_ratio,
                'sharpe_ratio': portfolio_risk.sharpe_ratio,
                'risk_status': portfolio_risk.risk_status.value,
                'emergency_stop_active': self.emergency_stop_active
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            critical_issues = []
            
            if portfolio_risk.current_drawdown > self.risk_params.max_drawdown * 0.8:
                critical_issues.append('–ë–ª–∏–∑–∫–æ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ')
            
            if portfolio_risk.total_risk_percent > self.risk_params.max_portfolio_risk * 0.9:
                critical_issues.append('–ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞')
            
            if portfolio_risk.diversification_ratio < 0.3:
                critical_issues.append('–ù–∏–∑–∫–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è')
            
            health_metrics['critical_issues'] = critical_issues
            health_metrics['health_score'] = self._calculate_health_score(portfolio_risk)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (portfolio_risk.current_drawdown > self.circuit_breaker_loss and
                self.circuit_breaker_enabled):
                await self.activate_emergency_stop('Circuit breaker triggered')
            
            return health_metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {
                'timestamp': datetime.utcnow(),
                'error': str(e),
                'health_score': 0.0
            }
    
    async def activate_emergency_stop(self, reason: str = "Manual activation"):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            self.emergency_stop_active = True
            self.current_status = RiskStatus.EMERGENCY
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.risk_events.append({
                'timestamp': datetime.utcnow(),
                'type': 'emergency_stop',
                'reason': reason
            })
            
            logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê: {reason}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # await self._send_emergency_notification(reason)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    async def deactivate_emergency_stop(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            self.emergency_stop_active = False
            self.current_status = RiskStatus.NORMAL
            
            self.risk_events.append({
                'timestamp': datetime.utcnow(),
                'type': 'emergency_stop_deactivated',
                'reason': 'Manual deactivation'
            })
            
            logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    # ===============================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ===============================================================
    
    async def _calculate_kelly_position_size(self, symbol: str, price: float,
                                           balance: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ Kelly Criterion"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            win_rate, avg_win, avg_loss = await self._get_historical_stats(symbol)
            
            if win_rate <= 0 or avg_loss <= 0:
                return balance * 0.02 / price  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 2%
            
            # Kelly = (bp - q) / b
            # –≥–¥–µ b = avg_win/avg_loss, p = win_rate, q = 1-win_rate
            b = avg_win / avg_loss
            p = win_rate
            q = 1 - win_rate
            
            kelly_fraction = (b * p - q) / b
            kelly_fraction = max(0, min(kelly_fraction, self.risk_params.kelly_fraction))
            
            return balance * kelly_fraction / price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Kelly: {e}")
            return balance * 0.02 / price
    
    async def _calculate_volatility_based_size(self, symbol: str, balance: float,
                                             price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            volatility = await self._get_volatility(symbol)
            
            # –ß–µ–º –≤—ã—à–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º –º–µ–Ω—å—à–µ –ø–æ–∑–∏—Ü–∏—è
            vol_factor = 1 / (1 + volatility * 10)
            base_allocation = balance * 0.05  # 5% –±–∞–∑–æ–≤–∞—è –∞–ª–ª–æ–∫–∞—Ü–∏—è
            
            return base_allocation * vol_factor / price
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return balance * 0.02 / price
    
    async def _get_atr(self, symbol: str, period: int = 14) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Average True Range"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –±–∏—Ä–∂–µ–≤–æ–º—É API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return 0.02  # 2% ATR
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ATR: {e}")
            return 0.02
    
    async def _get_volatility(self, symbol: str, period: int = 20) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            return 0.05  # 5% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 0.05
    
    async def _get_historical_stats(self, symbol: str) -> Tuple[float, float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            db = SessionLocal()
            
            # –ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.utcnow() - timedelta(days=30)
            trades = db.query(Trade).filter(
                Trade.symbol == symbol,
                Trade.status == TradeStatus.CLOSED,
                Trade.exit_time >= cutoff_date
            ).all()
            
            if not trades:
                return 0.5, 0.02, 0.02  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            
            profits = [t.profit for t in trades if t.profit]
            wins = [p for p in profits if p > 0]
            losses = [-p for p in profits if p < 0]
            
            win_rate = len(wins) / len(profits) if profits else 0.5
            avg_win = np.mean(wins) if wins else 0.02
            avg_loss = np.mean(losses) if losses else 0.02
            
            return win_rate, avg_win, avg_loss
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0.5, 0.02, 0.02
        finally:
            db.close()
    
    def _calculate_dynamic_stop_loss(self, current_price: float, symbol: str,
                                   action: str) -> float:
        """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ stop-loss"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ATR
            stop_distance = current_price * 0.02  # 2%
            
            if action == 'BUY':
                return current_price - stop_distance
            else:  # SELL
                return current_price + stop_distance
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ stop-loss: {e}")
            return current_price * 0.98 if action == 'BUY' else current_price * 1.02
    
    def _calculate_dynamic_take_profit(self, current_price: float, action: str,
                                     var_95: float) -> float:
        """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ take-profit"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VaR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ take-profit
            profit_distance = max(current_price * 0.04, var_95)
            
            if action == 'BUY':
                return current_price + profit_distance
            else:  # SELL
                return current_price - profit_distance
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ take-profit: {e}")
            return current_price * 1.04 if action == 'BUY' else current_price * 0.96
    
    def get_risk_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            return {
                'total_risk_checks': self.total_risk_checks,
                'rejected_trades': self.rejected_trades,
                'rejection_rate': self.rejected_trades / max(1, self.total_risk_checks),
                'current_status': self.current_status.value,
                'emergency_stop_active': self.emergency_stop_active,
                'recent_events': list(self.risk_events)[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
                'risk_parameters': {
                    'max_position_risk': self.risk_params.max_position_risk,
                    'max_portfolio_risk': self.risk_params.max_portfolio_risk,
                    'max_correlation': self.risk_params.max_correlation,
                    'max_drawdown': self.risk_params.max_drawdown
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# =================================================================
# –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ú–ï–¢–û–î–û–í, –¢–†–ï–ë–£–Æ–©–ò–• –ü–û–õ–ù–û–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
# =================================================================

    async def _get_current_positions(self) -> List[PositionRisk]:
        """–ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return []
    
    async def _get_total_portfolio_value(self) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return 10000.0
    
    async def _calculate_correlation_risk(self, symbol: str) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ - —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞"""
        return 0.1
    
    async def _calculate_drawdown(self) -> Tuple[float, float]:
        """–ó–∞–≥–ª—É—à–∫–∞ - —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏"""
        return 0.05, 0.12
    
    async def _build_correlation_matrix(self, symbols: List[str]) -> np.ndarray:
        """–ó–∞–≥–ª—É—à–∫–∞ - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
        n = len(symbols)
        return np.eye(n) if n > 0 else np.array([])
    
    def _calculate_diversification_ratio(self, positions: List[PositionRisk],
                                       correlation_matrix: np.ndarray) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ - —Ä–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return 0.7
    
    async def _calculate_portfolio_sharpe(self, positions: List[PositionRisk]) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ - —Ä–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return 1.2
    
    def _determine_risk_status(self, total_risk: float, drawdown: float,
                             diversification: float) -> RiskStatus:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        if drawdown > 0.15 or total_risk > 0.2:
            return RiskStatus.EMERGENCY
        elif drawdown > 0.1 or total_risk > 0.15:
            return RiskStatus.DEFENSIVE
        elif drawdown > 0.05 or total_risk > 0.1:
            return RiskStatus.CAUTIOUS
        else:
            return RiskStatus.NORMAL
    
    def _calculate_health_score(self, portfolio_risk: PortfolioRisk) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞
            drawdown_score = max(0, 1 - portfolio_risk.current_drawdown / 0.2)
            risk_score = max(0, 1 - portfolio_risk.total_risk_percent / 0.3)
            diversification_score = portfolio_risk.diversification_ratio
            sharpe_score = min(1, portfolio_risk.sharpe_ratio / 2)
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
            health_score = (
                drawdown_score * 0.3 +
                risk_score * 0.3 +
                diversification_score * 0.2 +
                sharpe_score * 0.2
            )
            
            return max(0, min(1, health_score))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return 0.5

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
enhanced_risk_manager = None

def get_risk_manager() -> EnhancedRiskManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global enhanced_risk_manager
    
    if enhanced_risk_manager is None:
        enhanced_risk_manager = EnhancedRiskManager()
    
    return enhanced_risk_manager

def create_risk_manager(risk_params: Optional[RiskParameters] = None) -> EnhancedRiskManager:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return EnhancedRiskManager(risk_params)

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'EnhancedRiskManager',
    'RiskParameters',
    'PositionRisk',
    'PortfolioRisk',
    'RiskLevel',
    'RiskStatus',
    'get_risk_manager',
    'create_risk_manager'
]