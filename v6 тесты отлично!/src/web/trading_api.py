"""
API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π
–§–∞–π–ª: src/web/trading_api.py

üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ï–ô:
‚úÖ –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TradingController
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from flask import jsonify, request
from functools import wraps

from ..core.config import config
from ..logging.smart_logger import get_logger
from ..web.async_handler import async_handler

logger = get_logger(__name__)

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        auth_header = request.headers.get('Authorization', '')
        if not auth_header and not request.cookies.get('session'):
            return jsonify({
                'success': False,
                'error': 'Authorization required'
            }), 401
        return f(*args, **kwargs)
    return decorated_function

def register_trading_api_routes(app, bot_manager=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    """
    
    logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú
    # =================================================================
    
    @app.route('/api/bot/start', methods=['POST'])
    @login_required
    @async_handler()
    async def start_trading_bot():
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
            data = request.get_json() or {}
            pairs = data.get('pairs', [])
            auto_strategy = data.get('auto_strategy', True)
            
            logger.info(
                "üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞",
                category='bot',
                pairs_count=len(pairs),
                auto_strategy=auto_strategy
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_status = bot_manager.get_status()
            if current_status.get('is_running', False):
                return jsonify({
                    'success': False,
                    'error': 'Bot is already running'
                })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if pairs:
                await bot_manager.update_trading_pairs(pairs)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            success, message = await bot_manager.start()
            
            if success:
                logger.info(
                    "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                    category='bot',
                    message=message
                )
                
                return jsonify({
                    'success': True,
                    'message': message,
                    'status': 'starting',
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞",
                    category='bot',
                    error=message
                )
                
                return jsonify({
                    'success': False,
                    'error': message
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': f'Internal error: {str(e)}'
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    @login_required
    def stop_trading_bot():
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞", category='bot')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_status = bot_manager.get_status()
            if not current_status.get('is_running', False):
                return jsonify({
                    'success': False,
                    'error': 'Bot is not running'
                })
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            success, message = await bot_manager.stop()
            
            if success:
                logger.info(
                    "‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    category='bot',
                    message=message
                )
                
                return jsonify({
                    'success': True,
                    'message': message,
                    'status': 'stopped',
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞",
                    category='bot',
                    error=message
                )
                
                return jsonify({
                    'success': False,
                    'error': message
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': f'Internal error: {str(e)}'
            }), 500
    
    @app.route('/api/bot/emergency-stop', methods=['POST'])
    @login_required
    def emergency_stop_bot():
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê!", category='bot')
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            success, message = await bot_manager.emergency_stop()
            
            if success:
                logger.critical(
                    "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    category='bot',
                    message=message
                )
                
                return jsonify({
                    'success': True,
                    'message': message,
                    'status': 'emergency_stop',
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                    category='bot',
                    error=message
                )
                
                return jsonify({
                    'success': False,
                    'error': message
                }), 500
                
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': f'Internal error: {str(e)}'
            }), 500
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò
    # =================================================================
    
    @app.route('/api/bot/positions')
    @login_required
    def get_open_positions():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
            status = bot_manager.get_status()
            positions = status.get('positions', [])
            
            return jsonify({
                'success': True,
                'positions': positions,
                'count': len(positions),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/close-position/<symbol>', methods=['POST'])
    @login_required
    def close_position(symbol):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            logger.info(f"üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}", category='trading')
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            result = await bot_manager.close_position(symbol)
            
            if result['success']:
                logger.info(
                    f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞",
                    category='trading',
                    profit=result.get('profit', 0)
                )
                
                return jsonify({
                    'success': True,
                    'message': f'Position {symbol} closed successfully',
                    'result': result,
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': result.get('error', 'Unknown error')
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/close-all-positions', methods=['POST'])
    @login_required
    def close_all_positions():
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            logger.warning("üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –í–°–ï–• –ø–æ–∑–∏—Ü–∏–π", category='trading')
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            results = await bot_manager.close_all_positions()
            
            closed_count = sum(1 for r in results if r.get('success', False))
            failed_count = len(results) - closed_count
            
            logger.info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {closed_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫",
                category='trading'
            )
            
            return jsonify({
                'success': True,
                'message': f'Closed {closed_count} positions, {failed_count} failed',
                'results': results,
                'closed_count': closed_count,
                'failed_count': failed_count,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –ù–ê–°–¢–†–û–ô–ö–ò –¢–û–†–ì–û–í–õ–ò
    # =================================================================
    
    @app.route('/api/bot/pairs', methods=['GET'])
    @login_required
    @async_handler()
    async def get_trading_pairs():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            status = bot_manager.get_status()
            active_pairs = status.get('active_pairs', [])
            all_pairs = status.get('available_pairs', [])
            
            return jsonify({
                'success': True,
                'active_pairs': active_pairs,
                'available_pairs': all_pairs,
                'count': len(active_pairs),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/pairs', methods=['POST'])
    @login_required
    @async_handler()
    async def update_trading_pairs():
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            data = request.get_json() or {}
            pairs = data.get('pairs', [])
            
            if not pairs:
                return jsonify({
                    'success': False,
                    'error': 'No pairs specified'
                }), 400
            
            logger.info(
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {pairs}",
                category='config',
                pairs_count=len(pairs)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã
            success = await bot_manager.update_trading_pairs(pairs)
            
            if success:
                logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", category='config')
                
                return jsonify({
                    'success': True,
                    'message': f'Updated {len(pairs)} trading pairs',
                    'pairs': pairs,
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Failed to update trading pairs'
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –°–¢–†–ê–¢–ï–ì–ò–ò
    # =================================================================
    
    @app.route('/api/bot/strategies')
    @login_required
    def get_available_strategies():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            if not bot_manager:
                strategies = ['momentum', 'multi_indicator', 'scalping']  # Fallback
            else:
                status = bot_manager.get_status()
                strategies = status.get('available_strategies', [])
            
            return jsonify({
                'success': True,
                'strategies': strategies,
                'count': len(strategies),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/strategy', methods=['POST'])
    @login_required
    def set_strategy():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            data = request.get_json() or {}
            strategy = data.get('strategy')
            symbol = data.get('symbol', 'default')
            
            if not strategy:
                return jsonify({
                    'success': False,
                    'error': 'No strategy specified'
                }), 400
            
            logger.info(
                f"üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy} –¥–ª—è {symbol}",
                category='strategy'
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            success = await bot_manager.set_strategy(symbol, strategy)
            
            if success:
                logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", category='strategy')
                
                return jsonify({
                    'success': True,
                    'message': f'Strategy {strategy} set for {symbol}',
                    'strategy': strategy,
                    'symbol': symbol,
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Failed to set strategy'
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =================================================================
    
    @app.route('/api/bot/health')
    @login_required
    def get_bot_health():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'healthy': False,
                    'error': 'Bot manager not available'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            health = await bot_manager.health_check()
            
            return jsonify({
                'success': True,
                'healthy': health.get('overall_healthy', False),
                'components': health.get('components', {}),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'healthy': False,
                'error': str(e)
            })
    
    @app.route('/api/bot/metrics')
    @login_required
    def get_bot_metrics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = bot_manager.get_performance_metrics()
            
            return jsonify({
                'success': True,
                'metrics': metrics,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    # =================================================================
    
    logger.info("‚úÖ API —Ä–æ—É—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   üü¢ POST /api/bot/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    logger.info("   üü¢ POST /api/bot/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    logger.info("   üü¢ POST /api/bot/emergency-stop - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    logger.info("   üü¢ GET /api/bot/positions - –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    logger.info("   üü¢ POST /api/bot/close-position/<symbol> - –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
    logger.info("   üü¢ POST /api/bot/close-all-positions - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π")
    logger.info("   üü¢ GET/POST /api/bot/pairs - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏")
    logger.info("   üü¢ GET /api/bot/strategies - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    logger.info("   üü¢ POST /api/bot/strategy - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    logger.info("   üü¢ GET /api/bot/health - –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞")
    logger.info("   üü¢ GET /api/bot/metrics - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    return True

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['register_trading_api_routes']