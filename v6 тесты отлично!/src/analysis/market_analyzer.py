"""
Market Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
–§–∞–π–ª: src/analysis/market_analyzer.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Ñ–∞–∑ —Ä—ã–Ω–∫–∞
‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
"""

import asyncio
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import logging

try:
    from ta.trend import EMAIndicator, ADXIndicator
    from ta.momentum import RSIIndicator
    from ta.volatility import AverageTrueRange, BollingerBands
    from ta.volume import OnBalanceVolumeIndicator
    TA_AVAILABLE = True
except ImportError:
    TA_AVAILABLE = False
    logging.warning("‚ö†Ô∏è TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")

from ..core.config import config
from ..core.database import SessionLocal
from ..core.models import Candle, MarketCondition

logger = logging.getLogger(__name__)

class TrendDirection(Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    STRONG_UPTREND = "strong_uptrend"
    UPTREND = "uptrend"
    SIDEWAYS = "sideways"
    DOWNTREND = "downtrend"
    STRONG_DOWNTREND = "strong_downtrend"

class MarketRegime(Enum):
    """–†–µ–∂–∏–º—ã —Ä—ã–Ω–∫–∞"""
    TRENDING = "trending"
    RANGING = "ranging"
    VOLATILE = "volatile"
    CONSOLIDATION = "consolidation"

class VolatilityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    EXTREME = "extreme"

@dataclass
class MarketConditions:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    symbol: str
    trend_direction: TrendDirection
    trend_strength: float          # 0-1
    market_regime: MarketRegime
    volatility_level: VolatilityLevel
    volatility_value: float
    volume_trend: str              # increasing/decreasing/stable
    support_level: Optional[float]
    resistance_level: Optional[float]
    confidence: float              # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ 0-1
    timestamp: datetime
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    rsi: Optional[float] = None
    adx: Optional[float] = None
    bb_position: Optional[float] = None  # –ü–æ–∑–∏—Ü–∏—è –≤ Bollinger Bands
    volume_score: Optional[float] = None

class MarketAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    
    üî• –û–ü–†–ï–î–ï–õ–Ø–ï–¢ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò:
    - Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üê –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ä—ã–Ω–∫–∏
    - Mean Reversion ‚Üê –ë–æ–∫–æ–≤—ã–µ —Ä—ã–Ω–∫–∏  
    - Breakout ‚Üê –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    - Scalping ‚Üê –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.trend_periods = {
            'short': 20,   # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
            'medium': 50,  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
            'long': 200    # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        }
        
        self.volatility_window = 20
        self.volume_window = 20
        self.support_resistance_window = 50
        
        logger.info("‚úÖ MarketAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def analyze_market_conditions(self, symbol: str, timeframe: str = '1h') -> MarketConditions:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            MarketConditions: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = await self._get_market_data(symbol, timeframe)
            
            if df is None or len(df) < 50:
                return self._get_default_conditions(symbol)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            trend_analysis = self._analyze_trend(df)
            volatility_analysis = self._analyze_volatility(df)
            volume_analysis = self._analyze_volume(df)
            support_resistance = self._find_support_resistance(df)
            technical_indicators = self._calculate_technical_indicators(df)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            market_regime = self._determine_market_regime(
                trend_analysis, volatility_analysis, volume_analysis
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self._calculate_confidence(
                trend_analysis, volatility_analysis, technical_indicators
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            conditions = MarketConditions(
                symbol=symbol,
                trend_direction=trend_analysis['direction'],
                trend_strength=trend_analysis['strength'],
                market_regime=market_regime,
                volatility_level=volatility_analysis['level'],
                volatility_value=volatility_analysis['value'],
                volume_trend=volume_analysis['trend'],
                support_level=support_resistance.get('support'),
                resistance_level=support_resistance.get('resistance'),
                confidence=confidence,
                timestamp=datetime.utcnow(),
                rsi=technical_indicators.get('rsi'),
                adx=technical_indicators.get('adx'),
                bb_position=technical_indicators.get('bb_position'),
                volume_score=volume_analysis.get('score')
            )
            
            logger.info(
                f"üìä –ê–Ω–∞–ª–∏–∑ {symbol}: {trend_analysis['direction'].value}, "
                f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_analysis['level'].value}, "
                f"–†–µ–∂–∏–º: {market_regime.value}"
            )
            
            return conditions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}: {e}")
            return self._get_default_conditions(symbol)
    
    async def _get_market_data(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –∏–ª–∏ API"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –ø–µ—Ä–∏–æ–¥–æ–≤
            candles = db.query(Candle).filter(
                Candle.symbol == symbol,
                Candle.timeframe == timeframe
            ).order_by(Candle.timestamp.desc()).limit(200).all()
            
            if candles:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                data = []
                for candle in reversed(candles):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
                    data.append({
                        'timestamp': candle.timestamp,
                        'open': float(candle.open),
                        'high': float(candle.high),
                        'low': float(candle.low),
                        'close': float(candle.close),
                        'volume': float(candle.volume)
                    })
                
                df = pd.DataFrame(data)
                df.set_index('timestamp', inplace=True)
                
                logger.debug(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                return df
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        finally:
            try:
                db.close()
            except:
                pass
    
    def _analyze_trend(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        try:
            current_price = df['close'].iloc[-1]
            
            # EMA –∞–Ω–∞–ª–∏–∑
            trends = {}
            for period_name, period in self.trend_periods.items():
                if len(df) >= period:
                    if TA_AVAILABLE:
                        ema = EMAIndicator(df['close'], window=period).ema_indicator()
                        trends[period_name] = current_price / ema.iloc[-1] - 1
                    else:
                        # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –∫–∞–∫ fallback
                        sma = df['close'].rolling(period).mean()
                        trends[period_name] = current_price / sma.iloc[-1] - 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if not trends:
                return {
                    'direction': TrendDirection.SIDEWAYS,
                    'strength': 0.5,
                    'short_trend': 0,
                    'medium_trend': 0,
                    'long_trend': 0
                }
            
            avg_trend = np.mean(list(trends.values()))
            strength = min(abs(avg_trend) * 10, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if avg_trend > 0.05:
                direction = TrendDirection.STRONG_UPTREND
            elif avg_trend > 0.02:
                direction = TrendDirection.UPTREND
            elif avg_trend < -0.05:
                direction = TrendDirection.STRONG_DOWNTREND
            elif avg_trend < -0.02:
                direction = TrendDirection.DOWNTREND
            else:
                direction = TrendDirection.SIDEWAYS
            
            return {
                'direction': direction,
                'strength': strength,
                'short_trend': trends.get('short', 0),
                'medium_trend': trends.get('medium', 0),
                'long_trend': trends.get('long', 0),
                'avg_trend': avg_trend
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return {
                'direction': TrendDirection.SIDEWAYS,
                'strength': 0.5,
                'short_trend': 0,
                'medium_trend': 0,
                'long_trend': 0
            }
    
    def _analyze_volatility(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –∏–ª–∏ –ø—Ä–æ—Å—Ç—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if TA_AVAILABLE and len(df) >= self.volatility_window:
                atr = AverageTrueRange(df['high'], df['low'], df['close'], 
                                     window=self.volatility_window).average_true_range()
                volatility = atr.iloc[-1] / df['close'].iloc[-1]
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                returns = df['close'].pct_change()
                volatility = returns.rolling(self.volatility_window).std().iloc[-1]
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility < 0.01:
                level = VolatilityLevel.VERY_LOW
            elif volatility < 0.02:
                level = VolatilityLevel.LOW
            elif volatility < 0.04:
                level = VolatilityLevel.MEDIUM
            elif volatility < 0.08:
                level = VolatilityLevel.HIGH
            else:
                level = VolatilityLevel.EXTREME
            
            return {
                'level': level,
                'value': volatility,
                'normalized': min(volatility * 25, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {
                'level': VolatilityLevel.MEDIUM,
                'value': 0.02,
                'normalized': 0.5
            }
    
    def _analyze_volume(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if 'volume' not in df.columns:
                return {'trend': 'stable', 'score': 0.5}
            
            current_volume = df['volume'].iloc[-1]
            avg_volume = df['volume'].rolling(self.volume_window).mean().iloc[-1]
            
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            # –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
            if volume_ratio > 1.5:
                trend = 'increasing'
                score = min(volume_ratio / 3, 1.0)
            elif volume_ratio < 0.7:
                trend = 'decreasing' 
                score = max(1 - volume_ratio, 0.2)
            else:
                trend = 'stable'
                score = 0.5
            
            return {
                'trend': trend,
                'ratio': volume_ratio,
                'score': score
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞: {e}")
            return {'trend': 'stable', 'score': 0.5}
    
    def _find_support_resistance(self, df: pd.DataFrame) -> Dict[str, Optional[float]]:
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            if len(df) < self.support_resistance_window:
                return {'support': None, 'resistance': None}
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –º–∏–Ω–∏–º—É–º–æ–≤
            recent_data = df.tail(self.support_resistance_window)
            
            # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥
            resistance = recent_data['high'].max()
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –º–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥
            support = recent_data['low'].min()
            
            current_price = df['close'].iloc[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π
            resistance_distance = (resistance - current_price) / current_price
            support_distance = (current_price - support) / current_price
            
            # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if resistance_distance > 0.1:  # –ë–æ–ª–µ–µ 10%
                resistance = None
            if support_distance > 0.1:  # –ë–æ–ª–µ–µ 10%
                support = None
            
            return {
                'support': support,
                'resistance': resistance
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {'support': None, 'resistance': None}
    
    def _calculate_technical_indicators(self, df: pd.DataFrame) -> Dict[str, Optional[float]]:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        try:
            # RSI
            if TA_AVAILABLE:
                rsi = RSIIndicator(df['close'], window=14).rsi()
                indicators['rsi'] = rsi.iloc[-1] if not rsi.empty else None
                
                # ADX (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
                if len(df) >= 14:
                    adx = ADXIndicator(df['high'], df['low'], df['close'], window=14).adx()
                    indicators['adx'] = adx.iloc[-1] if not adx.empty else None
                
                # Bollinger Bands –ø–æ–∑–∏—Ü–∏—è
                bb = BollingerBands(df['close'], window=20, window_dev=2)
                bb_upper = bb.bollinger_hband()
                bb_lower = bb.bollinger_lband()
                
                if not bb_upper.empty and not bb_lower.empty:
                    current_price = df['close'].iloc[-1]
                    upper = bb_upper.iloc[-1]
                    lower = bb_lower.iloc[-1]
                    
                    # –ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ–ª–æ—Å–∞—Ö –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (0-1)
                    indicators['bb_position'] = (current_price - lower) / (upper - lower)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        
        return indicators
    
    def _determine_market_regime(self, trend_analysis: Dict, volatility_analysis: Dict, 
                                volume_analysis: Dict) -> MarketRegime:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        try:
            trend_strength = trend_analysis['strength']
            volatility_level = volatility_analysis['level']
            
            # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            if trend_strength > 0.7:
                return MarketRegime.TRENDING
            elif volatility_level in [VolatilityLevel.HIGH, VolatilityLevel.EXTREME]:
                return MarketRegime.VOLATILE
            elif trend_strength < 0.3 and volatility_level == VolatilityLevel.LOW:
                return MarketRegime.CONSOLIDATION
            else:
                return MarketRegime.RANGING
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞: {e}")
            return MarketRegime.RANGING
    
    def _calculate_confidence(self, trend_analysis: Dict, volatility_analysis: Dict,
                            technical_indicators: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            confidence_factors = []
            
            # –§–∞–∫—Ç–æ—Ä —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
            trend_strength = trend_analysis.get('strength', 0.5)
            confidence_factors.append(trend_strength)
            
            # –§–∞–∫—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_normalized = volatility_analysis.get('normalized', 0.5)
            volatility_confidence = 1 - abs(volatility_normalized - 0.5) * 2
            confidence_factors.append(volatility_confidence)
            
            # –§–∞–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            rsi = technical_indicators.get('rsi')
            if rsi is not None:
                # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI –¥–∞—é—Ç –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                rsi_confidence = abs(rsi - 50) / 50
                confidence_factors.append(rsi_confidence)
            
            # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if confidence_factors:
                confidence = np.mean(confidence_factors)
                return max(0.3, min(confidence, 0.95))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0.3-0.95
            else:
                return 0.5
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def _get_default_conditions(self, symbol: str) -> MarketConditions:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return MarketConditions(
            symbol=symbol,
            trend_direction=TrendDirection.SIDEWAYS,
            trend_strength=0.5,
            market_regime=MarketRegime.RANGING,
            volatility_level=VolatilityLevel.MEDIUM,
            volatility_value=0.02,
            volume_trend='stable',
            support_level=None,
            resistance_level=None,
            confidence=0.3,
            timestamp=datetime.utcnow()
        )
    
    def get_strategy_recommendations(self, conditions: MarketConditions) -> Dict[str, float]:
        """
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Returns:
            Dict[strategy_name, suitability_score]: –°–∫–æ—Ä—ã –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ 0-1
        """
        recommendations = {}
        
        # Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions.trend_direction in [TrendDirection.UPTREND, TrendDirection.STRONG_UPTREND, 
                                        TrendDirection.DOWNTREND, TrendDirection.STRONG_DOWNTREND]:
            recommendations['momentum'] = 0.8 * conditions.trend_strength
        else:
            recommendations['momentum'] = 0.2
        
        # Mean Reversion —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if conditions.trend_direction == TrendDirection.SIDEWAYS:
            recommendations['mean_reversion'] = 0.8
        else:
            recommendations['mean_reversion'] = 0.3
        
        # Breakout —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (conditions.market_regime == MarketRegime.CONSOLIDATION and 
            conditions.volatility_level == VolatilityLevel.LOW):
            recommendations['breakout'] = 0.9
        else:
            recommendations['breakout'] = 0.4
        
        # Scalping —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (conditions.volatility_level in [VolatilityLevel.LOW, VolatilityLevel.MEDIUM] and
            conditions.volume_trend == 'increasing'):
            recommendations['scalping'] = 0.7
        else:
            recommendations['scalping'] = 0.3
        
        # Multi-indicator (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
        recommendations['multi_indicator'] = 0.6 + conditions.confidence * 0.3
        
        return recommendations

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'MarketAnalyzer',
    'MarketConditions',
    'TrendDirection',
    'MarketRegime',
    'VolatilityLevel'
]