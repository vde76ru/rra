import asyncio
import os
from datetime import datetime
import logging
from typing import Dict, List
from dotenv import load_dotenv
import pandas as pd

from src.exchange.bybit_client import HumanizedBybitClient
from src.strategies.advanced_strategies import MultiIndicatorStrategy, SafeScalpingStrategy
from src.core.database import SessionLocal
from src.core.models import Trade, Signal, TradingPair
from src.notifications.telegram_notifier import TelegramNotifier, NotificationMessage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/trading.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

class AdvancedCryptoBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    
    def __init__(self):
        self.client = HumanizedBybitClient()
        self.notifier = TelegramNotifier()
        self.strategies = {
            'multi_indicator': MultiIndicatorStrategy(),
            'scalping': SafeScalpingStrategy()
        }
        self.active_pairs = []
        self.positions = {}  # symbol -> position
        self.is_running = False
        self.max_positions = int(os.getenv('MAX_POSITIONS', 1))
        
    async def load_active_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –ë–î"""
        db = SessionLocal()
        pairs = db.query(TradingPair).filter(TradingPair.is_active == True).all()
        self.active_pairs = [pair.symbol for pair in pairs]
        db.close()
        
        if not self.active_pairs:
            self.active_pairs = [os.getenv('TRADING_SYMBOL', 'BTCUSDT')]
        
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {self.active_pairs}")
    
    async def analyze_pair(self, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ohlcv = self.client.exchange.fetch_ohlcv(
                symbol,
                timeframe='5m',
                limit=200  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            )
            
            df = pd.DataFrame(
                ohlcv,
                columns=['timestamp', 'open', 'high', 'low', 'close', 'volume']
            )
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            signals = []
            
            # Multi-indicator —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            signal = self.strategies['multi_indicator'].analyze(df)
            if signal.action != 'WAIT':
                signals.append(('multi_indicator', signal))
            
            # Scalping —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–∫–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤)
            if self._is_sideways_market(df):
                signal = self.strategies['scalping'].analyze(df)
                if signal.action != 'WAIT':
                    signals.append(('scalping', signal))
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            if signals:
                best_strategy, best_signal = max(signals, key=lambda x: x[1].confidence)
                
                logger.info(f"{symbol}: {best_signal.action} —Å–∏–≥–Ω–∞–ª –æ—Ç {best_strategy}, "
                          f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_signal.confidence:.2f}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
                await self.notifier.send_notification(NotificationMessage(
                    title=f"üìä –°–∏–≥–Ω–∞–ª: {symbol}",
                    text=f"{best_signal.action} —Å–∏–≥–Ω–∞–ª\n–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy}",
                    level="INFO",
                    data={
                        "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{best_signal.confidence:.2%}",
                        "–ü—Ä–∏—á–∏–Ω–∞": best_signal.reason,
                        "Risk/Reward": f"{best_signal.risk_reward_ratio:.2f}"
                    }
                ))
                
                return best_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        
        return None
    
    def _is_sideways_market(self, df: pd.DataFrame) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
        price_change = (df['close'].iloc[-1] - df['close'].iloc[-50]) / df['close'].iloc[-50]
        return abs(price_change) < 0.02  # –ú–µ–Ω–µ–µ 2% –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    async def execute_signal(self, symbol: str, signal):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if len(self.positions) >= self.max_positions:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({self.max_positions})")
            return
        
        if symbol in self.positions:
            logger.info(f"–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await self.client.fetch_balance()
        free_balance = balance.get('USDT', {}).get('free', 0)
        
        if free_balance <= 0:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = await self.client.fetch_ticker(symbol)
        current_price = ticker['last']
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_size_percent = float(os.getenv('MAX_POSITION_SIZE_PERCENT', 5))
        position_value = free_balance * (position_size_percent / 100)
        amount = position_value / current_price
        
        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        order = await self.client.create_order(
            symbol,
            signal.action.lower(),
            amount
        )
        
        if order:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db = SessionLocal()
            trade = Trade(
                symbol=symbol,
                side=signal.action,
                entry_price=current_price,
                quantity=amount,
                status='OPEN',
                strategy='advanced',
                stop_loss=signal.stop_loss,
                take_profit=signal.take_profit
            )
            db.add(trade)
            db.commit()
            db.close()
            
            self.positions[symbol] = trade
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
            await self.notifier.send_trade_opened(trade)
            
            logger.info(f"–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {signal.action} {amount} {symbol} @ {current_price}")
    
    async def check_open_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ SL/TP"""
        for symbol, position in list(self.positions.items()):
            try:
                ticker = await self.client.fetch_ticker(symbol)
                current_price = ticker['last']
                
                should_close = False
                reason = ""
                
                if position.side == 'BUY':
                    if current_price <= position.stop_loss:
                        should_close = True
                        reason = "Stop Loss"
                    elif current_price >= position.take_profit:
                        should_close = True
                        reason = "Take Profit"
                else:  # SELL
                    if current_price >= position.stop_loss:
                        should_close = True
                        reason = "Stop Loss"
                    elif current_price <= position.take_profit:
                        should_close = True
                        reason = "Take Profit"
                
                if should_close:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    close_side = 'sell' if position.side == 'BUY' else 'buy'
                    order = await self.client.create_order(
                        symbol,
                        close_side,
                        position.quantity
                    )
                    
                    if order:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                        db = SessionLocal()
                        trade = db.query(Trade).filter(Trade.id == position.id).first()
                        trade.exit_price = current_price
                        trade.profit = (current_price - trade.entry_price) * trade.quantity
                        if position.side == 'SELL':
                            trade.profit = -trade.profit
                        trade.status = 'CLOSED'
                        trade.closed_at = datetime.utcnow()
                        db.commit()
                        db.close()
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
                        await self.notifier.send_trade_closed(trade)
                        
                        logger.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ {reason}: {symbol} @ {current_price}, "
                                  f"Profit: {trade.profit:.2f}")
                        
                        del self.positions[symbol]
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def analyze_all_pairs(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
        batch_size = 3
        
        for i in range(0, len(self.active_pairs), batch_size):
            batch = self.active_pairs[i:i + batch_size]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [self.analyze_pair(symbol) for symbol in batch]
            signals = await asyncio.gather(*tasks)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            for symbol, signal in zip(batch, signals):
                if signal and signal.action != 'WAIT':
                    await self.execute_signal(symbol, signal)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(2)
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        self.is_running = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        await self.load_active_pairs()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.notifier.send_notification(NotificationMessage(
            title="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω",
            text=f"–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –ø–∞—Ä–∞–º: {', '.join(self.active_pairs)}",
            level="INFO"
        ))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
                await self.analyze_all_pairs()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                await self.check_open_positions()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                
                await self.notifier.send_notification(NotificationMessage(
                    title="üö® –û—à–∏–±–∫–∞ –±–æ—Ç–∞",
                    text=str(e),
                    level="ERROR"
                ))
                
                await asyncio.sleep(30)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.is_running = False
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = None

async def main():
    global bot_instance
    bot_instance = AdvancedCryptoBot()
    await bot_instance.run()

if __name__ == "__main__":
    asyncio.run(main())