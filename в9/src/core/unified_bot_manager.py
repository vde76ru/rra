"""
‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô unified_bot_manager.py
üéØ –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã: —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –æ—à–∏–±–∫–∏ API, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
"""
import asyncio
import os
import subprocess
import psutil
import signal
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from pathlib import Path

from .database import SessionLocal
from .models import Trade, Signal, BotState, TradingPair, TradeStatus
from .bot_manager import BotManager

logger = logging.getLogger(__name__)

class UnifiedBotManager:
    """
    üéØ –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
    ‚úÖ –ù–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫ NoneType
    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
    """
    
    def __init__(self):
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –±–æ—Ç–∞
        self.bot_script_path = "/var/www/www-root/data/www/systemetech.ru/main.py"
        self.venv_python = "/var/www/www-root/data/www/systemetech.ru/venv/bin/python"
        self.working_dir = "/var/www/www-root/data/www/systemetech.ru"
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self._internal_manager = BotManager()
        
        logger.info("üîß –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_comprehensive_status(self) -> Dict[str, Any]:
        """
        üìä –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
        –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç:
        ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        """
        try:
            logger.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
            
            # 1. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process_info = self._safe_check_bot_process()
            logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_info}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_status = self._safe_get_manager_status()
            logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_status}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
            db_status = self._safe_get_db_status()
            logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –ë–î: {db_status}")
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            is_synchronized = self._analyze_synchronization(process_info, manager_status, db_status)
            
            result = {
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                'process_running': process_info.get('running', False),
                'process_pid': process_info.get('pid'),
                'process_memory': process_info.get('memory', 0),
                'process_cpu': process_info.get('cpu', 0),
                'process_error': process_info.get('error'),
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                'manager_running': manager_status.get('is_running', False),
                'active_pairs': manager_status.get('active_pairs', []),
                'open_positions': manager_status.get('open_positions', 0),
                'manager_error': manager_status.get('error'),
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ë–î
                'db_state': db_status.get('is_running') if db_status else None,
                'db_start_time': db_status.get('start_time') if db_status else None,
                'total_trades': db_status.get('total_trades', 0) if db_status else 0,
                'total_profit': db_status.get('total_profit', 0) if db_status else 0,
                'db_error': db_status.get('error') if db_status else None,
                
                # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                'synchronized': is_synchronized,
                'last_check': datetime.utcnow().isoformat(),
                'status_summary': self._get_status_summary(process_info, manager_status, db_status)
            }
            
            logger.debug(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è={is_synchronized}")
            return result
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            logger.error(f"üí• {error_msg}", exc_info=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            return {
                'process_running': False,
                'manager_running': False,
                'active_pairs': [],
                'open_positions': 0,
                'synchronized': False,
                'error': error_msg,
                'last_check': datetime.utcnow().isoformat(),
                'status_summary': '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê'
            }
    
    def _safe_check_bot_process(self) -> Dict[str, Any]:
        """
        üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
        
        –ò–∑–º–µ–Ω–µ–Ω–∏—è:
        ‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç NoneType –æ—à–∏–±–æ–∫
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        ‚úÖ Fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            logger.debug("üîç –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞...")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å
            found_processes = []
            
            # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            try:
                for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info', 'cpu_percent']):
                    try:
                        proc_info = proc.info
                        cmdline = proc_info.get('cmdline')
                        
                        # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cmdline —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                        if not cmdline or not isinstance(cmdline, (list, tuple)):
                            continue
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                        cmdline_str = ' '.join(str(cmd) for cmd in cmdline if cmd)
                        
                        # –ò—â–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                        has_python = any('python' in str(cmd).lower() for cmd in cmdline if cmd)
                        has_main = any('main.py' in str(cmd) for cmd in cmdline if cmd)
                        
                        if has_python and has_main:
                            # –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å!
                            memory_info = proc_info.get('memory_info', {})
                            memory_mb = (memory_info.get('rss', 0) / 1024 / 1024) if memory_info else 0
                            
                            process_data = {
                                'running': True,
                                'pid': proc_info.get('pid'),
                                'memory': round(memory_mb, 1),
                                'cpu': proc_info.get('cpu_percent', 0),
                                'cmdline': cmdline_str,
                                'name': proc_info.get('name', 'unknown')
                            }
                            
                            found_processes.append(process_data)
                            logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: PID={process_data['pid']}, –∫–æ–º–∞–Ω–¥–∞={cmdline_str}")
                            
                    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                        # –≠—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã - –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
                        continue
                    except Exception as proc_error:
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                        logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {proc_error}")
                        continue
                        
            except Exception as search_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —á–µ—Ä–µ–∑ psutil: {search_error}")
            
            # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ PID —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
            pid_file_path = os.path.join(self.working_dir, 'bot.pid')
            if not found_processes and os.path.exists(pid_file_path):
                try:
                    with open(pid_file_path, 'r') as f:
                        saved_pid = int(f.read().strip())
                    
                    if psutil.pid_exists(saved_pid):
                        proc = psutil.Process(saved_pid)
                        logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ PID —Ñ–∞–π–ª: {saved_pid}")
                        found_processes.append({
                            'running': True,
                            'pid': saved_pid,
                            'memory': proc.memory_info().rss / 1024 / 1024,
                            'cpu': proc.cpu_percent(),
                            'source': 'pid_file'
                        })
                except Exception as pid_error:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PID —Ñ–∞–π–ª–∞: {pid_error}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if found_processes:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π)
                main_process = found_processes[0]
                logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω: PID={main_process['pid']}")
                return main_process
            else:
                logger.info("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {'running': False, 'reason': '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}"
            logger.error(f"üí• {error_msg}", exc_info=True)
            return {
                'running': False, 
                'error': error_msg,
                'reason': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏'
            }
    
    def _safe_get_manager_status(self) -> Dict[str, Any]:
        """
        üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        """
        try:
            if self._internal_manager:
                status = self._internal_manager.get_status()
                logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω: {status}")
                return status
            else:
                return {
                    'is_running': False,
                    'active_pairs': [],
                    'open_positions': 0,
                    'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                }
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'is_running': False,
                'active_pairs': [],
                'open_positions': 0,
                'error': error_msg
            }
    
    def _safe_get_db_status(self) -> Optional[Dict[str, Any]]:
        """
        üíæ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        db = None
        try:
            db = SessionLocal()
            state = db.query(BotState).first()
            
            if state:
                result = {
                    'is_running': state.is_running,
                    'start_time': state.start_time,
                    'stop_time': getattr(state, 'stop_time', None),
                    'total_trades': getattr(state, 'total_trades', 0) or 0,
                    'total_profit': getattr(state, 'total_profit', 0) or 0,
                    'current_balance': getattr(state, 'current_balance', 0) or 0
                }
                logger.debug(f"üíæ –°—Ç–∞—Ç—É—Å –∏–∑ –ë–î –ø–æ–ª—É—á–µ–Ω: –∑–∞–ø—É—â–µ–Ω={result['is_running']}")
                return result
            else:
                logger.warning("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ë–î: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {'error': error_msg}
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
    
    def _analyze_synchronization(self, process_info: Dict, manager_status: Dict, db_status: Optional[Dict]) -> bool:
        """
        üîÑ –£–õ–£–ß–®–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        
        –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç:
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            process_running = process_info.get('running', False)
            manager_running = manager_status.get('is_running', False)
            db_running = db_status.get('is_running', False) if db_status and 'error' not in db_status else False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            all_states = [process_running, manager_running, db_running]
            unique_states = set(all_states)
            is_synchronized = len(unique_states) == 1
            
            if not is_synchronized:
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                logger.warning(
                    f"‚ö†Ô∏è –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê:\n"
                    f"   üîπ –ü—Ä–æ—Ü–µ—Å—Å: {process_running} ({'–∑–∞–ø—É—â–µ–Ω' if process_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})\n"
                    f"   üîπ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_running} ({'–∞–∫—Ç–∏–≤–µ–Ω' if manager_running else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})\n"
                    f"   üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_running} ({'–∑–∞–ø—É—â–µ–Ω' if db_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})\n"
                    f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è"
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if db_running and not process_running and not manager_running:
                    logger.info("üîç –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ –ë–î –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
                elif process_running and not manager_running:
                    logger.info("üîç –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                elif manager_running and not process_running:
                    logger.info("üîç –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç")
            else:
                logger.debug(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {'–∑–∞–ø—É—â–µ–Ω' if process_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
            return is_synchronized
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _get_status_summary(self, process_info: Dict, manager_status: Dict, db_status: Optional[Dict]) -> str:
        """
        üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            process_running = process_info.get('running', False)
            manager_running = manager_status.get('is_running', False)
            db_running = db_status.get('is_running', False) if db_status and 'error' not in db_status else False
            
            if process_running and manager_running and db_running:
                return "üü¢ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢"
            elif not process_running and not manager_running and not db_running:
                return "üî¥ –í–°–ï –°–ò–°–¢–ï–ú–´ –û–°–¢–ê–ù–û–í–õ–ï–ù–´"
            elif db_running and not process_running:
                return "üü° –¢–†–ï–ë–£–ï–¢–°–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø (–ë–î –¥—É–º–∞–µ—Ç —á—Ç–æ –∑–∞–ø—É—â–µ–Ω)"
            elif process_running and not manager_running:
                return "üü° –ü–†–û–ë–õ–ï–ú–ê –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú"
            else:
                return "üü° –ß–ê–°–¢–ò–ß–ù–ê–Ø –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø"
                
        except Exception:
            return "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï"
    
    async def start_bot(self) -> Dict[str, Any]:
        """
        üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        
        –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—É—Å–∫–∞
        ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
        """
        try:
            logger.info("üöÄ === –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê ===")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_status = self.get_comprehensive_status()
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_status['status_summary']}")
            
            # 2. –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if current_status['process_running']:
                logger.info(f"‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID: {current_status['process_pid']}")
                return {
                    'success': False,
                    'message': f'–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {current_status["process_pid"]})',
                    'pid': current_status['process_pid'],
                    'already_running': True
                }
            
            # 3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
            if not current_status['synchronized']:
                logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
                sync_result = self.sync_state()
                if not sync_result['success']:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {sync_result.get('error')}")
                else:
                    logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã
            validation_result = self._validate_system()
            if not validation_result['valid']:
                return {
                    'success': False,
                    'message': f'–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {validation_result["error"]}'
                }
            
            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            logger.info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞...")
            process_result = await self._launch_bot_process()
            
            if process_result['success']:
                # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
                logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                await self._update_db_state(True)
                
                # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await asyncio.sleep(2)
                final_status = self.get_comprehensive_status()
                
                logger.info(f"üéâ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù! PID: {process_result['pid']}")
                return {
                    'success': True,
                    'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                    'pid': process_result['pid'],
                    'status': final_status['status_summary']
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_result['error']}")
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {process_result["error"]}',
                    'details': process_result.get('details', {})
                }
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"üí• {error_msg}", exc_info=True)
            return {
                'success': False,
                'message': error_msg
            }
    
    def _validate_system(self) -> Dict[str, Any]:
        """
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
            if not os.path.exists(self.venv_python):
                return {
                    'valid': False,
                    'error': f'Python –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.venv_python}'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞
            if not os.path.exists(self.bot_script_path):
                return {
                    'valid': False,
                    'error': f'–°–∫—Ä–∏–ø—Ç –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.bot_script_path}'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if not os.path.exists(self.working_dir):
                return {
                    'valid': False,
                    'error': f'–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.working_dir}'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not os.access(self.venv_python, os.X_OK):
                return {
                    'valid': False,
                    'error': f'–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {self.venv_python}'
                }
            
            return {'valid': True}
            
        except Exception as e:
            return {
                'valid': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {str(e)}'
            }
    
    async def _launch_bot_process(self) -> Dict[str, Any]:
        """
        üîß –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
            cmd = [self.venv_python, "main.py"]
            logger.info(f"üîß –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                cmd,
                cwd=self.working_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                stdin=subprocess.PIPE,
                start_new_session=True,  # –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å–µ—Å—Å–∏—è
                env=os.environ.copy()  # –ù–∞—Å–ª–µ–¥—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            )
            
            logger.info(f"‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
            
            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            initialization_time = 5  # —Å–µ–∫—É–Ω–¥
            for i in range(initialization_time):
                await asyncio.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                if process.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è - –ø–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
                    try:
                        stdout, stderr = process.communicate(timeout=5)
                        stdout_text = stdout.decode('utf-8', errors='ignore') if stdout else ''
                        stderr_text = stderr.decode('utf-8', errors='ignore') if stderr else ''
                    except subprocess.TimeoutExpired:
                        stdout_text = "–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞"
                        stderr_text = "–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫"
                    
                    error_message = stderr_text or stdout_text or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    
                    return {
                        'success': False,
                        'error': f'–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {error_message}',
                        'details': {
                            'return_code': process.returncode,
                            'stdout': stdout_text,
                            'stderr': stderr_text
                        }
                    }
                
                logger.debug(f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è... {i+1}/{initialization_time}")
            
            # –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return {
                'success': True,
                'pid': process.pid,
                'message': '–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}'
            }
    
    async def stop_bot(self) -> Dict[str, Any]:
        """
        ‚èπÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        
        –£–ª—É—á—à–µ–Ω–∏—è:
        ‚úÖ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (–º—è–≥–∫–∞—è -> –∂–µ—Å—Ç–∫–∞—è)
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        try:
            logger.info("üõë === –ù–ê–ß–ò–ù–ê–ï–ú –û–°–¢–ê–ù–û–í–ö–£ –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê ===")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_status = self.get_comprehensive_status()
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_status['status_summary']}")
            
            if not current_status['process_running'] and not current_status['manager_running']:
                # –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ë–î
                if current_status.get('db_state'):
                    logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î...")
                    await self._update_db_state(False)
                
                return {
                    'success': True,
                    'message': '–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    'was_running': False
                }
            
            # 2. –ü—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
            if current_status['manager_running']:
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –º—è–≥–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä...")
                try:
                    stop_result = await asyncio.wait_for(
                        self._internal_manager.stop(), 
                        timeout=15.0
                    )
                    if stop_result:
                        logger.info("‚úÖ –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                    else:
                        logger.warning("‚ö†Ô∏è –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ False")
                except asyncio.TimeoutError:
                    logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –º—è–≥–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º—è–≥–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            
            process_info = self._safe_check_bot_process()
            if process_info.get('running'):
                logger.info("üî® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                termination_result = await self._force_terminate_process(process_info.get('pid'))
                
                if not termination_result['success']:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {termination_result['error']}")
                    return {
                        'success': False,
                        'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç: {termination_result["error"]}'
                    }
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            await self._update_db_state(False)
            
            # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await asyncio.sleep(2)
            final_status = self.get_comprehensive_status()
            
            if final_status['synchronized'] and not final_status['process_running']:
                logger.info("üéâ –ë–û–¢ –£–°–ü–ï–®–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù!")
                return {
                    'success': True,
                    'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    'status': final_status['status_summary']
                }
            else:
                logger.warning("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")
                return {
                    'success': True,
                    'message': '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
                    'sync_needed': True
                }
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.error(f"üí• {error_msg}", exc_info=True)
            return {
                'success': False,
                'message': error_msg
            }
    
    async def _force_terminate_process(self, pid: int) -> Dict[str, Any]:
        """
        üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        try:
            if not pid:
                return {'success': False, 'error': 'PID –Ω–µ —É–∫–∞–∑–∞–Ω'}
            
            logger.info(f"üî® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
            
            # –®–∞–≥ 1: –ú—è–≥–∫–∏–π —Å–∏–≥–Ω–∞–ª SIGTERM
            try:
                os.kill(pid, signal.SIGTERM)
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
                
                # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
                for _ in range(10):
                    await asyncio.sleep(1)
                    if not psutil.pid_exists(pid):
                        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        return {'success': True, 'method': 'SIGTERM'}
                
            except ProcessLookupError:
                logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return {'success': True, 'method': 'already_dead'}
            
            # –®–∞–≥ 2: –ñ–µ—Å—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª SIGKILL
            try:
                if psutil.pid_exists(pid):
                    logger.warning(f"üíÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
                    os.kill(pid, signal.SIGKILL)
                    
                    # –ñ–¥–µ–º –µ—â–µ 5 —Å–µ–∫—É–Ω–¥
                    for _ in range(5):
                        await asyncio.sleep(1)
                        if not psutil.pid_exists(pid):
                            logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                            return {'success': True, 'method': 'SIGKILL'}
                    
                    return {'success': False, 'error': f'–ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ SIGKILL'}
                else:
                    return {'success': True, 'method': 'disappeared'}
                    
            except ProcessLookupError:
                return {'success': True, 'method': 'killed'}
            except Exception as e:
                return {'success': False, 'error': f'–û—à–∏–±–∫–∞ SIGKILL: {str(e)}'}
                
        except Exception as e:
            return {'success': False, 'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {str(e)}'}
    
    async def _update_db_state(self, is_running: bool):
        """
        üíæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î
        
        –£–ª—É—á—à–µ–Ω–∏—è:
        ‚úÖ –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        db = None
        try:
            logger.debug(f"üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î: {'–∑–∞–ø—É—â–µ–Ω' if is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
            db = SessionLocal()
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            state = db.query(BotState).first()
            
            if not state:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                logger.info("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î")
                state = BotState()
                db.add(state)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            old_state = state.is_running
            state.is_running = is_running
            
            current_time = datetime.utcnow()
            if is_running:
                state.start_time = current_time
                logger.debug(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time}")
            else:
                state.stop_time = current_time
                logger.debug(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_time}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            change_info = "—Å–æ–∑–¥–∞–Ω–æ" if old_state is None else ("–∏–∑–º–µ–Ω–µ–Ω–æ" if old_state != is_running else "–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î {change_info}: {'–∑–∞–ø—É—â–µ–Ω' if is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            if db:
                try:
                    db.rollback()
                    logger.debug("üîÑ –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except:
                    pass
            raise Exception(error_msg)
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
    
    def sync_state(self) -> Dict[str, Any]:
        """
        üîÑ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
        ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"
        ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ –µ–¥–∏–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
        """
        try:
            logger.info("üîÑ === –ù–ê–ß–ò–ù–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ –°–û–°–¢–û–Ø–ù–ò–ô ===")
            
            # 1. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            process_info = self._safe_check_bot_process()
            manager_status = self._safe_get_manager_status()
            db_status = self._safe_get_db_status()
            
            process_running = process_info.get('running', False)
            manager_running = manager_status.get('is_running', False)
            db_running = db_status.get('is_running', False) if db_status and 'error' not in db_status else False
            
            logger.info(
                f"üìä –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:\n"
                f"   üîπ –ü—Ä–æ—Ü–µ—Å—Å: {process_running}\n"
                f"   üîπ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_running}\n"
                f"   üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_running}"
            )
            
            # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã"
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ü—Ä–æ—Ü–µ—Å—Å > –ú–µ–Ω–µ–¥–∂–µ—Ä > –ë–î
            if process_running:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω - —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
                target_state = True
                truth_source = "–ø—Ä–æ—Ü–µ—Å—Å"
                logger.info("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã: –ü–†–û–¶–ï–°–° (–±–æ—Ç —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            elif manager_running and not process_running:
                # –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—É–º–∞–µ—Ç —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç - –æ—à–∏–±–∫–∞
                target_state = False
                truth_source = "—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"
                logger.info("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã: –†–ï–ê–õ–¨–ù–û–°–¢–¨ (–ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç)")
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                target_state = False
                truth_source = "—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"
                logger.info("üéØ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã: –†–ï–ê–õ–¨–ù–û–°–¢–¨ (–Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            
            # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            changes_made = []
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ë–î
            if db_running != target_state:
                try:
                    db = SessionLocal()
                    try:
                        state = db.query(BotState).first()
                        if not state:
                            state = BotState()
                            db.add(state)
                        
                        state.is_running = target_state
                        if target_state:
                            state.start_time = datetime.utcnow()
                        else:
                            state.stop_time = datetime.utcnow()
                        
                        db.commit()
                        changes_made.append(f"–ë–î: {db_running} ‚Üí {target_state}")
                        logger.info(f"üíæ –ë–î —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {target_state}")
                        
                    finally:
                        db.close()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                    changes_made.append(f"–ë–î: –û–®–ò–ë–ö–ê - {str(e)}")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
            if manager_running != target_state:
                try:
                    self._internal_manager.is_running = target_state
                    changes_made.append(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_running} ‚Üí {target_state}")
                    logger.info(f"üîß –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {target_state}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
                    changes_made.append(f"–ú–µ–Ω–µ–¥–∂–µ—Ä: –û–®–ò–ë–ö–ê - {str(e)}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if changes_made:
                changes_text = "; ".join(changes_made)
                message = f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ({truth_source}): {changes_text}'
            else:
                message = '–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'
            
            logger.info(f"‚úÖ {message}")
            
            return {
                'success': True,
                'is_running': target_state,
                'changed': len(changes_made) > 0,
                'changes': changes_made,
                'truth_source': truth_source,
                'message': message
            }
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
            logger.error(f"üí• {error_msg}", exc_info=True)
            return {
                'success': False,
                'error': error_msg
            }
    
    # üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
    
    def load_state(self):
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            if self._internal_manager:
                self._internal_manager._load_state()
                logger.info("üì• –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def analyze_pair_test(self, symbol: str):
        """üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            logger.info(f"üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã {symbol}")
            
            if not self._internal_manager:
                logger.error("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
            
            result = await self._internal_manager._analyze_pair(symbol)
            
            if result:
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {result.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f})")
            else:
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {symbol}: WAIT (–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞)")
            
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    async def update_pairs(self, pairs: List[str]) -> Dict[str, Any]:
        """üí± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            logger.info(f"üí± –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
            
            if not self._internal_manager:
                raise Exception("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            await self._internal_manager.update_pairs(pairs)
            
            message = f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {", ".join(pairs)}'
            logger.info(f"‚úÖ {message}")
            
            return {
                'success': True,
                'pairs': pairs,
                'message': message
            }
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }
    
    async def close_position(self, symbol: str) -> Dict[str, Any]:
        """üì§ –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}")
            
            if not self._internal_manager:
                raise Exception("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            result = await self._internal_manager.manual_close_position(symbol)
            
            message = f'–ü–æ–∑–∏—Ü–∏—è {symbol} {"–∑–∞–∫—Ä—ã—Ç–∞" if result else "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}'
            logger.info(f"üì§ {message}")
            
            return {
                'success': result,
                'message': message
            }
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg
            }

# üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ–¥–∏–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
unified_bot_manager = UnifiedBotManager()