#!/usr/bin/env python3
# test_setup.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Trading Bot\n")

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
required_env = [
    'BYBIT_API_KEY',
    'BYBIT_API_SECRET', 
    'DB_HOST',
    'DB_NAME',
    'DB_USER',
    'DB_PASSWORD'
]

env_ok = True
for var in required_env:
    value = os.getenv(var)
    if value:
        if 'PASSWORD' in var or 'SECRET' in var:
            print(f"   ‚úÖ {var}: ***hidden***")
        else:
            print(f"   ‚úÖ {var}: {value}")
    else:
        print(f"   ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
        env_ok = False

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
try:
    from src.core.database import engine
    from sqlalchemy import text
    
    with engine.connect() as conn:
        result = conn.execute(text("SELECT 1"))
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        result = conn.execute(text("SHOW TABLES"))
        tables = [row[0] for row in result]
        if tables:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"      - {table}")
        else:
            print("   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_db.py")
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis:")
try:
    import redis
    r = redis.Redis(host='localhost', port=6379, decode_responses=True)
    r.ping()
    print("   ‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
except Exception as e:
    print(f"   ‚ùå Redis –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API
print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit API:")
try:
    from src.exchange.bybit_client import HumanizedBybitClient
    client = HumanizedBybitClient()
    
    if client.testnet:
        print("   ‚úÖ –†–µ–∂–∏–º: TESTNET (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)")
    else:
        print("   ‚ö†Ô∏è  –†–µ–∂–∏–º: MAINNET (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!)")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    import asyncio
    async def check_connection():
        try:
            balance = await client.fetch_balance()
            if balance:
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return False
    
    asyncio.run(check_connection())
    
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Bybit –∫–ª–∏–µ–Ω—Ç–∞: {e}")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
try:
    from src.strategies.simple_momentum import SimpleMomentumStrategy
    strategy = SimpleMomentumStrategy()
    print("   ‚úÖ Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

# –ò—Ç–æ–≥
print("\n" + "="*50)
if env_ok:
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –Ω–∞ https://testnet.bybit.com")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_db.py")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./start_bot.sh")
else:
    print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")