"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/bot/risk_manager.py
"""
import logging
from typing import Dict, List
from datetime import datetime, timedelta

from ..core.config import config
from ..core.models import Signal, Trade

logger = logging.getLogger(__name__)

class RiskManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.max_positions = config.MAX_POSITIONS
        self.max_daily_loss_percent = 5.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ 5%
        self.max_position_size_percent = config.MAX_POSITION_SIZE_PERCENT
        self.min_risk_reward_ratio = config.MIN_RISK_REWARD_RATIO
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.daily_stats = {
            'trades': 0,
            'wins': 0,
            'losses': 0,
            'total_profit': 0,
            'last_reset': datetime.now().date()
        }
        
    def check_signal(self, signal: Signal, open_positions: Dict[str, Trade], current_balance: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        self._reset_daily_stats_if_needed()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if len(open_positions) >= self.max_positions:
            logger.info(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}/{self.max_positions}")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫
        if self.daily_stats['trades'] >= config.MAX_DAILY_TRADES:
            logger.info(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {self.daily_stats['trades']}/{config.MAX_DAILY_TRADES}")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞
        daily_loss_percent = (self.daily_stats['total_profit'] / current_balance) * 100
        if daily_loss_percent < -self.max_daily_loss_percent:
            logger.info(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤: {daily_loss_percent:.2f}%")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        if signal.stop_loss and signal.take_profit:
            risk = abs(signal.price - signal.stop_loss)
            reward = abs(signal.take_profit - signal.price)
            
            if risk > 0:
                risk_reward_ratio = reward / risk
                if risk_reward_ratio < self.min_risk_reward_ratio:
                    logger.info(f"üö´ –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {risk_reward_ratio:.2f}")
                    return False
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if signal.symbol in open_positions:
            logger.info(f"üö´ –ü–æ–∑–∏—Ü–∏—è –ø–æ {signal.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return False
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if signal.confidence < 0.6:
            logger.info(f"üö´ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ: {signal.confidence:.2f}")
            return False
        
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
        return True
    
    def update_statistics(self, result: str, profit: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.daily_stats['trades'] += 1
        
        if result == 'win':
            self.daily_stats['wins'] += 1
        else:
            self.daily_stats['losses'] += 1
        
        self.daily_stats['total_profit'] += profit
        
        win_rate = (self.daily_stats['wins'] / self.daily_stats['trades']) * 100 if self.daily_stats['trades'] > 0 else 0
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è: –°–¥–µ–ª–æ–∫: {self.daily_stats['trades']}, "
                   f"Win rate: {win_rate:.1f}%, P&L: ${self.daily_stats['total_profit']:.2f}")
    
    def _reset_daily_stats_if_needed(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
        today = datetime.now().date()
        if today != self.daily_stats['last_reset']:
            logger.info("üìÖ –ù–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            self.daily_stats = {
                'trades': 0,
                'wins': 0,
                'losses': 0,
                'total_profit': 0,
                'last_reset': today
            }
    
    def calculate_position_size(self, signal: Signal, balance: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞"""
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = balance * (self.max_position_size_percent / 100)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        position_size *= signal.confidence
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if self.daily_stats['trades'] > 5:
            win_rate = self.daily_stats['wins'] / self.daily_stats['trades']
            if win_rate < 0.3:  # –ï—Å–ª–∏ win rate < 30%, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
                position_size *= 0.5
        
        # –ù–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        max_size = balance * (self.max_position_size_percent / 100)
        position_size = min(position_size, max_size)
        
        return position_size