"""
–ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/bot/manager.py
"""
import asyncio
import logging
import psutil
import os
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from enum import Enum
import random

from ..core.config import config
from ..core.database import SessionLocal
from ..core.models import Trade, Signal, BotState, TradingPair, TradeStatus, OrderSide
from ..exchange.client import ExchangeClient
from ..strategies.factory import StrategyFactory
from ..analysis.market_analyzer import MarketAnalyzer
from ..notifications.telegram import TelegramNotifier
from .trader import Trader
from .risk_manager import RiskManager

logger = logging.getLogger(__name__)

class BotStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –±–æ—Ç–∞"""
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"

class BotManager:
    """
    –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        """Singleton –ø–∞—Ç—Ç–µ—Ä–Ω"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"""
        if not BotManager._initialized:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.exchange = ExchangeClient()
            self.analyzer = MarketAnalyzer()
            self.notifier = TelegramNotifier()
            self.strategy_factory = StrategyFactory()
            self.trader = Trader(self.exchange)
            self.risk_manager = RiskManager()
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ
            self.status = BotStatus.STOPPED
            self.positions: Dict[str, Trade] = {}
            self.active_pairs: List[str] = []
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
            self._main_task: Optional[asyncio.Task] = None
            self._stop_event = asyncio.Event()
            self._process_info: Dict = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.start_time: Optional[datetime] = None
            self.cycles_count = 0
            self.trades_today = 0
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ë–î
            self._load_state_from_db()
            
            BotManager._initialized = True
            logger.info("‚úÖ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú ===
    
    async def start(self) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.status in [BotStatus.RUNNING, BotStatus.STARTING]:
            return False, f"–ë–æ—Ç —É–∂–µ {self.status.value}"
        
        try:
            self.status = BotStatus.STARTING
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            if not await self._pre_start_checks():
                raise ValueError("–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._load_configuration()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            self._update_bot_state_db(is_running=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self._stop_event.clear()
            self._main_task = asyncio.create_task(self._trading_loop())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            self._update_process_info()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notifier.send_startup_message(
                pairs=self.active_pairs,
                mode='TESTNET' if config.BYBIT_TESTNET else 'MAINNET'
            )
            
            self.status = BotStatus.RUNNING
            self.start_time = datetime.now()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
            
        except Exception as e:
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}", exc_info=True)
            self._update_bot_state_db(is_running=False)
            return False, error_msg
    
    async def stop(self) -> Tuple[bool, str]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.status not in [BotStatus.RUNNING, BotStatus.ERROR]:
            return False, f"–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: {self.status.value})"
        
        try:
            self.status = BotStatus.STOPPING
            logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
            
            # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self._stop_event.set()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            if self._main_task:
                try:
                    await asyncio.wait_for(self._main_task, timeout=10.0)
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    self._main_task.cancel()
                    try:
                        await self._main_task
                    except asyncio.CancelledError:
                        pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._close_all_positions("Bot shutdown")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            self._update_bot_state_db(is_running=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._save_statistics()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notifier.send_shutdown_message(
                runtime=(datetime.now() - self.start_time) if self.start_time else None,
                trades_count=self.trades_today
            )
            
            self.status = BotStatus.STOPPED
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg}", exc_info=True)
            return False, error_msg
    
    # === –û–°–ù–û–í–ù–û–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ ===
    
    async def _trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        while not self._stop_event.is_set():
            try:
                self.cycles_count += 1
                cycle_start = datetime.now()
                
                logger.debug(f"üìä –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ #{self.cycles_count}")
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                if not self._check_trading_limits():
                    logger.info("üìà –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    await self._human_delay(300, 600)  # –ü–∞—É–∑–∞ 5-10 –º–∏–Ω—É—Ç
                    continue
                
                # 2. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                await self._update_balance()
                
                # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
                for symbol in self.active_pairs:
                    if self._stop_event.is_set():
                        break
                    
                    try:
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É
                        market_data = await self.analyzer.analyze_symbol(symbol)
                        if not market_data:
                            continue
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                        signal = await self._generate_signal(symbol, market_data)
                        if not signal:
                            continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
                        self._save_signal(signal)
                        
                        # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if signal.action in ['BUY', 'SELL'] and signal.confidence >= 0.6:
                            await self._execute_signal_human_like(signal)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                        await self.notifier.send_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {str(e)}")
                
                # 4. –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                await self._manage_positions()
                
                # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_statistics()
                
                # 6. –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                cycle_duration = (datetime.now() - cycle_start).total_seconds()
                logger.debug(f"‚è±Ô∏è –¶–∏–∫–ª #{self.cycles_count} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {cycle_duration:.1f}—Å")
                
                await self._human_delay()
                
            except asyncio.CancelledError:
                logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                await self.notifier.send_error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {str(e)}")
                await self._human_delay(60, 180)  # –ü–∞—É–∑–∞ 1-3 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("üèÅ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –ò–°–ü–û–õ–ù–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í ===
    
    async def _generate_signal(self, symbol: str, market_data: Dict) -> Optional[Signal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø–∞—Ä—ã
            pair_config = self._get_pair_config(symbol)
            strategy = self.strategy_factory.create(pair_config.strategy)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis = await strategy.analyze(market_data['df'], symbol)
            
            if analysis.action == 'WAIT':
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = Signal(
                symbol=symbol,
                action=analysis.action,
                confidence=analysis.confidence,
                price=market_data['current_price'],
                stop_loss=analysis.stop_loss,
                take_profit=analysis.take_profit,
                strategy=strategy.name,
                reason=analysis.reason
            )
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def _execute_signal_human_like(self, signal: Signal):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
        if not self.risk_manager.check_signal(signal, self.positions, self._get_current_balance()):
            logger.info(f"üö´ –°–∏–≥–Ω–∞–ª {signal.symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
            return
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        thinking_time = random.uniform(5, 20)
        logger.debug(f"ü§î –û–±–¥—É–º—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª {signal.symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {thinking_time:.1f}—Å")
        await asyncio.sleep(thinking_time)
        
        # –ò–Ω–æ–≥–¥–∞ "—Å–æ–º–Ω–µ–≤–∞–µ–º—Å—è" –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª
        if config.ENABLE_HUMAN_MODE and random.random() < 0.1:  # 10% —à–∞–Ω—Å
            logger.info(f"üòï –†–µ—à–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol} (—Å–æ–º–Ω–µ–Ω–∏—è)")
            return
        
        # –ò–Ω–æ–≥–¥–∞ "–æ—Ç–≤–ª–µ–∫–∞–µ–º—Å—è" –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
        if config.ENABLE_HUMAN_MODE and random.random() < 0.05:  # 5% —à–∞–Ω—Å
            delay = random.uniform(30, 120)
            logger.info(f"üì± –û—Ç–≤–ª–µ–∫–ª–∏—Å—å, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {delay:.0f}—Å")
            await asyncio.sleep(delay)
        
        # –ò—Å–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ trader
        trade = await self.trader.execute_signal(signal)
        if trade:
            self.positions[signal.symbol] = trade
            signal.executed = True
            signal.executed_at = datetime.utcnow()
            signal.trade_id = trade.id
            self._update_signal_db(signal)
            
            await self.notifier.send_trade_opened(
                symbol=signal.symbol,
                side=signal.action,
                amount=trade.quantity,
                price=trade.entry_price
            )
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    
    async def _manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        for symbol, trade in list(self.positions.items()):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                ticker = await self.exchange.fetch_ticker(symbol)
                current_price = ticker['last']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                should_close = False
                reason = ""
                
                if trade.side == OrderSide.BUY:
                    if current_price <= trade.stop_loss:
                        should_close = True
                        reason = "Stop loss triggered"
                    elif current_price >= trade.take_profit:
                        should_close = True
                        reason = "Take profit triggered"
                else:  # SELL
                    if current_price >= trade.stop_loss:
                        should_close = True
                        reason = "Stop loss triggered"
                    elif current_price <= trade.take_profit:
                        should_close = True
                        reason = "Take profit triggered"
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if should_close:
                    await self._close_position(trade, current_price, reason)
                    del self.positions[symbol]
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {e}")
    
    async def _close_position(self, trade: Trade, current_price: float, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ exchange
            result = await self.trader.close_position(trade, current_price)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º trade
                trade.exit_price = current_price
                trade.status = TradeStatus.CLOSED
                trade.closed_at = datetime.utcnow()
                trade.calculate_profit()
                trade.notes = reason
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                self._update_trade_db(trade)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º
                await self.notifier.send_trade_closed(
                    symbol=trade.symbol,
                    side=trade.side.value,
                    profit=trade.profit,
                    reason=reason
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if trade.profit > 0:
                    self.risk_manager.update_statistics('win', trade.profit)
                else:
                    self.risk_manager.update_statistics('loss', abs(trade.profit))
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    async def _pre_start_checks(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not config.BYBIT_API_KEY or config.BYBIT_API_KEY == 'your_testnet_api_key_here':
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        try:
            await self.exchange.test_connection()
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        try:
            db = SessionLocal()
            db.execute("SELECT 1")
            db.close()
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
            return False
        
        return True
    
    async def _load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        db = SessionLocal()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
            pairs = db.query(TradingPair).filter(
                TradingPair.is_active == True
            ).all()
            
            self.active_pairs = [pair.symbol for pair in pairs]
            
            if not self.active_pairs:
                self.active_pairs = config.TRADING_PAIRS
                logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {self.active_pairs}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.OPEN
            ).all()
            
            self.positions = {trade.symbol: trade for trade in open_trades}
            
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.active_pairs)} –ø–∞—Ä, {len(self.positions)} –ø–æ–∑–∏—Ü–∏–π")
            
        finally:
            db.close()
    
    async def _human_delay(self, min_seconds: float = None, max_seconds: float = None):
        """–£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        if not config.ENABLE_HUMAN_MODE:
            await asyncio.sleep(60)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–∏–Ω—É—Ç–∞
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        min_delay = min_seconds or config.MIN_DELAY_SECONDS
        max_delay = max_seconds or config.MAX_DELAY_SECONDS
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = random.uniform(min_delay, max_delay)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (—á–µ–ª–æ–≤–µ–∫ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–æ—á—å—é)
        hour = datetime.now().hour
        if 0 <= hour < 6:  # –ù–æ—á—å
            delay *= random.uniform(1.5, 2.5)
        elif 6 <= hour < 9:  # –£—Ç—Ä–æ
            delay *= random.uniform(1.2, 1.5)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º "—É—Å—Ç–∞–ª–æ—Å—Ç—å" (–±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ = –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞)
        if self.cycles_count > 100:
            fatigue_factor = min(2.0, 1 + (self.cycles_count - 100) / 200)
            delay *= fatigue_factor
        
        # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–ø–µ—Ä–µ—Ä—ã–≤—ã)
        if random.random() < 0.02:  # 2% —à–∞–Ω—Å
            delay = random.uniform(300, 900)  # 5-15 –º–∏–Ω—É—Ç
            logger.info(f"‚òï –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –û—á–µ–Ω—å —Ä–µ–¥–∫–æ –¥–µ–ª–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–æ–±–µ–¥/–æ—Ç–¥—ã—Ö)
        elif random.random() < 0.005:  # 0.5% —à–∞–Ω—Å
            delay = random.uniform(1800, 3600)  # 30-60 –º–∏–Ω—É—Ç
            logger.info(f"üçî –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        remaining = delay
        while remaining > 0 and not self._stop_event.is_set():
            sleep_time = min(1.0, remaining)
            await asyncio.sleep(sleep_time)
            remaining -= sleep_time
    
    # === –†–ê–ë–û–¢–ê –° –ë–î ===
    
    def _load_state_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        db = SessionLocal()
        try:
            bot_state = db.query(BotState).first()
            if bot_state and bot_state.is_running:
                logger.warning("‚ö†Ô∏è –ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–∏")
                bot_state.is_running = False
                db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        finally:
            db.close()
    
    def _update_bot_state_db(self, is_running: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –≤ –ë–î"""
        db = SessionLocal()
        try:
            state = db.query(BotState).first()
            if not state:
                state = BotState()
                db.add(state)
            
            state.is_running = is_running
            if is_running:
                state.start_time = datetime.utcnow()
            else:
                state.stop_time = datetime.utcnow()
            
            state.total_trades = self.trades_today
            state.current_balance = self._get_current_balance()
            
            db.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {e}")
        finally:
            db.close()
    
    def _save_signal(self, signal: Signal):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        db = SessionLocal()
        try:
            db.add(signal)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
        finally:
            db.close()
    
    def _update_signal_db(self, signal: Signal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –ë–î"""
        db = SessionLocal()
        try:
            db.merge(signal)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
        finally:
            db.close()
    
    def _update_trade_db(self, trade: Trade):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–î"""
        db = SessionLocal()
        try:
            db.merge(trade)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        finally:
            db.close()
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _check_trading_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        return self.trades_today < config.MAX_DAILY_TRADES
    
    async def _update_balance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance = await self.exchange.fetch_balance()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            db = SessionLocal()
            try:
                for currency, amount in balance.items():
                    if amount['total'] > 0:
                        balance_record = Balance(
                            currency=currency,
                            total=amount['total'],
                            free=amount['free'],
                            used=amount['used']
                        )
                        db.add(balance_record)
                db.commit()
            finally:
                db.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def _get_current_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ USDT"""
        db = SessionLocal()
        try:
            latest_balance = db.query(Balance).filter(
                Balance.currency == 'USDT'
            ).order_by(Balance.timestamp.desc()).first()
            
            return latest_balance.total if latest_balance else config.INITIAL_CAPITAL
        finally:
            db.close()
    
    def _get_pair_config(self, symbol: str) -> TradingPair:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—ã"""
        db = SessionLocal()
        try:
            pair = db.query(TradingPair).filter(
                TradingPair.symbol == symbol
            ).first()
            
            if not pair:
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                pair = TradingPair(
                    symbol=symbol,
                    strategy='multi_indicator',
                    stop_loss_percent=config.STOP_LOSS_PERCENT,
                    take_profit_percent=config.TAKE_PROFIT_PERCENT
                )
            
            return pair
        finally:
            db.close()
    
    def _update_process_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            process = psutil.Process()
            self._process_info = {
                'pid': process.pid,
                'memory_mb': round(process.memory_info().rss / 1024 / 1024, 2),
                'cpu_percent': process.cpu_percent(),
                'threads': process.num_threads(),
                'create_time': datetime.fromtimestamp(process.create_time())
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
    
    def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        db = SessionLocal()
        try:
            # –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            self.trades_today = db.query(Trade).filter(
                Trade.created_at >= today_start
            ).count()
            
        finally:
            db.close()
    
    def _save_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        db = SessionLocal()
        try:
            state = db.query(BotState).first()
            if state:
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_trades = db.query(Trade).count()
                profitable_trades = db.query(Trade).filter(
                    Trade.profit > 0
                ).count()
                total_profit = db.query(Trade).with_entities(
                    db.func.sum(Trade.profit)
                ).scalar() or 0
                
                state.total_trades = total_trades
                state.profitable_trades = profitable_trades
                state.total_profit = total_profit
                
                db.commit()
        finally:
            db.close()
    
    async def _close_all_positions(self, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        for symbol, trade in list(self.positions.items()):
            try:
                ticker = await self.exchange.fetch_ticker(symbol)
                current_price = ticker['last']
                await self._close_position(trade, current_price, reason)
                del self.positions[symbol]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø API ===
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        return {
            'status': self.status.value,
            'is_running': self.status == BotStatus.RUNNING,
            'active_pairs': self.active_pairs,
            'open_positions': len(self.positions),
            'positions_details': {
                symbol: {
                    'side': trade.side.value,
                    'entry_price': trade.entry_price,
                    'quantity': trade.quantity,
                    'profit': trade.profit
                }
                for symbol, trade in self.positions.items()
            },
            'statistics': {
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'uptime': str(datetime.now() - self.start_time) if self.start_time else None,
                'cycles_count': self.cycles_count,
                'trades_today': self.trades_today
            },
            'process_info': self._process_info,
            'config': {
                'mode': 'TESTNET' if config.BYBIT_TESTNET else 'MAINNET',
                'max_positions': config.MAX_POSITIONS,
                'human_mode': config.ENABLE_HUMAN_MODE
            }
        }
    
    async def update_pairs(self, pairs: List[str]) -> Tuple[bool, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            db = SessionLocal()
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
            db.query(TradingPair).update({TradingPair.is_active: False})
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            for symbol in pairs:
                pair = db.query(TradingPair).filter(
                    TradingPair.symbol == symbol
                ).first()
                
                if pair:
                    pair.is_active = True
                else:
                    pair = TradingPair(
                        symbol=symbol,
                        is_active=True,
                        strategy='multi_indicator'
                    )
                    db.add(pair)
            
            db.commit()
            db.close()
            
            self.active_pairs = pairs
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
            
            return True, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(pairs)}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")
            return False, str(e)
    
    async def close_position(self, symbol: str) -> Tuple[bool, str]:
        """–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.positions:
            return False, f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            trade = self.positions[symbol]
            ticker = await self.exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            await self._close_position(trade, current_price, "Manual close")
            del self.positions[symbol]
            
            return True, f"–ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False, str(e)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot_manager = BotManager()