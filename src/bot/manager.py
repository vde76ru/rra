#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
"""
import asyncio
import logging
import psutil
import os
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from enum import Enum

from ..core.config import config
from ..core.database import SessionLocal
from ..core.models import Trade, Signal, BotState, TradingPair, TradeStatus
from ..exchange.client import ExchangeClient
from ..strategies import StrategyFactory
from ..analysis.market_analyzer import MarketAnalyzer
from ..notifications.telegram import TelegramNotifier

logger = logging.getLogger(__name__)

class BotStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –±–æ—Ç–∞"""
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"

class BotManager:
    """
    –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ—Ç–∞
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    """
    
    _instance = None
    
    def __new__(cls):
        """Singleton –ø–∞—Ç—Ç–µ—Ä–Ω"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"""
        if not hasattr(self, 'initialized'):
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.exchange = ExchangeClient()
            self.analyzer = MarketAnalyzer()
            self.notifier = TelegramNotifier()
            self.strategy_factory = StrategyFactory()
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ
            self.status = BotStatus.STOPPED
            self.positions: Dict[str, Trade] = {}
            self.active_pairs: List[str] = []
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
            self._main_task: Optional[asyncio.Task] = None
            self._stop_event = asyncio.Event()
            self._process_info: Dict = {}
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.start_time: Optional[datetime] = None
            self.cycles_count = 0
            self.trades_today = 0
            
            self.initialized = True
            logger.info("‚úÖ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú ===
    
    async def start(self) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if self.status in [BotStatus.RUNNING, BotStatus.STARTING]:
            return False, f"–ë–æ—Ç —É–∂–µ {self.status.value}"
        
        try:
            self.status = BotStatus.STARTING
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._validate_config():
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
            await self._check_exchange_connection()
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
            await self._load_configuration()
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            await self._update_bot_state(is_running=True)
            
            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self._stop_event.clear()
            self._main_task = asyncio.create_task(self._trading_loop())
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            self._update_process_info()
            
            # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notifier.send_startup_message(
                pairs=self.active_pairs,
                mode='TESTNET' if config.BYBIT_TESTNET else 'MAINNET'
            )
            
            self.status = BotStatus.RUNNING
            self.start_time = datetime.now()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
            
        except Exception as e:
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            await self._update_bot_state(is_running=False)
            return False, error_msg
    
    async def stop(self) -> Tuple[bool, str]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
        if self.status not in [BotStatus.RUNNING, BotStatus.ERROR]:
            return False, f"–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: {self.status.value})"
        
        try:
            self.status = BotStatus.STOPPING
            logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
            
            # 1. –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self._stop_event.set()
            
            # 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            if self._main_task:
                try:
                    await asyncio.wait_for(self._main_task, timeout=10.0)
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    self._main_task.cancel()
                    try:
                        await self._main_task
                    except asyncio.CancelledError:
                        pass
            
            # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._close_all_positions("Bot shutdown")
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            await self._update_bot_state(is_running=False)
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._save_statistics()
            
            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.notifier.send_shutdown_message(
                runtime=(datetime.now() - self.start_time) if self.start_time else None,
                trades_count=self.trades_today
            )
            
            self.status = BotStatus.STOPPED
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return False, error_msg
    
    async def restart(self) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        stop_success, stop_msg = await self.stop()
        if not stop_success:
            return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {stop_msg}"
        
        # –ñ–¥–µ–º
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        return await self.start()
    
    # === –û–°–ù–û–í–ù–û–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ ===
    
    async def _trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        while not self._stop_event.is_set():
            try:
                self.cycles_count += 1
                cycle_start = datetime.now()
                
                logger.debug(f"üìä –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ #{self.cycles_count}")
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                if not await self._check_trading_limits():
                    logger.info("üìà –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    await self._human_delay(300, 600)  # –ü–∞—É–∑–∞ 5-10 –º–∏–Ω—É—Ç
                    continue
                
                # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                market_data = await self.analyzer.analyze_market(self.active_pairs)
                
                # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                signals = await self._generate_signals(market_data)
                
                # 4. –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞
                for signal in signals:
                    if self._stop_event.is_set():
                        break
                    await self._execute_signal_human_like(signal)
                
                # 5. –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                await self._manage_positions()
                
                # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await self._update_statistics()
                
                # 7. –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                cycle_duration = (datetime.now() - cycle_start).total_seconds()
                logger.debug(f"‚è±Ô∏è –¶–∏–∫–ª #{self.cycles_count} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {cycle_duration:.1f}—Å")
                
                await self._human_delay()
                
            except asyncio.CancelledError:
                logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                await self.notifier.send_error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {str(e)}")
                await self._human_delay(60, 180)  # –ü–∞—É–∑–∞ 1-3 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # === –ò–ú–ò–¢–ê–¶–ò–Ø –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø ===
    
    async def _human_delay(self, min_seconds: float = None, max_seconds: float = None):
        """–£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        if not config.ENABLE_HUMAN_MODE:
            await asyncio.sleep(60)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–∏–Ω—É—Ç–∞
            return
        
        import random
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        min_delay = min_seconds or config.MIN_DELAY_SECONDS
        max_delay = max_seconds or config.MAX_DELAY_SECONDS
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = random.uniform(min_delay, max_delay)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (—á–µ–ª–æ–≤–µ–∫ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–æ—á—å—é)
        hour = datetime.now().hour
        if 0 <= hour < 6:  # –ù–æ—á—å
            delay *= random.uniform(1.5, 2.5)
        elif 6 <= hour < 9:  # –£—Ç—Ä–æ
            delay *= random.uniform(1.2, 1.5)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º "—É—Å—Ç–∞–ª–æ—Å—Ç—å" (–±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ = –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞)
        if self.cycles_count > 100:
            fatigue_factor = min(2.0, 1 + (self.cycles_count - 100) / 200)
            delay *= fatigue_factor
        
        # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–ø–µ—Ä–µ—Ä—ã–≤—ã)
        if random.random() < 0.02:  # 2% —à–∞–Ω—Å
            delay = random.uniform(300, 900)  # 5-15 –º–∏–Ω—É—Ç
            logger.info(f"‚òï –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –û—á–µ–Ω—å —Ä–µ–¥–∫–æ –¥–µ–ª–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–æ–±–µ–¥/–æ—Ç–¥—ã—Ö)
        elif random.random() < 0.005:  # 0.5% —à–∞–Ω—Å
            delay = random.uniform(1800, 3600)  # 30-60 –º–∏–Ω—É—Ç
            logger.info(f"üçî –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        remaining = delay
        while remaining > 0 and not self._stop_event.is_set():
            sleep_time = min(1.0, remaining)
            await asyncio.sleep(sleep_time)
            remaining -= sleep_time
    
    async def _execute_signal_human_like(self, signal: Signal):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        thinking_time = random.uniform(5, 20)
        logger.debug(f"ü§î –û–±–¥—É–º—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª {signal.symbol} –≤ —Ç–µ—á–µ–Ω–∏–µ {thinking_time:.1f}—Å")
        await asyncio.sleep(thinking_time)
        
        # –ò–Ω–æ–≥–¥–∞ "—Å–æ–º–Ω–µ–≤–∞–µ–º—Å—è" –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            logger.info(f"üòï –†–µ—à–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª {signal.symbol} (—Å–æ–º–Ω–µ–Ω–∏—è)")
            return
        
        # –ò–Ω–æ–≥–¥–∞ "–æ—Ç–≤–ª–µ–∫–∞–µ–º—Å—è" –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
            delay = random.uniform(30, 120)
            logger.info(f"üì± –û—Ç–≤–ª–µ–∫–ª–∏—Å—å, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {delay:.0f}—Å")
            await asyncio.sleep(delay)
        
        # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏ —Ä–∞–∑–º–µ—Ä–∞
        await self._execute_signal(signal)
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _validate_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not config.BYBIT_API_KEY or config.BYBIT_API_KEY == 'your_testnet_api_key_here':
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        if not config.TRADING_PAIRS:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
            return False
        
        return True
    
    async def _check_exchange_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            balance = await self.exchange.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT")
        except Exception as e:
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {e}")
    
    async def _load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        db = SessionLocal()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
            pairs = db.query(TradingPair).filter(
                TradingPair.is_active == True
            ).all()
            
            self.active_pairs = [pair.symbol for pair in pairs]
            
            if not self.active_pairs:
                self.active_pairs = config.TRADING_PAIRS
                logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {self.active_pairs}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.OPEN
            ).all()
            
            self.positions = {trade.symbol: trade for trade in open_trades}
            
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.active_pairs)} –ø–∞—Ä, {len(self.positions)} –ø–æ–∑–∏—Ü–∏–π")
            
        finally:
            db.close()
    
    def _update_process_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            process = psutil.Process()
            self._process_info = {
                'pid': process.pid,
                'memory_mb': round(process.memory_info().rss / 1024 / 1024, 2),
                'cpu_percent': process.cpu_percent(),
                'threads': process.num_threads(),
                'create_time': datetime.fromtimestamp(process.create_time())
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
    
    async def _update_bot_state(self, is_running: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î"""
        db = SessionLocal()
        try:
            state = db.query(BotState).first()
            if not state:
                state = BotState()
                db.add(state)
            
            state.is_running = is_running
            if is_running:
                state.start_time = datetime.utcnow()
            else:
                state.stop_time = datetime.utcnow()
            
            state.total_trades = self.trades_today
            state.current_balance = await self._get_current_balance()
            
            db.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {e}")
        finally:
            db.close()
    
    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø API ===
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        return {
            'status': self.status.value,
            'is_running': self.status == BotStatus.RUNNING,
            'active_pairs': self.active_pairs,
            'open_positions': len(self.positions),
            'positions_details': {
                symbol: {
                    'side': trade.side.value,
                    'entry_price': trade.entry_price,
                    'quantity': trade.quantity,
                    'profit': trade.profit
                }
                for symbol, trade in self.positions.items()
            },
            'statistics': {
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'uptime': str(datetime.now() - self.start_time) if self.start_time else None,
                'cycles_count': self.cycles_count,
                'trades_today': self.trades_today
            },
            'process_info': self._process_info,
            'config': {
                'mode': 'TESTNET' if config.BYBIT_TESTNET else 'MAINNET',
                'max_positions': config.MAX_POSITIONS,
                'human_mode': config.ENABLE_HUMAN_MODE
            }
        }
    
    async def update_pairs(self, pairs: List[str]) -> Tuple[bool, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            db = SessionLocal()
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
            db.query(TradingPair).update({TradingPair.is_active: False})
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            for symbol in pairs:
                pair = db.query(TradingPair).filter(
                    TradingPair.symbol == symbol
                ).first()
                
                if pair:
                    pair.is_active = True
                else:
                    pair = TradingPair(
                        symbol=symbol,
                        is_active=True,
                        strategy='multi_indicator'
                    )
                    db.add(pair)
            
            db.commit()
            db.close()
            
            self.active_pairs = pairs
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
            
            return True, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(pairs)}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")
            return False, str(e)
    
    async def close_position(self, symbol: str) -> Tuple[bool, str]:
        """–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.positions:
            return False, f"–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            trade = self.positions[symbol]
            ticker = await self.exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            await self._close_position(trade, current_price, "Manual close")
            
            return True, f"–ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False, str(e)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (_generate_signals, _execute_signal, etc.) 
    # –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
bot_manager = BotManager()