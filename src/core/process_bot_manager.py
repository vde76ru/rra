"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""
import subprocess
import psutil
import signal
import os
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, List, Tuple
from .database import SessionLocal
from .models import BotState, TradingPair

logger = logging.getLogger(__name__)

class ProcessBotManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è main.py
    """
    
    def __init__(self):
        self.bot_process: Optional[subprocess.Popen] = None
        self.bot_pid: Optional[int] = None
        
        # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        self._check_existing_process()
    
    def _check_existing_process(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ main.py –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
        """
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    cmdline = proc.info.get('cmdline', [])
                    if not cmdline:
                        continue
                    
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å main.py –≤ –Ω–∞—à–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if (len(cmdline) >= 2 and 
                        'python' in cmdline[0].lower() and 
                        'main.py' in cmdline[1] and
                        str(os.getcwd()) in ' '.join(cmdline)):
                        
                        self.bot_pid = proc.info['pid']
                        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç (PID: {self.bot_pid})")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                        asyncio.create_task(self._update_db_status(True))
                        return True
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        return False
    
    async def start_bot(self) -> Tuple[bool, str]:
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if await self.is_bot_running():
            return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞
            cmd = ["python", "main.py"]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.bot_process = subprocess.Popen(
                cmd,
                cwd=os.getcwd(),  # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                # –ù–∞ Unix —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                preexec_fn=os.setsid if os.name != 'nt' else None
            )
            
            self.bot_pid = self.bot_process.pid
            
            # –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            if self.bot_process.poll() is None:
                await self._update_db_status(True)
                
                logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {self.bot_pid})")
                return True, f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {self.bot_pid})"
            else:
                # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
                stdout, stderr = self.bot_process.communicate()
                error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                
                logger.error(f"‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: {error_msg}")
                return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {error_msg[:200]}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def stop_bot(self) -> Tuple[bool, str]:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç graceful shutdown —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã
        """
        if not await self.is_bot_running():
            return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            if self.bot_process and self.bot_process.poll() is None:
                # Graceful shutdown —á–µ—Ä–µ–∑ SIGTERM
                if os.name != 'nt':  # Unix/Linux
                    os.killpg(os.getpgid(self.bot_process.pid), signal.SIGTERM)
                else:  # Windows
                    self.bot_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
                try:
                    self.bot_process.wait(timeout=30)
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                    if os.name != 'nt':
                        os.killpg(os.getpgid(self.bot_process.pid), signal.SIGKILL)
                    else:
                        self.bot_process.kill()
                    
                    self.bot_process.wait()
                
            elif self.bot_pid:
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ PID (–µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
                try:
                    proc = psutil.Process(self.bot_pid)
                    proc.terminate()
                    proc.wait(timeout=30)
                except psutil.TimeoutExpired:
                    proc.kill()
                except psutil.NoSuchProcess:
                    pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            self.bot_process = None
            self.bot_pid = None
            
            await self._update_db_status(False)
            
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
    
    async def is_bot_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ë–î
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ subprocess
        if self.bot_process and self.bot_process.poll() is None:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ PID
        if self.bot_pid:
            try:
                if psutil.pid_exists(self.bot_pid):
                    proc = psutil.Process(self.bot_pid)
                    if proc.is_running():
                        return True
            except psutil.NoSuchProcess:
                pass
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        if self._check_existing_process():
            return True
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
        await self._update_db_status(False)
        return False
    
    async def get_bot_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        """
        is_running = await self.is_bot_running()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db = SessionLocal()
        try:
            bot_state = db.query(BotState).first()
            active_pairs = db.query(TradingPair).filter(
                TradingPair.is_active == True
            ).all()
            
            status = {
                'is_running': is_running,
                'pid': self.bot_pid,
                'active_pairs': [pair.symbol for pair in active_pairs],
                'total_pairs': len(active_pairs)
            }
            
            if bot_state:
                status.update({
                    'start_time': bot_state.start_time.isoformat() if bot_state.start_time else None,
                    'total_trades': bot_state.total_trades or 0,
                    'profitable_trades': bot_state.profitable_trades or 0,
                    'total_profit': bot_state.total_profit or 0.0,
                    'current_balance': bot_state.current_balance or 0.0
                })
            
            return status
            
        finally:
            db.close()
    
    async def _update_db_status(self, is_running: bool):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        """
        db = SessionLocal()
        try:
            bot_state = db.query(BotState).first()
            if not bot_state:
                bot_state = BotState()
                db.add(bot_state)
            
            bot_state.is_running = is_running
            if is_running:
                bot_state.start_time = datetime.utcnow()
            else:
                bot_state.stop_time = datetime.utcnow()
            
            db.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
        finally:
            db.close()
    
    async def restart_bot(self) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        """
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        stop_success, stop_msg = await self.stop_bot()
        if not stop_success:
            return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_msg}"
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await asyncio.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        start_success, start_msg = await self.start_bot()
        return start_success, start_msg

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
process_bot_manager = ProcessBotManager()