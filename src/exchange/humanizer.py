"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/exchange/humanizer.py
"""
import random
import asyncio
import logging
from datetime import datetime, timedelta

from ..core.config import config

logger = logging.getLogger(__name__)

class HumanBehaviorMixin:
    """
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
    –î–µ–ª–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π
    """
    
    def _init_human_behavior(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        self.last_action_time = datetime.now()
        self.actions_count = 0
        self.session_start = datetime.now()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "—Ç—Ä–µ–π–¥–µ—Ä–∞"
        self.typing_speed = random.uniform(0.8, 1.2)  # –°–∫–æ—Ä–æ—Å—Ç—å "–ø–µ—á–∞—Ç–∏"
        self.reaction_time = random.uniform(0.5, 2.0)  # –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏
        self.fatigue_factor = 0  # –£—Å—Ç–∞–ª–æ—Å—Ç—å
        self.mistake_probability = random.uniform(0.01, 0.03)  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.favorite_numbers = [10, 50, 100, 500, 1000]  # –õ—é–±–∏–º—ã–µ –∫—Ä—É–≥–ª—ã–µ —á–∏—Å–ª–∞
        self.working_hours = self._generate_working_hours()
        
        logger.debug(f"üßë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ–ª–æ–≤–µ–∫–∞: —Å–∫–æ—Ä–æ—Å—Ç—å={self.typing_speed:.2f}, —Ä–µ–∞–∫—Ü–∏—è={self.reaction_time:.2f}")
    
    def _generate_working_hours(self) -> tuple:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        # –£—Ç—Ä–µ–Ω–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä, –¥–Ω–µ–≤–Ω–æ–π –∏–ª–∏ –Ω–æ—á–Ω–æ–π
        trader_type = random.choice(['morning', 'day', 'night'])
        
        if trader_type == 'morning':
            return (6, 12)  # 6:00 - 12:00
        elif trader_type == 'day':
            return (9, 18)  # 9:00 - 18:00
        else:
            return (20, 2)  # 20:00 - 02:00
        
    async def human_delay(self):
        """–ë–∞–∑–æ–≤–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        if not config.ENABLE_HUMAN_MODE:
            return
            
        base_delay = random.uniform(config.MIN_DELAY_SECONDS, config.MAX_DELAY_SECONDS)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —É—Å—Ç–∞–ª–æ—Å—Ç—å
        fatigue_multiplier = 1 + (self.fatigue_factor * 0.5)
        delay = base_delay * fatigue_multiplier * self.reaction_time
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        current_hour = datetime.now().hour
        if not (self.working_hours[0] <= current_hour <= self.working_hours[1]):
            # –í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            delay *= random.uniform(1.5, 2.0)
        
        # –ò–Ω–æ–≥–¥–∞ "–æ—Ç–≤–ª–µ–∫–∞–µ–º—Å—è"
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
            delay += random.uniform(5, 15)
            logger.debug(f"üí≠ –û—Ç–≤–ª–µ–∫–ª–∏—Å—å –Ω–∞ {delay:.1f} —Å–µ–∫—É–Ω–¥")
        
        await asyncio.sleep(delay)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self._update_fatigue()
    
    async def think_before_action(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º"""
        if not config.ENABLE_HUMAN_MODE:
            return
            
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–∑–¥—É–º—å—è
        think_time = random.uniform(2, 8)
        
        # –ò–Ω–æ–≥–¥–∞ –¥—É–º–∞–µ–º –¥–æ–ª—å—à–µ (—Å–ª–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        if random.random() < 0.15:  # 15% —à–∞–Ω—Å
            think_time = random.uniform(10, 30)
            logger.debug(f"ü§î –î–æ–ª–≥–∏–µ —Ä–∞–∑–¥—É–º—å—è: {think_time:.1f} —Å–µ–∫")
        
        # –° –æ–ø—ã—Ç–æ–º –¥—É–º–∞–µ–º –±—ã—Å—Ç—Ä–µ–µ
        if self.actions_count > 50:
            think_time *= 0.7
        
        await asyncio.sleep(think_time)
    
    async def micro_delay(self):
        """–ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        if not config.ENABLE_HUMAN_MODE:
            return
            
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–ª–∏–∫ –º—ã—à–∫–æ–π, –¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ç.–¥.
        delay = random.uniform(0.1, 0.5) * self.typing_speed
        
        # –ò–Ω–æ–≥–¥–∞ "–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ–º—Å—è" –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if random.random() < 0.02:  # 2% —à–∞–Ω—Å
            delay += random.uniform(0.5, 1.0)
            logger.debug("üñ±Ô∏è –ü—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –º—ã—à–∫–æ–π")
        
        await asyncio.sleep(delay)
    
    def humanize_amount(self, amount: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫"""
        if not config.ENABLE_HUMAN_MODE:
            return amount
            
        # –õ—é–¥–∏ –ª—é–±—è—Ç –∫—Ä—É–≥–ª—ã–µ —á–∏—Å–ª–∞
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä—É–≥–ª–æ–µ —á–∏—Å–ª–æ
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –ª—é–±–∏–º–æ–µ —á–∏—Å–ª–æ
            for fav_num in self.favorite_numbers:
                if amount * 0.8 <= fav_num <= amount * 1.2:
                    return float(fav_num)
        
        # –û–±—ã—á–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        if amount > 1000:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç–µ–Ω
            return round(amount, -2)
        elif amount > 100:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤
            return round(amount, -1)
        elif amount > 10:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö
            return round(amount, 0)
        elif amount > 1:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            return round(amount, 1)
        else:
            # –î–ª—è –º–µ–ª–∫–∏—Ö —Å—É–º–º - –¥–æ 2-3 –∑–Ω–∞–∫–æ–≤
            return round(amount, random.choice([2, 3]))
    
    def should_hesitate(self) -> bool:
        """–î–æ–ª–∂–Ω—ã –ª–∏ –º—ã –∑–∞—Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è"""
        if not config.ENABLE_HUMAN_MODE:
            return False
            
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —Å–æ–º–Ω–µ–Ω–∏–π
        hesitation_chance = 0.02  # 2%
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        hesitation_chance += self.fatigue_factor * 0.03
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å –æ–ø—ã—Ç–æ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π)
        if self.actions_count > 50:
            hesitation_chance *= 0.5
        
        # –í —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö (–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥—Ä—è–¥) —Å–æ–º–Ω–µ–≤–∞–µ–º—Å—è —á–∞—â–µ
        time_since_last = (datetime.now() - self.last_action_time).total_seconds()
        if time_since_last < 10:  # –ú–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥ —Å –ø—Ä–æ—à–ª–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            hesitation_chance *= 2
        
        return random.random() < hesitation_chance
    
    def _update_fatigue(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏"""
        session_duration = (datetime.now() - self.session_start).total_seconds() / 3600
        
        # –£—Å—Ç–∞–ª–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        self.fatigue_factor = min(1.0, session_duration / 8)  # –ú–∞–∫—Å —É—Å—Ç–∞–ª–æ—Å—Ç—å —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ—Å–ª–µ "–ø–µ—Ä–µ—Ä—ã–≤–∞"
        if (datetime.now() - self.last_action_time).total_seconds() > 1800:  # 30 –º–∏–Ω—É—Ç
            self.fatigue_factor *= 0.3
            logger.debug("üòå –£—Å—Ç–∞–ª–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        
        self.last_action_time = datetime.now()
        self.actions_count += 1
        
        # –ö–∞–∂–¥—ã–µ 20 –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—á–µ–ª–æ–≤–µ–∫ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è)
        if self.actions_count % 20 == 0:
            self.reaction_time *= random.uniform(0.9, 1.1)
            self.typing_speed *= random.uniform(0.95, 1.05)