"""
–ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
–§–∞–π–ª: src/web/dashboard.py
"""

def get_dashboard_html() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç - –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }
        
        .login-form {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
        }
        
        .login-form h2 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2em;
        }
        
        .login-input-group {
            margin-bottom: 20px;
        }
        
        .login-input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .login-input-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            font-size: 1em;
            transition: border-color 0.3s ease;
        }
        
        .login-input-group input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
        
        .login-btn {
            width: 100%;
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 14px;
            border-radius: 10px;
            font-size: 1.1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }
        
        .login-error {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
        }
        
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–∞—à–±–æ—Ä–¥–∞ */
        .main-container {
            display: none;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .user-badge {
            background: rgba(52, 152, 219, 0.1);
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .logout-btn {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .logout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.4);
        }
        
        .status-bar {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
            margin-top: 20px;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            background: rgba(52, 152, 219, 0.1);
            border-radius: 25px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .status-item.active {
            background: rgba(46, 204, 113, 0.2);
            border-color: #2ecc71;
        }
        
        .status-item.error {
            background: rgba(231, 76, 60, 0.2);
            border-color: #e74c3c;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #95a5a6;
            animation: pulse 2s infinite;
        }
        
        .status-dot.active {
            background: #2ecc71;
        }
        
        .status-dot.error {
            background: #e74c3c;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .control-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.4em;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin: 5px;
            min-width: 120px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }
        
        .btn.btn-success {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
        }
        
        .btn.btn-success:hover {
            box-shadow: 0 5px 15px rgba(46, 204, 113, 0.4);
        }
        
        .btn.btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }
        
        .btn.btn-danger:hover {
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.4);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .input-group {
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .input-group select,
        .input-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            font-size: 1em;
            transition: border-color 0.3s ease;
            background: white;
        }
        
        .input-group select:focus,
        .input-group input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .stat-card.positive .stat-number {
            color: #2ecc71;
        }
        
        .stat-card.negative .stat-number {
            color: #e74c3c;
        }
        
        .trades-table {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .trades-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .trades-table th,
        .trades-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }
        
        .trades-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .trades-table tr:hover {
            background: rgba(52, 152, 219, 0.05);
        }
        
        .profit {
            color: #2ecc71;
            font-weight: bold;
        }
        
        .loss {
            color: #e74c3c;
            font-weight: bold;
        }
        
        .logs-container {
            background: rgba(0, 0, 0, 0.9);
            color: #00ff00;
            font-family: 'Courier New', monospace;
            border-radius: 15px;
            padding: 20px;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 20px;
        }
        
        .log-entry {
            margin: 5px 0;
            padding: 5px;
            border-left: 3px solid #00ff00;
            padding-left: 10px;
        }
        
        .log-error {
            color: #ff4444;
            border-left-color: #ff4444;
        }
        
        .log-warning {
            color: #ffaa00;
            border-left-color: #ffaa00;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #2196F3;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.success {
            background: #2ecc71;
        }
        
        .notification.error {
            background: #e74c3c;
        }
        
        .notification.info {
            background: #3498db;
        }
        
        .strategy-info {
            background: rgba(52, 152, 219, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .strategy-table {
            width: 100%;
            margin-top: 10px;
        }
        
        .strategy-table th,
        .strategy-table td {
            padding: 8px;
            text-align: left;
        }
        
        .strategy-table th {
            font-weight: 600;
            color: #2c3e50;
        }
        
        @media (max-width: 768px) {
            .header h1 {
                font-size: 1.5em;
            }
            
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            .status-bar {
                flex-direction: column;
                align-items: center;
            }
            
            .control-panel {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <!-- –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
    <div class="login-container" id="loginContainer">
        <div class="login-form">
            <h2>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
            <div class="login-error" id="loginError"></div>
            <form id="loginForm" onsubmit="return handleLogin(event)">
                <div class="login-input-group">
                    <label for="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                    <input type="text" id="username" name="username" required autofocus>
                </div>
                <div class="login-input-group">
                    <label for="password">–ü–∞—Ä–æ–ª—å</label>
                    <input type="password" id="password" name="password" required>
                </div>
                <button type="submit" class="login-btn">–í–æ–π—Ç–∏</button>
            </form>
        </div>
    </div>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ -->
    <div class="main-container" id="mainContainer">
        <div class="header">
            <div class="header-content">
                <h1>üöÄ –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç</h1>
                <div class="user-info">
                    <div class="user-badge">üë§ <span id="currentUser">Admin</span></div>
                    <button class="logout-btn" onclick="handleLogout()">–í—ã—Ö–æ–¥</button>
                </div>
            </div>
            <div class="status-bar">
                <div class="status-item" id="bot-status">
                    <span class="status-dot" id="bot-dot"></span>
                    <span>–°—Ç–∞—Ç—É—Å: <span id="bot-status-text">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span></span>
                </div>
                <div class="status-item" id="connection-status">
                    <span class="status-dot"></span>
                    <span>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: <span id="connection-text">–û—Ç–∫–ª—é—á–µ–Ω–æ</span></span>
                </div>
                <div class="status-item">
                    <span class="status-dot active"></span>
                    <span>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞</span>
                </div>
                <div class="status-item">
                    <span class="status-dot active"></span>
                    <span>–ë–∏—Ä–∂–∞: Bybit (Testnet)</span>
                </div>
            </div>
        </div>

        <div class="container">
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="total-trades">0</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
                </div>
                <div class="stat-card positive">
                    <div class="stat-number" id="total-profit">+0.00 USDT</div>
                    <div class="stat-label">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="success-rate">0%</div>
                    <div class="stat-label">–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="active-positions">0</div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏</div>
                </div>
            </div>

            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
            <div class="control-panel">
                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º -->
                <div class="card">
                    <h3>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</h3>
                    <div class="strategy-info">
                        <strong>üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</strong>
                        <p style="margin-top: 10px; color: #7f8c8d; font-size: 0.9em;">
                            –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                        </p>
                    </div>
                    <div style="text-align: center;">
                        <button id="start-bot" class="btn btn-success">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
                        <button id="stop-bot" class="btn btn-danger">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</button>
                    </div>
                </div>

                <!-- –¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ -->
                <div class="card" id="current-strategies-card">
                    <h3>üß† –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</h3>
                    <div id="current-strategies">
                        <p style="color: #7f8c8d; text-align: center; padding: 20px;">
                            –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                        </p>
                    </div>
                </div>

                <!-- –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã -->
                <div class="card">
                    <h3>üí± –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã</h3>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" checked value="BTCUSDT"> BTCUSDT - Bitcoin/USDT
                        </label>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" checked value="ETHUSDT"> ETHUSDT - Ethereum/USDT
                        </label>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" checked value="BNBUSDT"> BNBUSDT - BNB/USDT
                        </label>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" checked value="SOLUSDT"> SOLUSDT - Solana/USDT
                        </label>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" value="ADAUSDT"> ADAUSDT - Cardano/USDT
                        </label>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label>
                            <input type="checkbox" value="XRPUSDT"> XRPUSDT - Ripple/USDT
                        </label>
                    </div>
                    <button class="btn" onclick="saveTradingPairs()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ -->
                <div class="card">
                    <h3>‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏</h3>
                    <div class="input-group">
                        <label for="max-position">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%):</label>
                        <input type="number" id="max-position" value="5" min="1" max="100" step="0.5">
                    </div>
                    <div class="input-group">
                        <label for="stop-loss">–°—Ç–æ–ø-–ª–æ—Å—Å (%):</label>
                        <input type="number" id="stop-loss" value="2" min="0.5" max="10" step="0.5">
                    </div>
                    <div class="input-group">
                        <label for="take-profit">–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%):</label>
                        <input type="number" id="take-profit" value="4" min="1" max="20" step="0.5">
                    </div>
                    <div class="input-group">
                        <label for="max-trades">–ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å:</label>
                        <input type="number" id="max-trades" value="10" min="1" max="50" step="1">
                    </div>
                </div>

                <!-- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="card">
                    <h3>üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞</h3>
                    <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> <span id="uptime">00:00:00</span></p>
                    <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> <span id="last-cycle">–ù–∏–∫–æ–≥–¥–∞</span></p>
                    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:</strong> <span id="cycles-count">0</span></p>
                    <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</strong> <span id="memory-usage">0 MB</span></p>
                    <div style="margin-top: 15px;">
                        <button class="btn" onclick="exportTrades()">üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫</button>
                        <button class="btn" onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏</button>
                    </div>
                </div>

                <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                <div class="card">
                    <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                    <button class="btn" onclick="closeAllPositions()">‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏</button>
                    <button class="btn" onclick="refreshStats()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
                    <button class="btn" onclick="testNotification()">üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</button>
                    <button class="btn btn-danger" onclick="emergencyStop()">üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞</button>
                </div>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ -->
            <div class="trades-table">
                <h3 style="padding: 20px; margin: 0; background: #f8f9fa; border-bottom: 1px solid #ecf0f1;">üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</h3>
                <table>
                    <thead>
                        <tr>
                            <th>–í—Ä–µ–º—è</th>
                            <th>–ü–∞—Ä–∞</th>
                            <th>–¢–∏–ø</th>
                            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                            <th>–¶–µ–Ω–∞</th>
                            <th>–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫</th>
                            <th>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                        </tr>
                    </thead>
                    <tbody id="trades-tbody">
                        <tr>
                            <td colspan="8" style="text-align: center; padding: 40px; color: #7f8c8d;">
                                –ü–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- –õ–æ–≥–∏ -->
            <div class="logs-container">
                <h3 style="color: #00ff00; margin-bottom: 15px;">üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h3>
                <div id="logs-content">
                    <div class="log-entry">[–°–ò–°–¢–ï–ú–ê] –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let wsConnection = null;
        let botStatus = 'stopped';
        let isConnected = false;
        let currentStrategies = {};
        let authToken = null;
        let currentUsername = null;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        function checkAuth() {
            authToken = localStorage.getItem('authToken');
            currentUsername = localStorage.getItem('username');
            
            if (authToken) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                showDashboard();
            } else {
                showLoginForm();
            }
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
        function showLoginForm() {
            document.getElementById('loginContainer').style.display = 'flex';
            document.getElementById('mainContainer').style.display = 'none';
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
        function showDashboard() {
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('mainContainer').style.display = 'block';
            
            if (currentUsername) {
                document.getElementById('currentUser').textContent = currentUsername;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
            initializeDashboard();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
        async function handleLogin(event) {
            event.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const errorDiv = document.getElementById('loginError');
            
            try {
                const response = await fetch('/api/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (response.ok && data.access_token) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                    authToken = data.access_token;
                    localStorage.setItem('authToken', authToken);
                    localStorage.setItem('username', data.user.username);
                    currentUsername = data.user.username;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
                    showDashboard();
                    
                    errorDiv.style.display = 'none';
                } else {
                    errorDiv.textContent = data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
                    errorDiv.style.display = 'block';
                }
            } catch (error) {
                errorDiv.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
                errorDiv.style.display = 'block';
            }
        }

        // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        function handleLogout() {
            localStorage.removeItem('authToken');
            localStorage.removeItem('username');
            authToken = null;
            currentUsername = null;
            
            if (wsConnection) {
                wsConnection.close();
            }
            
            showLoginForm();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
        function initializeDashboard() {
            connectWebSocket();
            loadBotStatus();
            loadStats();
            setupEventListeners();
            updateUptime();
            setInterval(updateUptime, 1000);
            
            addLog('[–°–ò–°–¢–ï–ú–ê] –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }

        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            addLog('[–°–ò–°–¢–ï–ú–ê] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...', 'info');
            
            wsConnection = new WebSocket(wsUrl);
            
            wsConnection.onopen = function() {
                isConnected = true;
                addLog('[–°–ò–°–¢–ï–ú–ê] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
                updateConnectionStatus(true);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if (authToken) {
                    wsConnection.send(JSON.stringify({
                        type: 'auth',
                        token: authToken
                    }));
                }
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                wsConnection.send(JSON.stringify({type: 'get_status'}));
            };
            
            wsConnection.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
                }
            };
            
            wsConnection.onclose = function() {
                isConnected = false;
                addLog('[–°–ò–°–¢–ï–ú–ê] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'warning');
                updateConnectionStatus(false);
                setTimeout(connectWebSocket, 5000);
            };
            
            wsConnection.onerror = function(error) {
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ WebSocket: ' + error, 'error');
                console.error('WebSocket error:', error);
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
        function handleWebSocketMessage(data) {
            console.log('WebSocket message:', data);
            
            switch(data.type) {
                case 'initial_status':
                case 'status_update':
                case 'status_response':
                    updateFromStatusData(data.data);
                    break;
                    
                case 'bot_started':
                    showNotification('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                    addLog('[–ë–û–¢] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π');
                    document.getElementById('bot-status-text').textContent = '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...';
                    break;
                    
                case 'bot_stopped':
                    showNotification('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
                    addLog('[–ë–û–¢] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    updateBotStatus('stopped');
                    currentStrategies = {};
                    updateStrategyDisplay();
                    break;
                    
                case 'new_trade':
                    addTradeToTable(data.data);
                    updateStats();
                    showNotification(`üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: ${data.data.symbol}`, 'info');
                    break;
                    
                case 'strategy_selected':
                    updateStrategyInfo(data.data);
                    break;
                    
                case 'settings_updated':
                    showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                    addLog('[–ù–ê–°–¢–†–û–ô–ö–ò] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                    break;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
        function updateFromStatusData(statusData) {
            if (!statusData) return;
            
            if (statusData.status) {
                updateBotStatus(statusData.status);
            }
            
            if (statusData.open_positions !== undefined) {
                document.getElementById('active-positions').textContent = statusData.open_positions;
            }
            
            if (statusData.statistics) {
                const stats = statusData.statistics;
                if (stats.cycles_count !== undefined) {
                    document.getElementById('cycles-count').textContent = stats.cycles_count;
                }
                if (stats.trades_today !== undefined) {
                    document.getElementById('total-trades').textContent = stats.trades_today;
                }
            }
            
            if (statusData.process_info) {
                const info = statusData.process_info;
                if (info.memory_mb) {
                    document.getElementById('memory-usage').textContent = `${info.memory_mb} MB`;
                }
            }
            
            if (statusData.active_pairs) {
                updateActivePairs(statusData.active_pairs);
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        function updateStrategyInfo(data) {
            const { symbol, strategy, confidence } = data;
            currentStrategies[symbol] = { strategy, confidence };
            
            addLog(`[–°–¢–†–ê–¢–ï–ì–ò–Ø] ${symbol}: –≤—ã–±—Ä–∞–Ω–∞ ${strategy} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%)`, 'info');
            updateStrategyDisplay();
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        function updateStrategyDisplay() {
            const container = document.getElementById('current-strategies');
            
            if (Object.keys(currentStrategies).length === 0) {
                container.innerHTML = '<p style="color: #7f8c8d; text-align: center; padding: 20px;">–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</p>';
                return;
            }
            
            let html = '<table class="strategy-table">';
            html += '<tr><th>–ü–∞—Ä–∞</th><th>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</th><th>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</th></tr>';
            
            for (const [symbol, info] of Object.entries(currentStrategies)) {
                const confidenceColor = info.confidence > 0.7 ? '#2ecc71' : 
                                       info.confidence > 0.5 ? '#f39c12' : '#e74c3c';
                html += `
                    <tr>
                        <td><strong>${symbol}</strong></td>
                        <td>${info.strategy}</td>
                        <td style="color: ${confidenceColor}">
                            ${(info.confidence * 100).toFixed(1)}%
                        </td>
                    </tr>
                `;
            }
            
            html += '</table>';
            container.innerHTML = html;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
        function updateActivePairs(pairs) {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(cb => {
                const value = cb.value;
                cb.checked = pairs.includes(value);
            });
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        function setupEventListeners() {
            document.getElementById('start-bot').addEventListener('click', startBot);
            document.getElementById('stop-bot').addEventListener('click', stopBot);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        async function loadBotStatus() {
            try {
                const response = await fetch('/api/bot/status', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    updateFromStatusData(data);
                } else if (response.status === 401) {
                    handleLogout();
                }
            } catch (error) {
                addLog('[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ' + error, 'error');
                console.error('Error loading bot status:', error);
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadStats() {
            try {
                const response = await fetch('/api/stats', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    document.getElementById('total-trades').textContent = data.total_trades || 0;
                    document.getElementById('total-profit').textContent = 
                        (data.total_profit >= 0 ? '+' : '') + (data.total_profit || 0).toFixed(2) + ' USDT';
                    document.getElementById('success-rate').textContent = 
                        (data.success_rate || 0).toFixed(1) + '%';
                    
                    const profitElement = document.getElementById('total-profit').parentElement;
                    profitElement.className = 'stat-card ' + (data.total_profit >= 0 ? 'positive' : 'negative');
                    
                    loadRecentTrades();
                }
            } catch (error) {
                addLog('[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ' + error, 'error');
                console.error('Error loading stats:', error);
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
        async function loadRecentTrades() {
            try {
                const response = await fetch('/api/trades?limit=10', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    if (data.trades && data.trades.length > 0) {
                        const tbody = document.getElementById('trades-tbody');
                        tbody.innerHTML = '';
                        
                        data.trades.forEach(trade => {
                            addTradeToTable(trade);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading trades:', error);
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        function updateBotStatus(status) {
            const statusElement = document.getElementById('bot-status-text');
            const dotElement = document.getElementById('bot-dot');
            const statusContainer = document.getElementById('bot-status');
            
            botStatus = status;
            
            const statusMap = {
                'running': { text: '–†–∞–±–æ—Ç–∞–µ—Ç', class: 'active' },
                'stopped': { text: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', class: '' },
                'starting': { text: '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', class: 'active' },
                'stopping': { text: '–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', class: '' },
                'error': { text: '–û—à–∏–±–∫–∞', class: 'error' }
            };
            
            const statusInfo = statusMap[status] || statusMap['stopped'];
            
            statusElement.textContent = statusInfo.text;
            dotElement.className = 'status-dot ' + statusInfo.class;
            statusContainer.className = 'status-item ' + statusInfo.class;
            
            document.getElementById('start-bot').disabled = (status === 'running' || status === 'starting');
            document.getElementById('stop-bot').disabled = (status !== 'running');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function updateConnectionStatus(connected) {
            const statusElement = document.getElementById('connection-status');
            const dot = statusElement.querySelector('.status-dot');
            const text = document.getElementById('connection-text');
            
            if (connected) {
                statusElement.className = 'status-item active';
                dot.className = 'status-dot active';
                text.textContent = '–ê–∫—Ç–∏–≤–Ω–æ';
            } else {
                statusElement.className = 'status-item error';
                dot.className = 'status-dot error';
                text.textContent = '–ü–æ—Ç–µ—Ä—è–Ω–æ';
            }
        }

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        async function startBot() {
            try {
                addLog('[–ö–û–ú–ê–ù–î–ê] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...', 'info');
                
                const response = await fetch('/api/bot/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({ 
                        strategy: 'auto'
                    })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.detail || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
                
                showNotification('üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', 'info');
                addLog('[–ë–û–¢] –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 'info');
                
            } catch (error) {
                showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message, 'error');
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message, 'error');
                console.error('Start bot error:', error);
            }
        }

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        async function stopBot() {
            try {
                addLog('[–ö–û–ú–ê–ù–î–ê] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...', 'info');
                
                const response = await fetch('/api/bot/stop', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.detail || data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
                
                showNotification('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', 'info');
                addLog('[–ë–û–¢] –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', 'info');
                
            } catch (error) {
                showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message, 'error');
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message, 'error');
                console.error('Stop bot error:', error);
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        async function saveTradingPairs() {
            try {
                const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
                const pairs = Array.from(checkboxes).map(cb => cb.value);
                
                if (pairs.length === 0) {
                    showNotification('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞—Ä—É', 'warning');
                    return;
                }
                
                const response = await fetch('/api/trading-pairs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify(pairs)
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                }
                
                showNotification('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
                addLog(`[–ù–ê–°–¢–†–û–ô–ö–ò] –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: ${pairs.join(', ')}`);
                
            } catch (error) {
                showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä: ' + error.message, 'error');
                console.error('Save pairs error:', error);
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        function updateUptime() {
            const now = new Date();
            const timeStr = now.toLocaleTimeString('ru-RU');
            document.getElementById('last-cycle').textContent = timeStr;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
        function addLog(message, type = 'info') {
            const logsContent = document.getElementById('logs-content');
            const logEntry = document.createElement('div');
            
            const timestamp = new Date().toLocaleTimeString('ru-RU');
            logEntry.textContent = `[${timestamp}] ${message}`;
            
            logEntry.className = 'log-entry';
            if (type === 'error') {
                logEntry.className += ' log-error';
            } else if (type === 'warning') {
                logEntry.className += ' log-warning';
            }
            
            logsContent.appendChild(logEntry);
            logsContent.scrollTop = logsContent.scrollHeight;
            
            if (logsContent.children.length > 100) {
                logsContent.removeChild(logsContent.firstChild);
            }
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        function addTradeToTable(trade) {
            const tbody = document.getElementById('trades-tbody');
            
            if (tbody.children.length === 1 && tbody.children[0].children.length === 1) {
                tbody.innerHTML = '';
            }
            
            const row = document.createElement('tr');
            const profitClass = (trade.profit || 0) >= 0 ? 'profit' : 'loss';
            
            const tradeTime = trade.created_at ? new Date(trade.created_at).toLocaleString('ru-RU') : 'N/A';
            const side = trade.side === 'BUY' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞';
            const status = trade.status === 'CLOSED' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞';
            const profit = trade.profit !== null && trade.profit !== undefined ? 
                `${trade.profit >= 0 ? '+' : ''}${trade.profit.toFixed(2)} USDT` : 'N/A';
            
            row.innerHTML = `
                <td>${tradeTime}</td>
                <td>${trade.symbol}</td>
                <td>${side}</td>
                <td>${trade.quantity.toFixed(4)}</td>
                <td>$${trade.entry_price.toFixed(2)}</td>
                <td class="${profitClass}">${profit}</td>
                <td>${trade.strategy}</td>
                <td>${status}</td>
            `;
            
            tbody.insertBefore(row, tbody.firstChild);
            
            if (tbody.children.length > 50) {
                tbody.removeChild(tbody.lastChild);
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function exportTrades() {
            showNotification('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫...', 'info');
            window.open('/api/export/trades?format=csv', '_blank');
        }

        function clearLogs() {
            document.getElementById('logs-content').innerHTML = '';
            addLog('[–°–ò–°–¢–ï–ú–ê] –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
        }

        async function closeAllPositions() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?')) {
                try {
                    const response = await fetch('/api/bot/close-all-positions', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π');
                    }
                    
                    showNotification('‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã', 'success');
                } catch (error) {
                    showNotification('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
                }
            }
        }

        function refreshStats() {
            loadStats();
            showNotification('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info');
        }

        function testNotification() {
            showNotification('üîî –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'success');
        }

        function emergencyStop() {
            if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞. –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                stopBot();
                closeAllPositions();
                showNotification('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'error');
            }
        }

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        setInterval(() => {
            if (botStatus === 'running') {
                loadStats();
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    </script>
</body>
</html>
    """
    
    return html