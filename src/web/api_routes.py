"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/web/api.py
"""
import asyncio
import json
import io
import csv
from fastapi import APIRouter, Depends, HTTPException, status, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func
from pydantic import BaseModel


from ..core.database import get_db
from ..core.models import Trade, Signal, TradingPair, User, BotState, Balance
from ..bot.manager import bot_manager
from .auth import get_current_user
from ..core.clean_logging import get_clean_logger

logger = get_clean_logger(__name__)

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class BotStartRequest(BaseModel):
    strategy: Optional[str] = None
    pairs: Optional[List[str]] = None

class SettingsRequest(BaseModel):
    max_position_size: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    max_daily_trades: Optional[int] = None
    trading_pairs: Optional[List[str]] = None
    email_notifications: bool = True
    telegram_notifications: bool = False
    telegram_token: Optional[str] = None

class TradeResponse(BaseModel):
    id: int
    timestamp: datetime
    symbol: str
    side: str
    amount: float
    price: float
    profit: Optional[float]
    strategy: Optional[str]
    status: str

# ‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class WebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def broadcast(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message = json.dumps(data, default=str, ensure_ascii=False)
        disconnected = []
        
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
ws_manager = WebSocketManager()

router = APIRouter()

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º WebSocket endpoint
@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await ws_manager.connect(websocket)
    try:
        while True:
            await asyncio.sleep(5)
            
            status_data = {
                "type": "bot_status",
                "status": bot_manager.get_status(),
                "timestamp": datetime.utcnow()
            }
            await websocket.send_text(json.dumps(status_data, default=str))
    
    except WebSocketDisconnect:
        ws_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        ws_manager.disconnect(websocket)

@router.get("/status")
async def get_bot_status(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    base_status = bot_manager.get_status()
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    extended_status = {
        **base_status,
        "uptime": str(datetime.utcnow() - bot_manager.start_time) if hasattr(bot_manager, 'start_time') and bot_manager.start_time else None,
        "cycles_count": getattr(bot_manager, 'cycles_count', 0),
        "active_strategies": getattr(bot_manager, 'active_strategies', []),
        "memory_usage": getattr(bot_manager, 'memory_usage', 0)
    }
    
    return extended_status

@router.post("/bot/start")
async def start_bot(
    request: Optional[BotStartRequest] = None,
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º")
    
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    strategy = request.strategy if request else None
    pairs = request.pairs if request else None
    
    success, message = await bot_manager.start(strategy=strategy, pairs=pairs)
    
    if not success:
        raise HTTPException(status_code=400, detail=message)
    
    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
    await ws_manager.broadcast({
        "type": "bot_started",
        "strategy": strategy,
        "pairs": pairs or [],
        "timestamp": datetime.utcnow()
    })
    
    return {"status": "started", "message": message, "strategy": strategy, "pairs": pairs}


def set_bot_manager(manager):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞"""
    global bot_manager
    bot_manager = manager

@router.post("/bot/stop")
async def stop_bot(current_user: User = Depends(get_current_user)):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º")
    
    success, message = await bot_manager.stop()
    
    if not success:
        raise HTTPException(status_code=400, detail=message)
    
    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
    await ws_manager.broadcast({
        "type": "bot_stopped",
        "timestamp": datetime.utcnow()
    })
    
    return {"status": "stopped", "message": message}

@router.get("/pairs")
async def get_trading_pairs(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    pairs = db.query(TradingPair).all()
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º
    enhanced_pairs = []
    for pair in pairs:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–¥–µ–ª–∫–∞–º
        recent_trades = db.query(Trade).filter(
            Trade.symbol == pair.symbol,
            Trade.created_at >= datetime.utcnow() - timedelta(days=7)
        ).all()
        
        profit_sum = sum(t.profit or 0 for t in recent_trades)
        
        enhanced_pairs.append({
            "id": pair.id,
            "symbol": pair.symbol,
            "is_active": pair.is_active,
            "min_quantity": pair.min_quantity,
            "weekly_trades": len(recent_trades),
            "weekly_profit": profit_sum,
            "last_trade": recent_trades[0].created_at if recent_trades else None
        })
    
    return enhanced_pairs

@router.post("/pairs")
async def update_trading_pairs(
    pairs: List[str],
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"""
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    success, message = await bot_manager.update_pairs(pairs)
    
    if not success:
        raise HTTPException(status_code=400, detail=message)
    
    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
    await ws_manager.broadcast({
        "type": "pairs_updated",
        "pairs": pairs,
        "timestamp": datetime.utcnow()
    })
    
    return {"status": "updated", "message": message, "pairs": pairs}

@router.get("/trades")
async def get_trades(
    skip: int = 0,
    limit: int = 100,
    symbol: Optional[str] = None,
    status: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(Trade)
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if symbol:
        query = query.filter(Trade.symbol == symbol)
    if status:
        query = query.filter(Trade.status == status)
    
    trades = query.order_by(Trade.created_at.desc()).offset(skip).limit(limit).all()
    total = query.count()
    
    return {
        "trades": trades,
        "total": total,
        "skip": skip,
        "limit": limit
    }

@router.get("/trades/{trade_id}")
async def get_trade(
    trade_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–µ"""
    trade = db.query(Trade).filter(Trade.id == trade_id).first()
    if not trade:
        raise HTTPException(status_code=404, detail="–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return trade

@router.get("/signals")
async def get_signals(
    skip: int = 0,
    limit: int = 100,
    signal_type: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(Signal)
    
    if signal_type:
        query = query.filter(Signal.signal_type == signal_type)
    
    signals = query.order_by(Signal.created_at.desc()).offset(skip).limit(limit).all()
    total = query.count()
    
    return {
        "signals": signals,
        "total": total,
        "skip": skip,
        "limit": limit
    }

@router.get("/balance")
async def get_balance(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–µ
    subquery = db.query(
        Balance.currency,
        func.max(Balance.timestamp).label('max_timestamp')
    ).group_by(Balance.currency).subquery()
    
    current_balances = db.query(Balance).join(
        subquery,
        (Balance.currency == subquery.c.currency) & 
        (Balance.timestamp == subquery.c.max_timestamp)
    ).all()
    
    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
    yesterday = datetime.utcnow() - timedelta(days=1)
    balance_history = db.query(Balance).filter(
        Balance.timestamp >= yesterday
    ).order_by(Balance.timestamp.desc()).all()
    
    result = {
        "current": {b.currency: {"total": b.total, "free": b.free, "used": b.used} for b in current_balances},
        "history": [
            {
                "timestamp": b.timestamp,
                "currency": b.currency,
                "total": b.total,
                "free": b.free,
                "used": b.used
            } for b in balance_history
        ]
    }
    
    return result

@router.get("/statistics")
async def get_statistics(
    period: str = "day",  # day, week, month, all
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    if period == "day":
        start_date = datetime.utcnow() - timedelta(days=1)
    elif period == "week":
        start_date = datetime.utcnow() - timedelta(weeks=1)
    elif period == "month":
        start_date = datetime.utcnow() - timedelta(days=30)
    else:
        start_date = datetime.min
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
    trades = db.query(Trade).filter(Trade.created_at >= start_date).all()
    total_trades = len(trades)
    profitable_trades = len([t for t in trades if t.profit and t.profit > 0])
    total_profit = sum(t.profit or 0 for t in trades)
    
    # Win rate
    win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
    
    # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
    avg_profit = total_profit / total_trades if total_trades > 0 else 0
    
    # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞
    best_trade = max(trades, key=lambda t: t.profit or 0) if trades else None
    worst_trade = min(trades, key=lambda t: t.profit or 0) if trades else None
    
    # ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
    pair_stats = {}
    for trade in trades:
        if trade.symbol not in pair_stats:
            pair_stats[trade.symbol] = {
                'total': 0,
                'profitable': 0,
                'profit': 0,
                'avg_profit': 0,
                'win_rate': 0
            }
        pair_stats[trade.symbol]['total'] += 1
        if trade.profit and trade.profit > 0:
            pair_stats[trade.symbol]['profitable'] += 1
        pair_stats[trade.symbol]['profit'] += trade.profit or 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–∞—Ä
    for symbol in pair_stats:
        if pair_stats[symbol]['total'] > 0:
            pair_stats[symbol]['avg_profit'] = pair_stats[symbol]['profit'] / pair_stats[symbol]['total']
            pair_stats[symbol]['win_rate'] = (pair_stats[symbol]['profitable'] / pair_stats[symbol]['total']) * 100
    
    return {
        'period': period,
        'total_trades': total_trades,
        'profitable_trades': profitable_trades,
        'win_rate': win_rate,
        'total_profit': total_profit,
        'average_profit': avg_profit,
        'best_trade': {
            'symbol': best_trade.symbol,
            'profit': best_trade.profit,
            'date': best_trade.created_at
        } if best_trade else None,
        'worst_trade': {
            'symbol': worst_trade.symbol,
            'profit': worst_trade.profit,
            'date': worst_trade.created_at
        } if worst_trade else None,
        'pair_statistics': pair_stats
    }

@router.post("/position/{symbol}/close")
async def close_position(
    symbol: str,
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é"""
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
    
    success, message = await bot_manager.close_position(symbol)
    
    if not success:
        raise HTTPException(status_code=404, detail=message)
    
    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
    await ws_manager.broadcast({
        "type": "position_closed",
        "symbol": symbol,
        "timestamp": datetime.utcnow()
    })
    
    return {"status": "closed", "message": message}

@router.get("/dashboard")
async def get_dashboard_data(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    bot_status = bot_manager.get_status()
    balance = await get_balance(db, current_user)
    statistics = await get_statistics("day", db, current_user)
    recent_trades = await get_trades(0, 10, db=db, current_user=current_user)
    recent_signals = await get_signals(0, 10, db=db, current_user=current_user)
    
    return {
        'bot_status': bot_status,
        'balance': balance,
        'statistics': statistics,
        'recent_trades': recent_trades,
        'recent_signals': recent_signals,
        'timestamp': datetime.utcnow()
    }

# ‚úÖ –ù–æ–≤—ã–µ endpoints –∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
@router.get("/strategies")
async def get_strategies(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        strategies = [
            {"id": "momentum", "name": "Momentum Strategy", "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º"},
            {"id": "multi_indicator", "name": "Multi Indicator", "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"},
            {"id": "scalping", "name": "Scalping", "description": "–°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"},
            {"id": "safe_multi_indicator", "name": "Safe Multi Indicator", "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"},
            {"id": "conservative", "name": "Conservative", "description": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"}
        ]
        
        return {"strategies": strategies}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return {"strategies": []}

@router.post("/settings")
async def save_settings(
    settings: SettingsRequest,
    current_user: User = Depends(get_current_user)
):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    try:
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.username}: {settings}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
        await ws_manager.broadcast({
            "type": "settings_updated",
            "settings": settings.dict(),
            "timestamp": datetime.utcnow()
        })
        
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health_info = {
            "status": "healthy",
            "bot_manager": bool(bot_manager),
            "websocket_connections": len(ws_manager.active_connections),
            "timestamp": datetime.utcnow()
        }
        
        if hasattr(bot_manager, 'get_health_info'):
            bot_health = bot_manager.get_health_info()
            health_info.update(bot_health)
        
        return health_info
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {"status": "unhealthy", "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/export/trades")
async def export_trades(
    format: str = "csv",
    days: int = 30,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    try:
        start_date = datetime.utcnow() - timedelta(days=days)
        trades = db.query(Trade).filter(Trade.created_at >= start_date).all()
        
        if format.lower() == "csv":
            output = io.StringIO()
            writer = csv.writer(output)
            writer.writerow(["–í—Ä–µ–º—è", "–ü–∞—Ä–∞", "–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–ü—Ä–∏–±—ã–ª—å", "–°—Ç–∞—Ç—É—Å"])
            
            for trade in trades:
                writer.writerow([
                    trade.created_at,
                    trade.symbol,
                    trade.side,
                    trade.quantity,
                    trade.price,
                    trade.profit or 0,
                    trade.status
                ])
            
            output.seek(0)
            return {"format": "csv", "data": output.getvalue(), "count": len(trades)}
        
        return {"error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@router.get("/analytics/report")
async def get_analytics_report(
    days: int = 30,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
    try:
        from ..analysis.advanced_analytics import advanced_analytics
        report = await advanced_analytics.generate_performance_report(days)
        return report
    except ImportError:
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return {"error": "–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

@router.get("/analytics/trade/{trade_id}")
async def analyze_trade_context(
    trade_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    try:
        from ..analysis.advanced_analytics import advanced_analytics
        from ..analysis.market_analyzer import MarketAnalyzer
        
        trade = db.query(Trade).filter(Trade.id == trade_id).first()
        if not trade:
            raise HTTPException(status_code=404, detail="Trade not found")
        
        analyzer = MarketAnalyzer()
        market_data = await analyzer.analyze_symbol(trade.symbol)
        
        if market_data and 'df' in market_data:
            analysis = await advanced_analytics.analyze_trade_context(trade_id, market_data['df'])
            return analysis
        else:
            return {"error": "No market data available"}
    
    except ImportError:
        return {"error": "–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}