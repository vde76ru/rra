"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/notifications/telegram.py
"""
import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List
import aiohttp

from ..core.config import config

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.chat_id = config.TELEGRAM_CHAT_ID
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
        
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    async def send_message(self, text: str, parse_mode: str = 'HTML', disable_notification: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                data = {
                    'chat_id': self.chat_id,
                    'text': text,
                    'parse_mode': parse_mode,
                    'disable_notification': disable_notification
                }
                
                async with session.post(url, json=data) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_text}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    async def send_startup_message(self, pairs: List[str], mode: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        text = f"""üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>
        
üìä –†–µ–∂–∏–º: <code>{mode}</code>
üí± –ü–∞—Ä—ã: <code>{', '.join(pairs)}</code>
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üåê –í–µ–±: <a href="http://systemetech.ru:8000">–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥</a>
        
<i>–£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!</i>"""
        
        await self.send_message(text)
    
    async def send_shutdown_message(self, runtime: Optional[timedelta], trades_count: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        runtime_str = str(runtime).split('.')[0] if runtime else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text = f"""üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>
        
‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>{runtime_str}</code>
üìä –°–¥–µ–ª–æ–∫ –∑–∞ —Å–µ—Å—Å–∏—é: <code>{trades_count}</code>
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
<i>–î–æ –≤—Å—Ç—Ä–µ—á–∏!</i>"""
        
        await self.send_message(text)
    
    async def send_trade_opened(self, symbol: str, side: str, amount: float, price: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        emoji = "üü¢" if side == "BUY" else "üî¥"
        
        text = f"""{emoji} <b>–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>
        
üí± –ü–∞—Ä–∞: <code>{symbol}</code>
üìä –°—Ç–æ—Ä–æ–Ω–∞: <code>{side}</code>
üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{amount:.4f}</code>
üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <code>${price:.2f}</code>
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""
        
        await self.send_message(text)
    
    async def send_trade_closed(self, symbol: str, side: str, profit: float, reason: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        emoji = "‚úÖ" if profit > 0 else "‚ùå"
        profit_emoji = "üìà" if profit > 0 else "üìâ"
        
        text = f"""{emoji} <b>–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>
        
üí± –ü–∞—Ä–∞: <code>{symbol}</code>
üìä –°—Ç–æ—Ä–æ–Ω–∞: <code>{side}</code>
{profit_emoji} –ü—Ä–∏–±—ã–ª—å: <code>${profit:.2f}</code>
üìù –ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""
        
        await self.send_message(text)
    
    async def send_daily_report(self, stats: Dict):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        text = f"""üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç</b>
        
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d')}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <code>{stats.get('total_trades', 0)}</code>
- –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: <code>{stats.get('profitable_trades', 0)}</code>
- –£–±—ã—Ç–æ—á–Ω—ã—Ö: <code>{stats.get('losing_trades', 0)}</code>
- Win Rate: <code>{stats.get('win_rate', 0):.1f}%</code>

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <code>${stats.get('total_profit', 0):.2f}</code>
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: <code>${stats.get('avg_profit', 0):.2f}</code>
- –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: <code>${stats.get('best_trade', 0):.2f}</code>
- –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: <code>${stats.get('worst_trade', 0):.2f}</code>

üíº <b>–ë–∞–ª–∞–Ω—Å:</b>
- –ù–∞—á–∞–ª—å–Ω—ã–π: <code>${stats.get('start_balance', 0):.2f}</code>
- –¢–µ–∫—É—â–∏–π: <code>${stats.get('current_balance', 0):.2f}</code>
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <code>{stats.get('balance_change', 0):.2f}%</code>

üèÜ <b>–õ—É—á—à–∞—è –ø–∞—Ä–∞:</b> <code>{stats.get('best_pair', 'N/A')}</code>
        
<i>–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!</i>"""
        
        await self.send_message(text, disable_notification=True)
    
    async def send_error(self, error: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(error) > 500:
            error = error[:497] + "..."
        
        text = f"""üö® <b>–û—à–∏–±–∫–∞</b>
        
<code>{error}</code>
        
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""
        
        await self.send_message(text)
    
    async def send_warning(self, warning: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏"""
        text = f"""‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>
        
{warning}
        
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"""
        
        await self.send_message(text, disable_notification=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()