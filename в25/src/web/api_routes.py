"""
API —Ä–æ—É—Ç—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞
–§–∞–π–ª: src/web/api_routes.py
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from fastapi import APIRouter, HTTPException, WebSocket, WebSocketDisconnect, Depends
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import pandas as pd
import io
import csv

from ..core.database import get_db_session
from ..core.models import Trade, BotStatus
from ..bot.manager import BotManager  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: BotManager –≤–º–µ—Å—Ç–æ TradingBotManager
from .dashboard import get_dashboard_html
from ..core.clean_logging import trading_logger, get_clean_logger

logger = get_clean_logger(__name__)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class BotStartRequest(BaseModel):
    strategy: str
    pairs: Optional[List[str]] = None

class SettingsRequest(BaseModel):
    max_position_size: float
    stop_loss: float
    take_profit: float
    max_daily_trades: int
    trading_pairs: List[str]
    email_notifications: bool = True
    telegram_notifications: bool = False
    telegram_token: Optional[str] = None

class TradeResponse(BaseModel):
    id: int
    timestamp: datetime
    symbol: str
    side: str
    amount: float
    price: float
    profit: float
    strategy: str
    status: str

class StatsResponse(BaseModel):
    total_trades: int
    total_profit: float
    success_rate: float
    active_positions: int
    daily_trades: int
    best_pair: str
    worst_pair: str

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class WebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def broadcast(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message = json.dumps(data, default=str, ensure_ascii=False)
        disconnected = []
        
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
ws_manager = WebSocketManager()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è API
router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
bot_manager: Optional[BotManager] = None  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: BotManager

def set_bot_manager(manager: BotManager):  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: BotManager
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞"""
    global bot_manager
    bot_manager = manager

@router.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return HTMLResponse(get_dashboard_html())

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await ws_manager.connect(websocket)
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            
            if bot_manager:
                status_data = {
                    "type": "bot_status",
                    "status": "active" if bot_manager.status.value in ["running", "starting"] else "inactive",
                    "strategy": getattr(bot_manager, 'current_strategy', None),
                    "positions": len(bot_manager.positions) if hasattr(bot_manager, 'positions') else 0,
                    "timestamp": datetime.now()
                }
                await websocket.send_text(json.dumps(status_data, default=str))
    
    except WebSocketDisconnect:
        ws_manager.disconnect(websocket)

@router.get("/api/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    if not bot_manager:
        return {"status": "inactive", "strategy": None, "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    return {
        "status": "active" if bot_manager.status.value in ["running", "starting"] else "inactive",
        "strategy": getattr(bot_manager, 'current_strategy', None),
        "positions": len(bot_manager.positions) if hasattr(bot_manager, 'positions') else 0,
        "uptime": str(datetime.now() - bot_manager.start_time) if bot_manager.start_time else None,
        "trades_today": getattr(bot_manager, 'trades_today', 0),
        "cycles_count": getattr(bot_manager, 'cycles_count', 0)
    }

@router.post("/api/bot/start")
async def start_bot(request: BotStartRequest):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        success, message = await bot_manager.start()
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            await ws_manager.broadcast({
                "type": "bot_started",
                "strategy": request.strategy,
                "pairs": request.pairs or [],
                "timestamp": datetime.now()
            })
            
            return {"success": True, "message": f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ: {message}"}
        else:
            raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {message}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@router.post("/api/bot/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        success, message = await bot_manager.stop()
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            await ws_manager.broadcast({
                "type": "bot_stopped",
                "timestamp": datetime.now()
            })
            
            return {"success": True, "message": f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message}"}
        else:
            raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {message}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")

@router.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if not bot_manager:
        return {
            "total_trades": 0,
            "total_profit": 0.0,
            "success_rate": 0.0,
            "active_positions": 0,
            "daily_trades": 0,
            "best_pair": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "worst_pair": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        positions_count = len(bot_manager.positions) if hasattr(bot_manager, 'positions') else 0
        trades_today = getattr(bot_manager, 'trades_today', 0)
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            "total_trades": trades_today,
            "total_profit": 0.0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –∏–∑ –ë–î
            "success_rate": 0.0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –∏–∑ –ë–î
            "active_positions": positions_count,
            "daily_trades": trades_today,
            "best_pair": "BTCUSDT",  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "worst_pair": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        }
        
        return stats
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.get("/api/trades")
async def get_trades(limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    try:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        # db = get_db_session()
        # trades = db.query(Trade).order_by(Trade.timestamp.desc()).limit(limit).all()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        trades = []
        
        return {
            "trades": trades,
            "total": len(trades)
        }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {str(e)}")

@router.get("/api/strategies")
async def get_strategies():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    if not bot_manager:
        return {"strategies": []}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_factory = getattr(bot_manager, 'strategy_factory', None)
        if strategy_factory:
            strategies = [
                {"id": "momentum", "name": "Momentum Strategy", "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º"},
                {"id": "multi_indicator", "name": "Multi Indicator", "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"},
                {"id": "scalping", "name": "Scalping", "description": "–°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"},
                {"id": "safe_multi_indicator", "name": "Safe Multi Indicator", "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"},
                {"id": "conservative", "name": "Conservative", "description": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"}
            ]
        else:
            strategies = []
        
        return {"strategies": strategies}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return {"strategies": []}

@router.get("/api/pairs")
async def get_trading_pairs():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        pairs = [
            {"symbol": "BTCUSDT", "name": "Bitcoin/USDT", "active": True},
            {"symbol": "ETHUSDT", "name": "Ethereum/USDT", "active": True},
            {"symbol": "ADAUSDT", "name": "Cardano/USDT", "active": False},
            {"symbol": "DOTUSDT", "name": "Polkadot/USDT", "active": False},
            {"symbol": "LINKUSDT", "name": "Chainlink/USDT", "active": False}
        ]
        
        return {"pairs": pairs}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {str(e)}")

@router.post("/api/settings")
async def save_settings(settings: SettingsRequest):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    try:
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await ws_manager.broadcast({
            "type": "settings_updated",
            "settings": settings.dict(),
            "timestamp": datetime.now()
        })
        
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

@router.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    if not bot_manager:
        return {"status": "unhealthy", "message": "–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    try:
        health_info = bot_manager.get_health_info()
        return health_info
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {"status": "unhealthy", "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/api/logs")
async def get_logs(lines: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        logs = [
            {"timestamp": datetime.now(), "level": "INFO", "message": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"},
            {"timestamp": datetime.now(), "level": "DEBUG", "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        ]
        
        return {"logs": logs}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
@router.get("/api/export/trades")
async def export_trades():
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ –≤ CSV"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(["–í—Ä–µ–º—è", "–ü–∞—Ä–∞", "–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–ü—Ä–∏–±—ã–ª—å"])
        
        # –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        
        output.seek(0)
        return {"csv_data": output.getvalue()}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

# –†–æ—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
@router.get("/favicon.ico")
async def favicon():
    """–§–∞–≤–∏–∫–æ–Ω –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
    return {"message": "No favicon"}