"""
–ü–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
–§–∞–π–ª: src/web/dashboard.py
"""

def get_dashboard_html() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç - –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .header h1 {
            text-align: center;
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .status-bar {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            background: rgba(52, 152, 219, 0.1);
            border-radius: 25px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .status-item.active {
            background: rgba(46, 204, 113, 0.2);
            border-color: #2ecc71;
        }
        
        .status-item.error {
            background: rgba(231, 76, 60, 0.2);
            border-color: #e74c3c;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #95a5a6;
            animation: pulse 2s infinite;
        }
        
        .status-dot.active {
            background: #2ecc71;
        }
        
        .status-dot.error {
            background: #e74c3c;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .control-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.4em;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin: 5px;
            min-width: 120px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }
        
        .btn.btn-success {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
        }
        
        .btn.btn-success:hover {
            box-shadow: 0 5px 15px rgba(46, 204, 113, 0.4);
        }
        
        .btn.btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }
        
        .btn.btn-danger:hover {
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.4);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .input-group {
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .input-group select,
        .input-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            font-size: 1em;
            transition: border-color 0.3s ease;
            background: white;
        }
        
        .input-group select:focus,
        .input-group input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .stat-card.positive .stat-number {
            color: #2ecc71;
        }
        
        .stat-card.negative .stat-number {
            color: #e74c3c;
        }
        
        .trades-table {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .trades-table table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .trades-table th,
        .trades-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }
        
        .trades-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .trades-table tr:hover {
            background: rgba(52, 152, 219, 0.05);
        }
        
        .profit {
            color: #2ecc71;
            font-weight: bold;
        }
        
        .loss {
            color: #e74c3c;
            font-weight: bold;
        }
        
        .logs-container {
            background: rgba(0, 0, 0, 0.9);
            color: #00ff00;
            font-family: 'Courier New', monospace;
            border-radius: 15px;
            padding: 20px;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 20px;
        }
        
        .log-entry {
            margin: 5px 0;
            padding: 5px;
            border-left: 3px solid #00ff00;
            padding-left: 10px;
        }
        
        .log-error {
            color: #ff4444;
            border-left-color: #ff4444;
        }
        
        .log-warning {
            color: #ffaa00;
            border-left-color: #ffaa00;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #2196F3;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.success {
            background: #2ecc71;
        }
        
        .notification.error {
            background: #e74c3c;
        }
        
        .notification.info {
            background: #3498db;
        }
        
        @media (max-width: 768px) {
            .header h1 {
                font-size: 2em;
            }
            
            .status-bar {
                flex-direction: column;
                align-items: center;
            }
            
            .control-panel {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç</h1>
        <div class="status-bar">
            <div class="status-item" id="bot-status">
                <span class="status-dot" id="bot-dot"></span>
                <span>–°—Ç–∞—Ç—É—Å: <span id="bot-status-text">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span></span>
            </div>
            <div class="status-item" id="connection-status">
                <span class="status-dot active"></span>
                <span>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ</span>
            </div>
            <div class="status-item">
                <span class="status-dot active"></span>
                <span>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞</span>
            </div>
            <div class="status-item">
                <span class="status-dot active"></span>
                <span>–ë–∏—Ä–∂–∞: Bybit</span>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="total-trades">0</div>
                <div class="stat-label">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div>
            </div>
            <div class="stat-card positive">
                <div class="stat-number" id="total-profit">+0.00 USDT</div>
                <div class="stat-label">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="success-rate">0%</div>
                <div class="stat-label">–£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="active-positions">0</div>
                <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏</div>
            </div>
        </div>

        <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
        <div class="control-panel">
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º -->
            <div class="card">
                <h3>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</h3>
                <div class="input-group">
                    <label for="strategy-select">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:</label>
                    <select id="strategy-select">
                        <option value="momentum">Momentum - –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º</option>
                        <option value="multi_indicator">Multi Indicator - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã</option>
                        <option value="scalping">Scalping - –°–∫–∞–ª—å–ø–∏–Ω–≥</option>
                        <option value="safe_multi_indicator">Safe Multi Indicator - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</option>
                        <option value="conservative">Conservative - –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</option>
                    </select>
                </div>
                <div style="text-align: center;">
                    <button id="start-bot" class="btn btn-success">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
                    <button id="stop-bot" class="btn btn-danger">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</button>
                </div>
            </div>

            <!-- –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã -->
            <div class="card">
                <h3>üí± –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã</h3>
                <div style="margin-bottom: 15px;">
                    <label>
                        <input type="checkbox" checked> BTCUSDT - Bitcoin/USDT
                    </label>
                </div>
                <div style="margin-bottom: 15px;">
                    <label>
                        <input type="checkbox" checked> ETHUSDT - Ethereum/USDT
                    </label>
                </div>
                <div style="margin-bottom: 15px;">
                    <label>
                        <input type="checkbox"> ADAUSDT - Cardano/USDT
                    </label>
                </div>
                <div style="margin-bottom: 15px;">
                    <label>
                        <input type="checkbox"> DOTUSDT - Polkadot/USDT
                    </label>
                </div>
                <button class="btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
            </div>

            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ -->
            <div class="card">
                <h3>‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏</h3>
                <div class="input-group">
                    <label for="max-position">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%):</label>
                    <input type="number" id="max-position" value="5" min="1" max="100" step="0.5">
                </div>
                <div class="input-group">
                    <label for="stop-loss">–°—Ç–æ–ø-–ª–æ—Å—Å (%):</label>
                    <input type="number" id="stop-loss" value="2" min="0.5" max="10" step="0.5">
                </div>
                <div class="input-group">
                    <label for="take-profit">–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%):</label>
                    <input type="number" id="take-profit" value="4" min="1" max="20" step="0.5">
                </div>
                <div class="input-group">
                    <label for="max-trades">–ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å:</label>
                    <input type="number" id="max-trades" value="10" min="1" max="50" step="1">
                </div>
            </div>

            <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
            <div class="card">
                <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <div style="margin-bottom: 20px;">
                    <label style="display: flex; align-items: center; gap: 10px;">
                        <span>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</span>
                        <label class="toggle-switch">
                            <input type="checkbox" id="email-notifications" checked>
                            <span class="slider"></span>
                        </label>
                    </label>
                </div>
                <div style="margin-bottom: 20px;">
                    <label style="display: flex; align-items: center; gap: 10px;">
                        <span>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</span>
                        <label class="toggle-switch">
                            <input type="checkbox" id="telegram-notifications">
                            <span class="slider"></span>
                        </label>
                    </label>
                </div>
                <div class="input-group">
                    <label for="telegram-token">Telegram Bot Token:</label>
                    <input type="text" id="telegram-token" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞">
                </div>
            </div>

            <!-- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div class="card">
                <h3>üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞</h3>
                <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> <span id="uptime">00:00:00</span></p>
                <p><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª:</strong> <span id="last-cycle">–ù–∏–∫–æ–≥–¥–∞</span></p>
                <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤:</strong> <span id="cycles-count">0</span></p>
                <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</strong> <span id="memory-usage">0 MB</span></p>
                <div style="margin-top: 15px;">
                    <button class="btn" onclick="exportTrades()">üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫</button>
                    <button class="btn" onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏</button>
                </div>
            </div>

            <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
            <div class="card">
                <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                <button class="btn" onclick="closeAllPositions()">‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏</button>
                <button class="btn" onclick="pauseTrading()">‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é</button>
                <button class="btn" onclick="resumeTrading()">‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é</button>
                <button class="btn" onclick="restartBot()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</button>
            </div>
        </div>

        <!-- –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ -->
        <div class="trades-table">
            <h3 style="padding: 20px; margin: 0; background: #f8f9fa; border-bottom: 1px solid #ecf0f1;">üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</h3>
            <table>
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–ü–∞—Ä–∞</th>
                        <th>–¢–∏–ø</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                        <th>–¶–µ–Ω–∞</th>
                        <th>–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫</th>
                        <th>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                </thead>
                <tbody id="trades-tbody">
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 40px; color: #7f8c8d;">
                            –ü–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- –õ–æ–≥–∏ -->
        <div class="logs-container">
            <h3 style="color: #00ff00; margin-bottom: 15px;">üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h3>
            <div id="logs-content">
                <div class="log-entry">[–°–ò–°–¢–ï–ú–ê] –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ</div>
                <div class="log-entry">[–°–ò–°–¢–ï–ú–ê] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...</div>
            </div>
        </div>
    </div>

    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let ws = null;
        let botStatus = 'inactive';
        let isConnected = false;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            connectWebSocket();
            loadBotStatus();
            loadStats();
            setupEventListeners();
            updateUptime();
            setInterval(updateUptime, 1000);
        });

        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function() {
                isConnected = true;
                addLog('[–°–ò–°–¢–ï–ú–ê] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
                updateConnectionStatus(true);
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                handleWebSocketMessage(data);
            };
            
            ws.onclose = function() {
                isConnected = false;
                addLog('[–°–ò–°–¢–ï–ú–ê] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'warning');
                updateConnectionStatus(false);
                setTimeout(connectWebSocket, 5000);
            };
            
            ws.onerror = function(error) {
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ WebSocket: ' + error, 'error');
            };
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
        function handleWebSocketMessage(data) {
            switch(data.type) {
                case 'bot_status':
                    updateBotStatus(data.status, data.strategy);
                    document.getElementById('active-positions').textContent = data.positions || 0;
                    break;
                case 'bot_started':
                    showNotification('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                    addLog('[–ë–û–¢] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: ' + data.strategy);
                    break;
                case 'bot_stopped':
                    showNotification('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
                    addLog('[–ë–û–¢] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    break;
                case 'new_trade':
                    addTradeToTable(data.trade);
                    updateStats();
                    break;
                case 'settings_updated':
                    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                    addLog('[–ù–ê–°–¢–†–û–ô–ö–ò] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                    break;
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        function setupEventListeners() {
            document.getElementById('start-bot').addEventListener('click', startBot);
            document.getElementById('stop-bot').addEventListener('click', stopBot);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        async function loadBotStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                updateBotStatus(data.status, data.strategy);
                document.getElementById('active-positions').textContent = data.positions || 0;
                document.getElementById('cycles-count').textContent = data.cycles_count || 0;
            } catch (error) {
                addLog('[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ' + error, 'error');
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                document.getElementById('total-trades').textContent = data.total_trades || 0;
                document.getElementById('total-profit').textContent = 
                    (data.total_profit >= 0 ? '+' : '') + (data.total_profit || 0).toFixed(2) + ' USDT';
                document.getElementById('success-rate').textContent = 
                    (data.success_rate || 0).toFixed(1) + '%';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                const profitElement = document.getElementById('total-profit').parentElement;
                profitElement.className = 'stat-card ' + (data.total_profit >= 0 ? 'positive' : 'negative');
            } catch (error) {
                addLog('[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ' + error, 'error');
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        function updateBotStatus(status, strategy) {
            const statusElement = document.getElementById('bot-status-text');
            const dotElement = document.getElementById('bot-dot');
            const statusContainer = document.getElementById('bot-status');
            
            botStatus = status;
            
            if (status === 'active') {
                statusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω' + (strategy ? ` (${strategy})` : '');
                dotElement.className = 'status-dot active';
                statusContainer.className = 'status-item active';
            } else {
                statusElement.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                dotElement.className = 'status-dot';
                statusContainer.className = 'status-item';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            document.getElementById('start-bot').disabled = (status === 'active');
            document.getElementById('stop-bot').disabled = (status !== 'active');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function updateConnectionStatus(connected) {
            const statusElement = document.getElementById('connection-status');
            if (connected) {
                statusElement.className = 'status-item active';
                statusElement.querySelector('span:last-child').textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ';
            } else {
                statusElement.className = 'status-item error';
                statusElement.querySelector('span:last-child').textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ü–æ—Ç–µ—Ä—è–Ω–æ';
            }
        }

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        async function startBot() {
            const strategy = document.getElementById('strategy-select').value;
            
            try {
                const response = await fetch('/api/bot/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ strategy: strategy })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', 'info');
                    addLog('[–ë–û–¢] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: ' + strategy);
                } else {
                    throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message, 'error');
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message, 'error');
            }
        }

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        async function stopBot() {
            try {
                const response = await fetch('/api/bot/stop', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification('–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', 'info');
                    addLog('[–ë–û–¢] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');
                } else {
                    throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                showNotification('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message, 'error');
                addLog('[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message, 'error');
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        function updateUptime() {
            // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            const now = new Date();
            const uptimeStr = now.toLocaleTimeString('ru-RU');
            document.getElementById('last-cycle').textContent = uptimeStr;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
        function addLog(message, type = 'info') {
            const logsContent = document.getElementById('logs-content');
            const logEntry = document.createElement('div');
            
            const timestamp = new Date().toLocaleTimeString('ru-RU');
            logEntry.textContent = `[${timestamp}] ${message}`;
            
            logEntry.className = 'log-entry';
            if (type === 'error') {
                logEntry.className += ' log-error';
            } else if (type === 'warning') {
                logEntry.className += ' log-warning';
            }
            
            logsContent.appendChild(logEntry);
            logsContent.scrollTop = logsContent.scrollHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            if (logsContent.children.length > 100) {
                logsContent.removeChild(logsContent.firstChild);
            }
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        function addTradeToTable(trade) {
            const tbody = document.getElementById('trades-tbody');
            
            // –£–¥–∞–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (tbody.children.length === 1 && tbody.children[0].children.length === 1) {
                tbody.innerHTML = '';
            }
            
            const row = document.createElement('tr');
            const profitClass = trade.profit >= 0 ? 'profit' : 'loss';
            
            row.innerHTML = `
                <td>${new Date(trade.timestamp).toLocaleString('ru-RU')}</td>
                <td>${trade.symbol}</td>
                <td>${trade.side === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}</td>
                <td>${trade.amount}</td>
                <td>$${trade.price.toFixed(2)}</td>
                <td class="${profitClass}">${trade.profit >= 0 ? '+' : ''}${trade.profit.toFixed(2)} USDT</td>
                <td>${trade.strategy}</td>
                <td>${trade.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}</td>
            `;
            
            tbody.insertBefore(row, tbody.firstChild);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            if (tbody.children.length > 50) {
                tbody.removeChild(tbody.lastChild);
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function exportTrades() {
            showNotification('–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫...', 'info');
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        }

        function clearLogs() {
            document.getElementById('logs-content').innerHTML = '';
            addLog('[–°–ò–°–¢–ï–ú–ê] –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
        }

        function closeAllPositions() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?')) {
                showNotification('–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π...', 'info');
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
            }
        }

        function pauseTrading() {
            showNotification('–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'info');
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
        }

        function resumeTrading() {
            showNotification('–¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info');
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        }

        function restartBot() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?')) {
                showNotification('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...', 'info');
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function updateStats() {
            loadStats(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        }
    </script>
</body>
</html>
    """
    
    return html


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è API

class DashboardAPI:
    """API –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    
    @staticmethod
    async def get_bot_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        return {"status": "inactive", "strategy": None}
    
    @staticmethod
    async def start_bot(strategy: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        return {"success": True, "message": f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy}"}
    
    @staticmethod
    async def stop_bot():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        return {"success": True, "message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
    
    @staticmethod
    async def get_stats():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return {
            "totalTrades": 0,
            "totalProfit": 0.0,
            "successRate": 0.0,
            "activePositions": 0
        }
    
    @staticmethod
    async def get_trades():
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
        return []
    
    @staticmethod
    async def save_settings(settings: dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}


def setup_dashboard_routes(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    @app.get("/")
    async def dashboard():
        return HTMLResponse(get_dashboard_html())
    
    @app.get("/api/status")
    async def get_status():
        return await DashboardAPI.get_bot_status()
    
    @app.post("/api/bot/start")
    async def start_bot(data: dict):
        strategy = data.get("strategy", "momentum")
        return await DashboardAPI.start_bot(strategy)
    
    @app.post("/api/bot/stop")
    async def stop_bot():
        return await DashboardAPI.stop_bot()
    
    @app.get("/api/stats")
    async def get_stats():
        return await DashboardAPI.get_stats()
    
    @app.get("/api/trades")
    async def get_trades():
        return await DashboardAPI.get_trades()
    
    @app.post("/api/settings")
    async def save_settings(settings: dict):
        return await DashboardAPI.save_settings(settings)


if __name__ == "__main__":
    print("–î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)")
    print("- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("- –í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("- –ß–∏—Å—Ç—ã–µ –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
    print("- –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")