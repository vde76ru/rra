import os
import asyncio
from datetime import datetime
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
import logging
from typing import Optional, List, Dict
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class NotificationMessage:
    title: str
    text: str
    level: str  # INFO, WARNING, ERROR, TRADE
    data: Optional[Dict] = None
    
class TelegramNotifier:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        self.bot = Bot(token=self.bot_token) if self.bot_token else None
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if not self.enabled:
            logger.warning("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id")
    
    async def send_notification(self, message: NotificationMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.enabled:
            return
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = self._format_message(message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            reply_markup = None
            if message.level == 'TRADE' and message.data:
                reply_markup = self._create_trade_keyboard(message.data)
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    def _format_message(self, message: NotificationMessage) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        icons = {
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': 'üö®',
            'TRADE': 'üí∞',
            'SUCCESS': '‚úÖ',
            'LOSS': '‚ùå'
        }
        
        icon = icons.get(message.level, 'üìå')
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        text = f"{icon} <b>{message.title}</b>\n"
        text += f"‚è∞ {timestamp}\n\n"
        text += f"{message.text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if message.data:
            text += "\n<b>–î–µ—Ç–∞–ª–∏:</b>\n"
            for key, value in message.data.items():
                if isinstance(value, float):
                    text += f"‚Ä¢ {key}: {value:.4f}\n"
                else:
                    text += f"‚Ä¢ {key}: {value}\n"
        
        return text
    
    def _create_trade_keyboard(self, trade_data: Dict) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π"""
        keyboard = []
        
        if trade_data.get('status') == 'SIGNAL':
            keyboard.append([
                InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"execute_{trade_data['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{trade_data['id']}")
            ])
        
        return InlineKeyboardMarkup(keyboard) if keyboard else None
    
    async def send_trade_opened(self, trade):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        message = NotificationMessage(
            title="–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞",
            text=f"–û—Ç–∫—Ä—ã—Ç–∞ {trade.side} –ø–æ–∑–∏—Ü–∏—è –ø–æ {trade.symbol}",
            level="TRADE",
            data={
                "–°–∏–º–≤–æ–ª": trade.symbol,
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": trade.side,
                "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": trade.entry_price,
                "–û–±—ä–µ–º": trade.quantity,
                "Stop Loss": trade.stop_loss if hasattr(trade, 'stop_loss') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                "Take Profit": trade.take_profit if hasattr(trade, 'take_profit') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            }
        )
        await self.send_notification(message)
    
    async def send_trade_closed(self, trade):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏"""
        profit_emoji = "‚úÖ" if trade.profit >= 0 else "‚ùå"
        
        message = NotificationMessage(
            title=f"{profit_emoji} –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞",
            text=f"–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {trade.symbol}",
            level="SUCCESS" if trade.profit >= 0 else "LOSS",
            data={
                "–°–∏–º–≤–æ–ª": trade.symbol,
                "–ü—Ä–∏–±—ã–ª—å": f"${trade.profit:.2f}",
                "–ü—Ä–∏–±—ã–ª—å %": f"{(trade.profit / (trade.entry_price * trade.quantity)) * 100:.2f}%",
                "–í—Ä–µ–º—è –≤ —Å–¥–µ–ª–∫–µ": str(trade.closed_at - trade.created_at) if trade.closed_at else "N/A"
            }
        )
        await self.send_notification(message)
    
    async def send_daily_report(self, stats):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        message = NotificationMessage(
            title="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç",
            text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
            level="INFO",
            data={
                "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": stats['total_trades'],
                "–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö": stats['profitable_trades'],
                "–£–±—ã—Ç–æ—á–Ω—ã—Ö": stats['losing_trades'],
                "–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å": f"${stats['total_profit']:.2f}",
                "Win Rate": f"{stats['win_rate']:.1f}%",
                "–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞": f"${stats['best_trade']:.2f}",
                "–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞": f"${stats['worst_trade']:.2f}"
            }
        )
        await self.send_notification(message)