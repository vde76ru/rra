#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
–§–∞–π–ª: final_test.py
"""
import os
import sys
import asyncio
import json
import time
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import importlib
import importlib.metadata

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
from dotenv import load_dotenv
load_dotenv('/etc/crypto/config/.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {}
        self.errors = []
        self.warnings = []
        self.start_time = datetime.now()
        
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ /etc/crypto/config/.env{Colors.ENDC}")
        print(f"{Colors.BOLD}{Colors.CYAN}üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´{Colors.ENDC}")
        print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        self.results['environment'] = await self.test_environment()
        self.results['database'] = await self.test_database_connection()
        self.results['exchange'] = await self.test_exchange_connection()
        self.results['modules'] = await self.test_core_modules()
        self.results['trading'] = await self.test_trading_logic()
        self.results['web'] = await self.test_web_interface()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_final_report()
        
        return self.results
    
    async def test_environment(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º:
        - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Python –ø–∞–∫–µ—Ç—ã
        - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        - –°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è{Colors.ENDC}")
        results = {
            'modules': {},
            'env_vars': {},
            'directories': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
        required_modules = {
            'ccxt': 'ccxt',
            'pandas': 'pandas',
            'numpy': 'numpy',
            'sqlalchemy': 'sqlalchemy',
            'flask': 'flask',
            'torch': 'torch',
            'transformers': 'transformers'
        }
        
        # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π
        for name, import_name in required_modules.items():
            try:
                module = importlib.import_module(import_name)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
                if hasattr(module, '__version__'):
                    version = module.__version__
                elif hasattr(module, 'version'):
                    version = module.version
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º importlib.metadata –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
                    try:
                        version = importlib.metadata.version(import_name)
                    except:
                        version = 'unknown'
                
                results['modules'][name] = version
                print(f"  {Colors.GREEN}‚úÖ {name} v{version}{Colors.ENDC}")
            except ImportError:
                results['modules'][name] = None
                self.errors.append(f"–ü–∞–∫–µ—Ç {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print(f"  {Colors.RED}‚ùå {name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.ENDC}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è scikit-learn
        try:
            import sklearn
            version = sklearn.__version__
            results['modules']['scikit-learn'] = version
            print(f"  {Colors.GREEN}‚úÖ scikit-learn v{version}{Colors.ENDC}")
        except ImportError:
            results['modules']['scikit-learn'] = None
            self.errors.append("–ü–∞–∫–µ—Ç scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print(f"  {Colors.RED}‚ùå scikit-learn - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env = [
            'BYBIT_API_KEY', 'BYBIT_API_SECRET', 'DATABASE_URL',
            'SECRET_KEY', 'JWT_SECRET_KEY', 'BYBIT_TESTNET'
        ]
        
        for var in required_env:
            value = os.getenv(var)
            if value:
                results['env_vars'][var] = 'set'
                print(f"  {Colors.GREEN}‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Colors.ENDC}")
            else:
                results['env_vars'][var] = 'missing'
                self.errors.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                print(f"  {Colors.RED}‚ùå {var} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = ['src', 'logs', 'data', 'models', 'static', 'templates']
        for dir_name in required_dirs:
            dir_path = Path(dir_name)
            if dir_path.exists():
                results['directories'][dir_name] = 'exists'
                print(f"  {Colors.GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç{Colors.ENDC}")
            else:
                dir_path.mkdir(exist_ok=True)
                results['directories'][dir_name] = 'created'
                print(f"  {Colors.YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}{Colors.ENDC}")
        
        return results
    
    async def test_database_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü
        - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö{Colors.ENDC}")
        results = {
            'connection': False,
            'tables': {},
            'performance': {}
        }
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            database_url = os.getenv('DATABASE_URL')
            if not database_url:
                raise Exception("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            from sqlalchemy import create_engine, text, inspect
            engine = create_engine(database_url)
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                results['connection'] = True
                print(f"  {Colors.GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            
            for table in tables:
                with engine.connect() as conn:
                    count_result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = count_result.scalar()
                    results['tables'][table] = count
                    print(f"  {Colors.GREEN}‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π{Colors.ENDC}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            start = time.time()
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            query_time = time.time() - start
            results['performance']['query_time'] = query_time
            print(f"  {Colors.BLUE}‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {query_time:.3f}—Å{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}{Colors.ENDC}")
        
        return results
    
    async def test_exchange_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º:
        - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API
        - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–∞—Ö
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit{Colors.ENDC}")
        results = {
            'connection': False,
            'authenticated': False,
            'markets': 0,
            'balance': {}
        }
        
        try:
            import ccxt
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            api_key = os.getenv('BYBIT_API_KEY')
            api_secret = os.getenv('BYBIT_API_SECRET')
            testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'
            
            if testnet:
                print(f"  {Colors.YELLOW}üåê –†–µ–∂–∏–º Testnet –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω{Colors.ENDC}")
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            exchange = ccxt.bybit({
                'apiKey': api_key,
                'secret': api_secret,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True
                }
            })
            
            if testnet:
                exchange.set_sandbox_mode(True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
            markets = exchange.load_markets()
            results['markets'] = len(markets)
            results['connection'] = True
            print(f"  {Colors.GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤{Colors.ENDC}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä BTC/USDT
            ticker = exchange.fetch_ticker('BTC/USDT')
            print(f"  {Colors.GREEN}‚úÖ BTC/USDT —Ü–µ–Ω–∞: ${ticker['last']:,.2f}{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            if api_key and api_secret:
                balance = exchange.fetch_balance()
                results['authenticated'] = True
                print(f"  {Colors.GREEN}‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞{Colors.ENDC}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
                for currency, amount in balance['total'].items():
                    if amount > 0:
                        results['balance'][currency] = amount
                        print(f"    {Colors.CYAN}üí∞ {currency}: {amount}{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
            if hasattr(exchange, 'last_http_response'):
                print(f"  {Colors.BLUE}üîí Rate limit: {exchange.rateLimit}/{exchange.rateLimitTokens}/{exchange.rateLimitMaxTokens}{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {str(e)}{Colors.ENDC}")
        
        return results
    
    async def test_core_modules(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        - –ú–æ–¥—É–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        - –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        - –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
        - ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 4: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏{Colors.ENDC}")
        results = {}
        
        modules_to_test = [
            ('src.core.database', 'Database'),
            ('src.core.base_models', 'BotState'),
            ('src.bot.manager', 'BotManager'),
            ('src.risk.enhanced_risk_manager', 'EnhancedRiskManager'),
            ('src.ml.strategy_selector', 'StrategySelector')
        ]
        
        for module_path, class_name in modules_to_test:
            try:
                module = importlib.import_module(module_path)
                if hasattr(module, class_name):
                    results[module_path] = 'OK'
                    print(f"  {Colors.GREEN}‚úÖ {module_path}.{class_name}{Colors.ENDC}")
                else:
                    results[module_path] = f"Class {class_name} not found"
                    self.errors.append(f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_path}")
                    print(f"  {Colors.RED}‚ùå {module_path}: –∫–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω{Colors.ENDC}")
            except ImportError as e:
                results[module_path] = str(e)
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_path}: {str(e)}")
                print(f"  {Colors.RED}‚ùå {module_path}: {str(e)}{Colors.ENDC}")
        
        return results
    
    async def test_trading_logic(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        
        –¢–µ—Å—Ç–∏—Ä—É–µ–º:
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        - –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 5: –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞{Colors.ENDC}")
        results = {
            'strategies': {},
            'risk_management': False,
            'signal_generation': False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from src.strategies import strategy_factory
            
            available_strategies = strategy_factory.list_strategies()
            results['strategies']['count'] = len(available_strategies)
            results['strategies']['list'] = available_strategies
            
            print(f"  {Colors.GREEN}‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π{Colors.ENDC}")
            for strategy in available_strategies:
                print(f"    {Colors.CYAN}üìä {strategy}{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
            results['signal_generation'] = True
            print(f"  {Colors.GREEN}‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            results['risk_management'] = True
            print(f"  {Colors.GREEN}‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {str(e)}{Colors.ENDC}")
        
        return results
    
    async def test_web_interface(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º:
        - –ò–º–ø–æ—Ä—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        - –ù–∞–ª–∏—á–∏–µ —Ä–æ—É—Ç–æ–≤
        - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 6: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å{Colors.ENDC}")
        results = {
            'flask_app': False,
            'routes': [],
            'static_files': False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            from src.web.app import app
            
            results['flask_app'] = True
            print(f"  {Colors.GREEN}‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ{Colors.ENDC}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–æ–≤
            routes = []
            for rule in app.url_map.iter_rules():
                routes.append(str(rule))
            
            results['routes'] = routes[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ä–æ—É—Ç–æ–≤
            print(f"  {Colors.GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(routes)} —Ä–æ—É—Ç–æ–≤{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            static_dir = Path('static')
            if static_dir.exists():
                results['static_files'] = True
                print(f"  {Colors.GREEN}‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {str(e)}{Colors.ENDC}")
        
        return results
    
    def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{Colors.BOLD}{Colors.CYAN}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢{Colors.ENDC}")
        print("=" * 80)
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        critical_errors = len(self.errors)
        warnings = len(self.warnings)
        
        if critical_errors == 0:
            print(f"{Colors.GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}")
        else:
            print(f"{Colors.RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {critical_errors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫{Colors.ENDC}")
        
        if warnings > 0:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}{Colors.ENDC}")
        
        # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
        if self.errors:
            print(f"\n{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:{Colors.ENDC}")
            for i, error in enumerate(self.errors, 1):
                print(f"  {i}. {error}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_path = Path('test_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': self.start_time.isoformat(),
                'duration': (datetime.now() - self.start_time).total_seconds(),
                'results': self.results,
                'errors': self.errors,
                'warnings': self.warnings
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\n{Colors.CYAN}üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}{Colors.ENDC}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{Colors.MAGENTA}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.ENDC}")
        if critical_errors > 0:
            print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        else:
            print("1. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if critical_errors > 0:
            print(f"\n{Colors.RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º{Colors.ENDC}")
            sys.exit(1)
        else:
            print(f"\n{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.ENDC}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path('src').exists():
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞{Colors.ENDC}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())