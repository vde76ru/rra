/**
 * TradingController - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
 * –í–µ—Ä—Å–∏—è 2.0 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç WebSocket/Socket.IO  
 * ‚úÖ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
 * ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å jQuery
 */

class TradingController {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        this.isInitialized = false;
        this.botStatus = 'stopped';
        this.authToken = this.getAuthToken();
        this.updateInterval = null;
        this.socket = null; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å webSocket –Ω–∞ socket –¥–ª—è Socket.IO
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.updateIntervals = {
            status: 5000,    // 5 —Å–µ–∫—É–Ω–¥
            balance: 10000,  // 10 —Å–µ–∫—É–Ω–¥
            trades: 15000,   // 15 —Å–µ–∫—É–Ω–¥
            stats: 30000     // 30 —Å–µ–∫—É–Ω–¥
        };
        
        // –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        this.cache = {
            balance: null,
            trades: [],
            stats: null,
            positions: []
        };

        // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        this.intervals = {};
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TradingController v2.0...');
        
        try {
            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.continueInit());
            } else {
                this.continueInit();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TradingController:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã', 'error');
        }
    }

    async continueInit() {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            this.initSocketIO();
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.startUpdateCycles();
            
            this.isInitialized = true;
            console.log('‚úÖ TradingController v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            this.showNotification('üîÑ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã', 'error');
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupEventListeners() {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID –∫–Ω–æ–ø–æ–∫ (—Å–æ–≤–ø–∞–¥–∞—é—Ç —Å HTML —à–∞–±–ª–æ–Ω–æ–º)
        const startBtn = document.getElementById('btn-start');
        const stopBtn = document.getElementById('btn-stop');
        const emergencyBtn = document.getElementById('emergency-stop');
        
        if (startBtn) {
            startBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.startBot();
            });
        }
        
        if (stopBtn) {
            stopBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.stopBot();
            });
        }
        
        if (emergencyBtn) {
            emergencyBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.emergencyStop();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupFormHandlers();
        this.setupKeyboardShortcuts();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
     */
    setupFormHandlers() {
        // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        const pairsForm = document.getElementById('trading-pairs-form');
        if (pairsForm) {
            pairsForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.updateTradingPairs();
            });
        }
        
        // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        const strategyForm = document.getElementById('strategy-settings-form');
        if (strategyForm) {
            strategyForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.updateStrategySettings();
            });
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl+S - –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                if (this.botStatus === 'running') {
                    this.stopBot();
                } else {
                    this.startBot();
                }
            }
            
            // Ctrl+E - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            if (e.ctrlKey && e.key === 'e') {
                e.preventDefault();
                this.emergencyStop();
            }
            
            // F5 - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (e.key === 'F5') {
                e.preventDefault();
                this.refreshAllData();
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO (–≤–º–µ—Å—Ç–æ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ WebSocket)
     */
    initSocketIO() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Socket.IO
            if (typeof io !== 'undefined') {
                this.socket = io();
                
                this.socket.on('connect', () => {
                    console.log('‚úÖ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    this.showNotification('üåê Real-time –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ', 'info');
                });
                
                this.socket.on('disconnect', () => {
                    console.log('üîå Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    this.showNotification('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ', 'warning');
                });
                
                this.socket.on('bot_status', (data) => {
                    this.handleSocketMessage('bot_status', data);
                });
                
                this.socket.on('new_trade', (data) => {
                    this.handleSocketMessage('new_trade', data);
                });
                
                this.socket.on('balance_update', (data) => {
                    this.handleSocketMessage('balance_update', data);
                });
                
                this.socket.on('error', (error) => {
                    console.error('‚ùå Socket.IO –æ—à–∏–±–∫–∞:', error);
                });
                
            } else {
                console.warn('‚ö†Ô∏è Socket.IO –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Socket.IO:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Socket.IO —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ—Ç handleWebSocketMessage)
     */
    handleSocketMessage(type, data) {
        try {
            switch (type) {
                case 'bot_status':
                    this.updateBotStatus(data.status === 'running');
                    break;
                    
                case 'balance_update':
                    this.updateBalance(data);
                    break;
                    
                case 'new_trade':
                    this.handleNewTrade(data);
                    break;
                    
                case 'new_signal':
                    this.handleNewSignal(data);
                    break;
                    
                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ Socket —Å–æ–æ–±—â–µ–Ω–∏–µ:', type, data);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Socket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const promises = [
                this.loadBotStatus(),
                this.loadBalance(),
                this.loadStats(),
                this.loadRecentTrades()
            ];
            
            await Promise.allSettled(promises);
            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showNotification('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'warning');
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
     */
    async startBot() {
        const startBtn = document.getElementById('btn-start');
        
        if (this.botStatus === 'running') {
            this.showNotification('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω', 'warning');
            return;
        }
        
        if (startBtn) {
            startBtn.disabled = true;
            // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å jQuery
            if (typeof $ !== 'undefined') {
                $(startBtn).prop('disabled', true);
            }
        }
        
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
            this.showNotification('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...', 'info');
            
            const response = await this.apiRequest('/api/bot/start', {
                method: 'POST',
                body: JSON.stringify({
                    auto_strategy: true
                })
            });
            
            if (response.success) {
                this.botStatus = 'running';
                this.updateBotStatus(true);
                this.showNotification('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`, 'error');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (startBtn) {
                startBtn.disabled = false;
                if (typeof $ !== 'undefined') {
                    $(startBtn).prop('disabled', false);
                }
            }
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
     */
    async stopBot() {
        const stopBtn = document.getElementById('btn-stop');
        
        if (this.botStatus === 'stopped') {
            this.showNotification('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
            return;
        }
        
        if (stopBtn) {
            stopBtn.disabled = true;
            if (typeof $ !== 'undefined') {
                $(stopBtn).prop('disabled', true);
            }
        }
        
        try {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...');
            this.showNotification('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...', 'info');
            
            const response = await this.apiRequest('/api/bot/stop', {
                method: 'POST'
            });
            
            if (response.success) {
                this.botStatus = 'stopped';
                this.updateBotStatus(false);
                this.showNotification('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
                
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`, 'error');
            
            if (stopBtn) {
                stopBtn.disabled = false;
                if (typeof $ !== 'undefined') {
                    $(stopBtn).prop('disabled', false);
                }
            }
        }
    }
    
    /**
     * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
     */
    async emergencyStop() {
        const confirmed = confirm(
            '‚ö†Ô∏è –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!\n\n' +
            '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n' +
            '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
        );
        
        if (!confirmed) return;
        
        try {
            console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!');
            this.showNotification('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!', 'error');
            
            const response = await this.apiRequest('/api/bot/emergency-stop', {
                method: 'POST'
            });
            
            if (response.success) {
                this.botStatus = 'emergency_stop';
                this.updateBotStatus(false);
                this.showNotification('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'error');
                
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
     */
    async loadBotStatus() {
        try {
            const response = await this.apiRequest('/api/bot/status');
            
            if (response.success) {
                const isRunning = response.status === 'running';
                this.botStatus = response.status;
                this.updateBotStatus(isRunning);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
     */
    async loadBalance() {
        try {
            const response = await this.apiRequest('/api/balance');
            
            if (response.success || !response.error) {
                this.cache.balance = response;
                this.updateBalance(response);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                if (typeof window.balanceChart !== 'undefined' && window.balanceChart) {
                    this.updateBalanceChart(response);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            this.updateBalanceDisplay('–û—à–∏–±–∫–∞');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStats() {
        try {
            const response = await this.apiRequest('/api/stats');
            
            if (response.success) {
                this.cache.stats = response;
                this.updateStatsDisplay(response);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
     */
    async loadRecentTrades() {
        try {
            const response = await this.apiRequest('/api/trades?limit=10');
            
            if (response.success && response.trades) {
                this.cache.trades = response.trades;
                this.updateTradesTable(response.trades);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ ID
     */
    updateBotStatus(isRunning) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.botStatus = isRunning ? 'running' : 'stopped';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        const statusCard = document.getElementById('bot-status-card');
        const statusIndicator = document.getElementById('bot-status-indicator');
        const statusText = document.getElementById('bot-status-text');
        const startBtn = document.getElementById('btn-start');
        const stopBtn = document.getElementById('btn-stop');
        
        if (statusCard) {
            statusCard.innerHTML = isRunning ? 
                '<i class="fas fa-check-circle"></i> –†–∞–±–æ—Ç–∞–µ—Ç' : 
                '<i class="fas fa-times-circle"></i> –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
        if (statusIndicator) {
            const icon = statusIndicator.querySelector('i');
            if (icon) {
                icon.className = isRunning ? 
                    'fas fa-circle fa-3x text-success' : 
                    'fas fa-circle fa-3x text-danger';
            }
        }
        
        if (statusText) {
            statusText.textContent = isRunning ? '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω' : '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        }
        
        if (startBtn) {
            startBtn.disabled = isRunning;
            if (typeof $ !== 'undefined') {
                $(startBtn).prop('disabled', isRunning);
            }
        }
        
        if (stopBtn) {
            stopBtn.disabled = !isRunning;
            if (typeof $ !== 'undefined') {
                $(stopBtn).prop('disabled', !isRunning);
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å jQuery
     */
    updateBalance(data) {
        const balanceDisplay = document.getElementById('balance-display');
        
        if (balanceDisplay && data) {
            const total = data.total_usdt || 0;
            balanceDisplay.textContent = `$${total.toFixed(2)}`;
            
            // jQuery —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            if (typeof $ !== 'undefined') {
                $('#balance-display').text(`$${total.toFixed(2)}`);
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     */
    updateBalanceChart(data) {
        if (typeof window.balanceChart !== 'undefined' && window.balanceChart && data.total_usdt) {
            const now = new Date().toLocaleTimeString();
            window.balanceChart.data.labels.push(now);
            window.balanceChart.data.datasets[0].data.push(data.total_usdt);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
            if (window.balanceChart.data.labels.length > 20) {
                window.balanceChart.data.labels.shift();
                window.balanceChart.data.datasets[0].data.shift();
            }
            
            window.balanceChart.update();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫
     */
    updateTradesTable(trades) {
        const tbody = document.getElementById('trades-table');
        if (!tbody || !trades) return;
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        tbody.innerHTML = '';
        
        trades.forEach(trade => {
            const row = this.createTradeRow(trade);
            tbody.appendChild(row);
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫
     */
    createTradeRow(trade) {
        const row = document.createElement('tr');
        
        const profitClass = (trade.profit >= 0) ? 'text-success' : 'text-danger';
        const sideClass = (trade.side === 'BUY') ? 'success' : 'danger';
        const statusClass = trade.status === 'CLOSED' ? 'success' : 'primary';
        
        const createdAt = trade.created_at ? 
            new Date(trade.created_at).toLocaleString('ru-RU') : 'N/A';
        
        row.innerHTML = `
            <td>${trade.id || 'N/A'}</td>
            <td>${createdAt}</td>
            <td>${trade.symbol || 'N/A'}</td>
            <td><span class="badge bg-${sideClass}">${trade.side || 'N/A'}</span></td>
            <td>$${(trade.price || 0).toFixed(2)}</td>
            <td>${(trade.quantity || 0).toFixed(4)}</td>
            <td><span class="badge bg-${statusClass}">${trade.status || 'N/A'}</span></td>
            <td class="${profitClass}">$${(trade.profit || 0).toFixed(2)}</td>
        `;
        
        return row;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalanceDisplay(value) {
        const balanceElement = document.getElementById('balance-display');
        if (balanceElement) {
            balanceElement.textContent = typeof value === 'string' ? value : `$${value.toFixed(2)}`;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    getAuthToken() {
        return localStorage.getItem('auth_token') || 
               sessionStorage.getItem('auth_token') || 
               '';
    }
    
    /**
     * API –∑–∞–ø—Ä–æ—Å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    async apiRequest(url, options = {}) {
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.authToken) {
            defaultOptions.headers['Authorization'] = `Bearer ${this.authToken}`;
        }
        
        const finalOptions = { ...defaultOptions, ...options };
        
        try {
            const response = await fetch(url, finalOptions);
            
            if (!response.ok) {
                if (response.status === 401) {
                    this.handleAuthError();
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
            
        } catch (error) {
            console.error(`API –∑–∞–ø—Ä–æ—Å –∫ ${url} –Ω–µ —É–¥–∞–ª—Å—è:`, error);
            throw error;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    handleAuthError() {
        console.log('üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        this.showNotification('üîê –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.', 'warning');
        
        setTimeout(() => {
            window.location.href = '/login';
        }, 2000);
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å jQuery
     */
    showNotification(message, type = 'info') {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω jQuery –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (typeof $ !== 'undefined' && $('#notifications-container').length) {
            const alertClass = {
                'success': 'alert-success',
                'error': 'alert-danger', 
                'warning': 'alert-warning',
                'info': 'alert-info'
            }[type] || 'alert-info';

            const notification = $(`
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            $('#notifications-container').append(notification);
            
            setTimeout(() => {
                notification.alert('close');
            }, 5000);
            
        } else {
            // Fallback –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.showNativeNotification(message, type);
        }
    }
    
    /**
     * –ù–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNativeNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} notification`;
        notification.textContent = message;
        
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            zIndex: '9999',
            padding: '15px 20px',
            borderRadius: '5px',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
            transform: 'translateX(400px)',
            transition: 'transform 0.3s ease-in-out'
        });
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startUpdateCycles() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.stopUpdateCycles();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
        this.intervals.status = setInterval(() => {
            if (this.isInitialized) {
                this.loadBotStatus();
            }
        }, this.updateIntervals.status);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        this.intervals.balance = setInterval(() => {
            if (this.isInitialized) {
                this.loadBalance();
            }
        }, this.updateIntervals.balance);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.intervals.stats = setInterval(() => {
            if (this.isInitialized) {
                this.loadStats();
            }
        }, this.updateIntervals.stats);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        this.intervals.trades = setInterval(() => {
            if (this.isInitialized && this.botStatus === 'running') {
                this.loadRecentTrades();
            }
        }, this.updateIntervals.trades);
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    stopUpdateCycles() {
        Object.values(this.intervals).forEach(interval => {
            if (interval) clearInterval(interval);
        });
        this.intervals = {};
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async refreshAllData() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
        this.showNotification('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
        
        await this.loadInitialData();
        this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
     */
    handleNewTrade(trade) {
        console.log('üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:', trade);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        this.cache.trades.unshift(trade);
        if (this.cache.trades.length > 50) {
            this.cache.trades.pop();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        this.updateTradesTable(this.cache.trades);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const profit = trade.profit >= 0 ? '+' : '';
        this.showNotification(
            `üí∞ ${trade.symbol}: ${profit}$${trade.profit.toFixed(2)}`, 
            trade.profit >= 0 ? 'success' : 'warning'
        );
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
     */
    handleNewSignal(signal) {
        console.log('üì° –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:', signal);
        this.showNotification(`üì° –°–∏–≥–Ω–∞–ª: ${signal.type} ${signal.symbol}`, 'info');
    }
    
    /**
     * –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ TradingController...');
        
        if (this.socket && this.socket.disconnect) {
            this.socket.disconnect();
        }
        
        this.stopUpdateCycles();
        this.isInitialized = false;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
window.tradingController = null;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ HTML)
function initTradingController() {
    if (!window.tradingController) {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TradingController –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏...');
        window.tradingController = new TradingController();
    }
    return window.tradingController;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TradingController...');
    initTradingController();
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (window.tradingController) {
        window.tradingController.destroy();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TradingController;
}