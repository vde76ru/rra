"""
API —Ä–æ—É—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/web/social_api.py

üéØ –ù–û–í–û–°–¢–ò –ò –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´:
‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Twitter/Reddit
‚úÖ –°–µ–Ω—Ç–∏–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑
‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏
‚úÖ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from flask import jsonify, request
from functools import wraps
import random

from ..logging.smart_logger import get_logger

logger = get_logger(__name__)

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        auth_header = request.headers.get('Authorization', '')
        if not auth_header and not request.cookies.get('session'):
            return jsonify({
                'success': False,
                'error': 'Authorization required'
            }), 401
        return f(*args, **kwargs)
    return decorated_function

def register_social_api_routes(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç API —Ä–æ—É—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    
    logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # =================================================================
    # –ù–û–í–û–°–¢–ò
    # =================================================================
    
    @app.route('/api/news/latest')
    def get_latest_news():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            limit = int(request.args.get('limit', 20))
            category = request.args.get('category', 'all')  # all, bitcoin, ethereum, defi
            sentiment = request.args.get('sentiment', 'all')  # all, positive, negative, neutral
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            demo_news = generate_demo_news(limit, category, sentiment)
            
            return jsonify({
                'success': True,
                'news': demo_news,
                'count': len(demo_news),
                'filters': {
                    'category': category,
                    'sentiment': sentiment,
                    'limit': limit
                },
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/news/sentiment')
    def get_news_sentiment():
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeframe = request.args.get('timeframe', '24h')  # 1h, 24h, 7d
            symbol = request.args.get('symbol', 'BTC')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            sentiment_data = generate_sentiment_data(timeframe, symbol)
            
            return jsonify({
                'success': True,
                'sentiment': sentiment_data,
                'timeframe': timeframe,
                'symbol': symbol,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´
    # =================================================================
    
    @app.route('/api/social/signals')
    @login_required
    def get_social_signals():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            platform = request.args.get('platform', 'all')  # all, twitter, reddit, telegram
            symbol = request.args.get('symbol', 'BTC')
            limit = int(request.args.get('limit', 50))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signals = generate_social_signals(platform, symbol, limit)
            
            return jsonify({
                'success': True,
                'signals': signals,
                'count': len(signals),
                'platform': platform,
                'symbol': symbol,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/social/trending')
    def get_trending_topics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            timeframe = request.args.get('timeframe', '24h')
            platform = request.args.get('platform', 'all')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã
            trending = generate_trending_topics(timeframe, platform)
            
            return jsonify({
                'success': True,
                'trending': trending,
                'timeframe': timeframe,
                'platform': platform,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/social/volume')
    @login_required
    def get_social_volume():
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            symbol = request.args.get('symbol', 'BTC')
            timeframe = request.args.get('timeframe', '24h')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–∞
            volume_data = generate_social_volume_data(symbol, timeframe)
            
            return jsonify({
                'success': True,
                'volume': volume_data,
                'symbol': symbol,
                'timeframe': timeframe,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # =================================================================
    
    @app.route('/api/social/correlation')
    @login_required
    def get_price_correlation():
        """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ü–µ–Ω–æ–π"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            symbol = request.args.get('symbol', 'BTC')
            timeframe = request.args.get('timeframe', '7d')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlation_data = generate_correlation_data(symbol, timeframe)
            
            return jsonify({
                'success': True,
                'correlation': correlation_data,
                'symbol': symbol,
                'timeframe': timeframe,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/social/impact')
    @login_required
    def get_market_impact():
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            symbol = request.args.get('symbol', 'BTC')
            event_type = request.args.get('event_type', 'all')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è
            impact_data = generate_market_impact_data(symbol, event_type)
            
            return jsonify({
                'success': True,
                'impact': impact_data,
                'symbol': symbol,
                'event_type': event_type,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –ê–õ–ï–†–¢–´ –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    # =================================================================
    
    @app.route('/api/social/alerts')
    @login_required
    def get_social_alerts():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            severity = request.args.get('severity', 'all')  # all, high, medium, low
            symbol = request.args.get('symbol', 'all')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = generate_social_alerts(severity, symbol)
            
            return jsonify({
                'success': True,
                'alerts': alerts,
                'count': len(alerts),
                'severity': severity,
                'symbol': symbol,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # HELPER FUNCTIONS - –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ï–ú–û –î–ê–ù–ù–´–•
    # =================================================================
    
    def generate_demo_news(limit: int, category: str, sentiment: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        news_templates = [
            {
                'title': 'Bitcoin reaches new weekly high amid institutional adoption',
                'summary': 'Major corporations continue to add Bitcoin to their treasury holdings...',
                'sentiment': 'positive',
                'category': 'bitcoin',
                'impact': 'high'
            },
            {
                'title': 'Ethereum upgrade shows promising scaling improvements',
                'summary': 'The latest Ethereum network upgrade demonstrates significant improvements...',
                'sentiment': 'positive',
                'category': 'ethereum',
                'impact': 'medium'
            },
            {
                'title': 'Regulatory uncertainty weighs on crypto markets',
                'summary': 'New regulatory proposals create uncertainty in the cryptocurrency space...',
                'sentiment': 'negative',
                'category': 'regulation',
                'impact': 'high'
            },
            {
                'title': 'DeFi protocol launches new yield farming opportunities',
                'summary': 'Users can now stake tokens for enhanced rewards in the new DeFi protocol...',
                'sentiment': 'neutral',
                'category': 'defi',
                'impact': 'low'
            }
        ]
        
        news = []
        for i in range(min(limit, 50)):
            template = random.choice(news_templates)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category != 'all' and template['category'] != category:
                continue
                
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç—É
            if sentiment != 'all' and template['sentiment'] != sentiment:
                continue
            
            news_item = {
                'id': i + 1,
                'title': template['title'],
                'summary': template['summary'],
                'url': f'https://news.example.com/article-{i+1}',
                'source': random.choice(['CoinDesk', 'CoinTelegraph', 'The Block', 'Decrypt']),
                'sentiment': template['sentiment'],
                'sentiment_score': random.uniform(-1, 1),
                'category': template['category'],
                'impact': template['impact'],
                'published_at': (datetime.utcnow() - timedelta(minutes=random.randint(1, 1440))).isoformat(),
                'engagement': {
                    'views': random.randint(1000, 50000),
                    'shares': random.randint(50, 2000),
                    'comments': random.randint(10, 500)
                }
            }
            
            news.append(news_item)
        
        return news
    
    def generate_sentiment_data(timeframe: str, symbol: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        if timeframe == '1h':
            points = 60  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            delta = timedelta(minutes=1)
        elif timeframe == '24h':
            points = 24  # –ö–∞–∂–¥—ã–π —á–∞—Å
            delta = timedelta(hours=1)
        else:  # 7d
            points = 7   # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
            delta = timedelta(days=1)
        
        sentiment_timeline = []
        base_sentiment = random.uniform(-0.2, 0.3)  # –û–±—ã—á–Ω–æ —Å–ª–µ–≥–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
        
        for i in range(points):
            timestamp = datetime.utcnow() - (points - i) * delta
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            sentiment_change = random.uniform(-0.1, 0.1)
            current_sentiment = max(-1, min(1, base_sentiment + sentiment_change))
            
            sentiment_timeline.append({
                'timestamp': timestamp.isoformat(),
                'sentiment': round(current_sentiment, 3),
                'volume': random.randint(100, 1000),
                'sources': random.randint(5, 50)
            })
            
            base_sentiment = current_sentiment * 0.9  # –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É
        
        return {
            'timeline': sentiment_timeline,
            'current_sentiment': sentiment_timeline[-1]['sentiment'],
            'average_sentiment': sum(p['sentiment'] for p in sentiment_timeline) / len(sentiment_timeline),
            'sentiment_change_24h': sentiment_timeline[-1]['sentiment'] - sentiment_timeline[0]['sentiment'],
            'total_mentions': sum(p['volume'] for p in sentiment_timeline),
            'unique_sources': sum(p['sources'] for p in sentiment_timeline)
        }
    
    def generate_social_signals(platform: str, symbol: str, limit: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        platforms = ['twitter', 'reddit', 'telegram'] if platform == 'all' else [platform]
        
        for i in range(min(limit, 100)):
            signal_platform = random.choice(platforms)
            
            signal = {
                'id': i + 1,
                'platform': signal_platform,
                'symbol': symbol,
                'content': f'Sample social signal #{i+1} about {symbol}',
                'author': f'user_{random.randint(1000, 9999)}',
                'sentiment': random.choice(['positive', 'negative', 'neutral']),
                'sentiment_score': random.uniform(-1, 1),
                'influence_score': random.uniform(0, 1),
                'engagement': {
                    'likes': random.randint(0, 1000),
                    'retweets': random.randint(0, 100),
                    'replies': random.randint(0, 50)
                },
                'posted_at': (datetime.utcnow() - timedelta(minutes=random.randint(1, 1440))).isoformat(),
                'url': f'https://{signal_platform}.com/signal/{i+1}'
            }
            
            signals.append(signal)
        
        return signals
    
    def generate_trending_topics(timeframe: str, platform: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º"""
        topics = [
            {'name': '#Bitcoin', 'category': 'cryptocurrency'},
            {'name': '#Ethereum', 'category': 'cryptocurrency'},
            {'name': '#DeFi', 'category': 'finance'},
            {'name': '#NFT', 'category': 'technology'},
            {'name': '#Web3', 'category': 'technology'},
            {'name': '#Crypto', 'category': 'cryptocurrency'}
        ]
        
        trending = []
        for i, topic in enumerate(topics):
            trending.append({
                'rank': i + 1,
                'topic': topic['name'],
                'category': topic['category'],
                'volume': random.randint(1000, 100000),
                'growth': random.uniform(-50, 200),  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–æ—Å—Ç
                'sentiment': random.uniform(-1, 1),
                'related_symbols': random.sample(['BTC', 'ETH', 'ADA', 'SOL'], random.randint(1, 3))
            })
        
        return trending
    
    def generate_social_volume_data(symbol: str, timeframe: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
        if timeframe == '24h':
            points = 24
            delta = timedelta(hours=1)
        else:  # 7d
            points = 7
            delta = timedelta(days=1)
        
        volume_data = []
        base_volume = random.randint(1000, 5000)
        
        for i in range(points):
            timestamp = datetime.utcnow() - (points - i) * delta
            volume = base_volume + random.randint(-500, 1000)
            
            volume_data.append({
                'timestamp': timestamp.isoformat(),
                'mentions': volume,
                'positive_mentions': int(volume * random.uniform(0.3, 0.7)),
                'negative_mentions': int(volume * random.uniform(0.1, 0.3)),
                'neutral_mentions': int(volume * random.uniform(0.2, 0.4))
            })
        
        return {
            'timeline': volume_data,
            'total_mentions': sum(p['mentions'] for p in volume_data),
            'average_hourly': sum(p['mentions'] for p in volume_data) / len(volume_data),
            'peak_volume': max(p['mentions'] for p in volume_data),
            'volume_change': volume_data[-1]['mentions'] - volume_data[0]['mentions']
        }
    
    def generate_correlation_data(symbol: str, timeframe: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        return {
            'sentiment_price_correlation': random.uniform(-0.5, 0.8),
            'volume_price_correlation': random.uniform(0.3, 0.9),
            'social_volume_correlation': random.uniform(0.2, 0.7),
            'time_lag_analysis': {
                'optimal_lag_hours': random.randint(1, 24),
                'correlation_at_optimal_lag': random.uniform(0.5, 0.9)
            },
            'statistical_significance': random.uniform(0.01, 0.05)
        }
    
    def generate_market_impact_data(symbol: str, event_type: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä—ã–Ω–æ–∫"""
        events = [
            {
                'event': 'Major influencer positive tweet',
                'price_impact': '+2.5%',
                'duration_minutes': 30,
                'confidence': 0.85
            },
            {
                'event': 'Regulatory news',
                'price_impact': '-1.8%',
                'duration_minutes': 120,
                'confidence': 0.92
            },
            {
                'event': 'Partnership announcement',
                'price_impact': '+0.8%',
                'duration_minutes': 45,
                'confidence': 0.67
            }
        ]
        
        return events
    
    def generate_social_alerts(severity: str, symbol: str) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = [
            {
                'id': 1,
                'type': 'sentiment_spike',
                'severity': 'high',
                'title': 'Unusual positive sentiment surge detected',
                'description': 'Social sentiment has increased by 45% in the last hour',
                'symbol': 'BTC',
                'confidence': 0.89,
                'created_at': (datetime.utcnow() - timedelta(minutes=5)).isoformat()
            },
            {
                'id': 2,
                'type': 'volume_anomaly',
                'severity': 'medium',
                'title': 'Social volume spike',
                'description': 'Mentions volume 3x above normal levels',
                'symbol': 'ETH',
                'confidence': 0.76,
                'created_at': (datetime.utcnow() - timedelta(minutes=15)).isoformat()
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        filtered_alerts = []
        for alert in alerts:
            if severity != 'all' and alert['severity'] != severity:
                continue
            if symbol != 'all' and alert['symbol'] != symbol:
                continue
            filtered_alerts.append(alert)
        
        return filtered_alerts
    
    # =================================================================
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    # =================================================================
    
    logger.info("‚úÖ API —Ä–æ—É—Ç—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   üü¢ GET /api/news/latest - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    logger.info("   üü¢ GET /api/news/sentiment - –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞")
    logger.info("   üü¢ GET /api/social/signals - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    logger.info("   üü¢ GET /api/social/trending - —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã")
    logger.info("   üü¢ GET /api/social/volume - –æ–±—ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    logger.info("   üü¢ GET /api/social/correlation - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–π")
    logger.info("   üü¢ GET /api/social/impact - –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫")
    logger.info("   üü¢ GET /api/social/alerts - –≤–∞–∂–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã")
    
    return True

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['register_social_api_routes']