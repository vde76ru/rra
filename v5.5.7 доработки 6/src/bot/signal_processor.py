#!/usr/bin/env python3
"""
SIGNAL PROCESSOR - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–§–∞–π–ª: src/bot/signal_processor.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤  
‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
"""

import asyncio
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any, Union
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
import logging

from ..strategies.base import TradingSignal
from ..core.database import SessionLocal
from ..core.models import Signal, SignalType, Trade
from ..core.config import config

logger = logging.getLogger(__name__)

class SignalQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    EXCELLENT = "excellent"    # >0.8 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    GOOD = "good"             # 0.6-0.8 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    AVERAGE = "average"       # 0.4-0.6 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    POOR = "poor"             # 0.2-0.4 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    INVALID = "invalid"       # <0.2 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

class SignalStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    PENDING = "pending"
    VALIDATED = "validated"
    FILTERED = "filtered"
    AGGREGATED = "aggregated"
    PROCESSED = "processed"
    REJECTED = "rejected"

@dataclass
class ProcessedSignal:
    """–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    original_signal: TradingSignal
    strategy_name: str
    symbol: str
    quality: SignalQuality
    confidence_adjusted: float     # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    priority: int                  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1-10 (10 - –Ω–∞–∏–≤—ã—Å—à–∏–π)
    risk_score: float             # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ 0-1
    timestamp: datetime
    validation_results: Dict[str, Any] = field(default_factory=dict)
    status: SignalStatus = SignalStatus.PENDING

@dataclass 
class AggregatedSignal:
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    symbol: str
    action: str                   # BUY, SELL, WAIT
    confidence: float            # –ö–æ–Ω—Å–µ–Ω—Å—É—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    strategies_count: int        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategy_names: List[str]    # –ò–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    individual_signals: List[ProcessedSignal]
    consensus_strength: float    # –°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ 0-1
    conflicting_signals: int     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö
    avg_stop_loss: float
    avg_take_profit: float
    recommended_position_size: float
    timestamp: datetime

class SignalProcessor:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    üß† –û–ë–†–ê–ë–û–¢–ö–ê –°–ò–ì–ù–ê–õ–û–í:
    
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –í–•–û–î–Ø–©–ò–ï      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –í–ê–õ–ò–î–ê–¶–ò–Ø      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –§–ò–õ–¨–¢–†–ê–¶–ò–Ø    ‚îÇ
    ‚îÇ   –°–ò–ì–ù–ê–õ–´       ‚îÇ    ‚îÇ   - –ö–∞—á–µ—Å—Ç–≤–æ     ‚îÇ    ‚îÇ   - –î—É–±–ª–∏–∫–∞—Ç—ã   ‚îÇ
    ‚îÇ   - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏   ‚îÇ    ‚îÇ   - –ü–æ–ª–Ω–æ—Ç–∞      ‚îÇ    ‚îÇ   - –°–ª–∞–±—ã–µ       ‚îÇ
    ‚îÇ   - ML –º–æ–¥–µ–ª–∏   ‚îÇ    ‚îÇ   - –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å   ‚îÇ    ‚îÇ   - –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ   ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚îÇ                        ‚îÇ                        ‚îÇ
             ‚ñº                        ‚ñº                        ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –ê–ì–†–ï–ì–ê–¶–ò–Ø     ‚îÇ    ‚îÇ   –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø  ‚îÇ    ‚îÇ   –ò–°–ü–û–õ–ù–ï–ù–ò–ï    ‚îÇ
    ‚îÇ   - –ö–æ–Ω—Å–µ–Ω—Å—É—Å   ‚îÇ    ‚îÇ   - –ö–∞—á–µ—Å—Ç–≤–æ     ‚îÇ    ‚îÇ   - –õ—É—á—à–∏–µ      ‚îÇ
    ‚îÇ   - –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è‚îÇ    ‚îÇ   - –°—Ä–æ—á–Ω–æ—Å—Ç—å    ‚îÇ    ‚îÇ   - –í–æ–≤—Ä–µ–º—è     ‚îÇ
    ‚îÇ   - –í–µ—Å–∞        ‚îÇ    ‚îÇ   - –†–∏—Å–∫–∏        ‚îÇ    ‚îÇ   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ   ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self, max_signal_age_minutes: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            max_signal_age_minutes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        self.max_signal_age = timedelta(minutes=max_signal_age_minutes)
        self.processed_signals = deque(maxlen=1000)
        self.signal_cache = {}
        self.last_signals_by_strategy = defaultdict(lambda: None)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.min_confidence = config.MIN_STRATEGY_CONFIDENCE
        self.consensus_threshold = 0.6  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.max_conflicting_ratio = 0.3  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        
        # –í–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_weights = {
            'multi_indicator': config.WEIGHT_MULTI_INDICATOR,
            'momentum': config.WEIGHT_MOMENTUM,
            'mean_reversion': config.WEIGHT_MEAN_REVERSION,
            'breakout': config.WEIGHT_BREAKOUT,
            'scalping': config.WEIGHT_SCALPING,
            'swing': config.WEIGHT_SWING,
            'ml_prediction': config.WEIGHT_ML_PREDICTION
        }
        
        logger.info("‚úÖ SignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_signal(self, signal: TradingSignal, strategy_name: str,
                           symbol: str) -> Optional[ProcessedSignal]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ò–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            ProcessedSignal –∏–ª–∏ None –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω
        """
        try:
            logger.debug(
                f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {strategy_name}: {signal.action} "
                f"–¥–ª—è {symbol} (confidence: {signal.confidence:.2f})"
            )
            
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            validation_results = await self._validate_signal(signal, strategy_name, symbol)
            if not validation_results['is_valid']:
                logger.debug(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {validation_results['reason']}")
                return None
            
            # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            quality = self._determine_signal_quality(signal, validation_results)
            
            # –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            adjusted_confidence = self._adjust_confidence(
                signal, strategy_name, validation_results
            )
            
            # –®–∞–≥ 4: –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority = self._calculate_priority(signal, strategy_name, quality)
            
            # –®–∞–≥ 5: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
            risk_score = await self._assess_risk(signal, symbol)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            processed = ProcessedSignal(
                original_signal=signal,
                strategy_name=strategy_name,
                symbol=symbol,
                quality=quality,
                confidence_adjusted=adjusted_confidence,
                priority=priority,
                risk_score=risk_score,
                timestamp=datetime.utcnow(),
                validation_results=validation_results,
                status=SignalStatus.VALIDATED
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à–µ
            self._cache_signal(processed)
            
            logger.info(
                f"‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {strategy_name} ‚Üí {signal.action} "
                f"(quality: {quality.value}, priority: {priority})"
            )
            
            return processed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def aggregate_signals(self, signals: List[ProcessedSignal],
                              symbol: str) -> Optional[AggregatedSignal]:
        """
        –ê–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π
        
        Args:
            signals: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            AggregatedSignal –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        """
        try:
            if not signals:
                return None
            
            logger.debug(f"üîÑ –ê–≥—Ä–µ–≥–∞—Ü–∏—è {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            valid_signals = self._filter_signals_for_aggregation(signals)
            if len(valid_signals) < 2:
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            actions_groups = self._group_signals_by_action(valid_signals)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            consensus_action, consensus_signals = self._find_consensus(actions_groups)
            if not consensus_action:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            agg_params = self._calculate_aggregated_parameters(consensus_signals)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–∏–ª—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            consensus_strength = self._calculate_consensus_strength(
                consensus_signals, valid_signals
            )
            
            aggregated = AggregatedSignal(
                symbol=symbol,
                action=consensus_action,
                confidence=agg_params['confidence'],
                strategies_count=len(consensus_signals),
                strategy_names=[s.strategy_name for s in consensus_signals],
                individual_signals=consensus_signals,
                consensus_strength=consensus_strength,
                conflicting_signals=len(valid_signals) - len(consensus_signals),
                avg_stop_loss=agg_params['stop_loss'],
                avg_take_profit=agg_params['take_profit'],
                recommended_position_size=agg_params['position_size'],
                timestamp=datetime.utcnow()
            )
            
            logger.info(
                f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {consensus_action} –¥–ª—è {symbol} "
                f"(–∫–æ–Ω—Å–µ–Ω—Å—É—Å: {consensus_strength:.2f}, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(consensus_signals)})"
            )
            
            return aggregated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return None
    
    async def _validate_signal(self, signal: TradingSignal, strategy_name: str,
                             symbol: str) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        validation = {
            'is_valid': True,
            'reason': '',
            'checks': {}
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not signal.action or signal.action not in ['BUY', 'SELL', 'WAIT']:
                validation['is_valid'] = False
                validation['reason'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
                return validation
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if not (0 <= signal.confidence <= 1):
                validation['is_valid'] = False
                validation['reason'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'
                return validation
                
            validation['checks']['confidence'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal.confidence < self.min_confidence:
                validation['is_valid'] = False
                validation['reason'] = f'–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f}'
                return validation
                
            validation['checks']['min_confidence'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å timestamp)
            if hasattr(signal, 'timestamp') and signal.timestamp:
                age = datetime.utcnow() - signal.timestamp
                if age > self.max_signal_age:
                    validation['is_valid'] = False
                    validation['reason'] = f'–£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª: {age}'
                    return validation
                    
            validation['checks']['freshness'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if self._is_duplicate_signal(signal, strategy_name, symbol):
                validation['is_valid'] = False
                validation['reason'] = '–î—É–±–ª–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª'
                return validation
                
            validation['checks']['uniqueness'] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–Ω
            if signal.action != 'WAIT':
                if signal.stop_loss and signal.stop_loss <= 0:
                    validation['is_valid'] = False
                    validation['reason'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π stop-loss'
                    return validation
                    
                if signal.take_profit and signal.take_profit <= 0:
                    validation['is_valid'] = False
                    validation['reason'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π take-profit'
                    return validation
                    
            validation['checks']['price_levels'] = True
            
            return validation
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            validation['is_valid'] = False
            validation['reason'] = f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}'
            return validation
    
    def _determine_signal_quality(self, signal: TradingSignal,
                                validation_results: Dict[str, Any]) -> SignalQuality:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            confidence = signal.confidence
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            quality_score = confidence
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if signal.stop_loss and signal.take_profit:
                quality_score += 0.1
                
            if hasattr(signal, 'reason') and signal.reason:
                quality_score += 0.05
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            failed_checks = sum(
                1 for check, result in validation_results.get('checks', {}).items()
                if not result
            )
            quality_score -= failed_checks * 0.1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
            if quality_score >= 0.8:
                return SignalQuality.EXCELLENT
            elif quality_score >= 0.6:
                return SignalQuality.GOOD
            elif quality_score >= 0.4:
                return SignalQuality.AVERAGE
            elif quality_score >= 0.2:
                return SignalQuality.POOR
            else:
                return SignalQuality.INVALID
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return SignalQuality.POOR
    
    def _adjust_confidence(self, signal: TradingSignal, strategy_name: str,
                         validation_results: Dict[str, Any]) -> float:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            adjusted = signal.confidence
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Å—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_weight = self.strategy_weights.get(strategy_name, 1.0)
            adjusted *= strategy_weight
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            checks_passed = len([
                check for check, result in validation_results.get('checks', {}).items()
                if result
            ])
            total_checks = len(validation_results.get('checks', {}))
            
            if total_checks > 0:
                validation_factor = checks_passed / total_checks
                adjusted *= validation_factor
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            return max(0.0, min(1.0, adjusted))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return signal.confidence
    
    def _calculate_priority(self, signal: TradingSignal, strategy_name: str,
                          quality: SignalQuality) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-10)"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            quality_priority = {
                SignalQuality.EXCELLENT: 9,
                SignalQuality.GOOD: 7,
                SignalQuality.AVERAGE: 5,
                SignalQuality.POOR: 3,
                SignalQuality.INVALID: 1
            }
            
            priority = quality_priority.get(quality, 5)
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
            if signal.action in ['BUY', 'SELL']:
                priority += 1  # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤–∞–∂–Ω–µ–µ
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_priority = {
                'multi_indicator': 1,
                'momentum': 1,
                'ml_prediction': 2,  # ML —Å–∏–≥–Ω–∞–ª—ã –≤–∞–∂–Ω–µ–µ
                'scalping': -1  # –°–∫–∞–ª—å–ø–∏–Ω–≥ –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω
            }
            
            priority += strategy_priority.get(strategy_name, 0)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            return max(1, min(10, priority))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
            return 5
    
    async def _assess_risk(self, signal: TradingSignal, symbol: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1, –≥–¥–µ 1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫)"""
        try:
            risk_score = 0.0
            
            # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
            if signal.action == 'WAIT':
                risk_score = 0.1
            else:
                risk_score = 0.5
            
            # –†–∏—Å–∫ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é stop-loss
            if signal.action in ['BUY', 'SELL'] and not signal.stop_loss:
                risk_score += 0.3
            
            # –†–∏—Å–∫ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é stop/profit
            if signal.stop_loss and signal.take_profit:
                risk_reward = abs(signal.take_profit - signal.stop_loss) / abs(signal.stop_loss)
                if risk_reward < 1.5:  # –ü–ª–æ—Ö–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
                    risk_score += 0.2
            
            return min(1.0, risk_score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            return 0.5
    
    def _cache_signal(self, signal: ProcessedSignal):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            key = f"{signal.strategy_name}_{signal.symbol}"
            self.last_signals_by_strategy[key] = signal
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –∫–µ—à
            self.processed_signals.append(signal)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def _is_duplicate_signal(self, signal: TradingSignal, strategy_name: str,
                           symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            key = f"{strategy_name}_{symbol}"
            last_signal = self.last_signals_by_strategy.get(key)
            
            if not last_signal:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            time_diff = datetime.utcnow() - last_signal.timestamp
            if time_diff < timedelta(minutes=1):  # –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å
                if (last_signal.original_signal.action == signal.action and
                    abs(last_signal.original_signal.confidence - signal.confidence) < 0.1):
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _filter_signals_for_aggregation(self, signals: List[ProcessedSignal]) -> List[ProcessedSignal]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
        try:
            valid = []
            
            for signal in signals:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å
                age = datetime.utcnow() - signal.timestamp
                if age > self.max_signal_age:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if signal.quality in [SignalQuality.INVALID, SignalQuality.POOR]:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ WAIT —Å–∏–≥–Ω–∞–ª—ã
                if signal.original_signal.action == 'WAIT':
                    continue
                
                valid.append(signal)
            
            return valid
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return signals
    
    def _group_signals_by_action(self, signals: List[ProcessedSignal]) -> Dict[str, List[ProcessedSignal]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º"""
        groups = defaultdict(list)
        
        for signal in signals:
            action = signal.original_signal.action
            groups[action].append(signal)
        
        return dict(groups)
    
    def _find_consensus(self, actions_groups: Dict[str, List[ProcessedSignal]]) -> Tuple[Optional[str], List[ProcessedSignal]]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å—Ä–µ–¥–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not actions_groups:
                return None, []
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤
            best_action = max(actions_groups.keys(), key=lambda x: len(actions_groups[x]))
            best_signals = actions_groups[best_action]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            total_signals = sum(len(signals) for signals in actions_groups.values())
            consensus_ratio = len(best_signals) / total_signals
            
            if consensus_ratio >= self.consensus_threshold:
                return best_action, best_signals
            else:
                return None, []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {e}")
            return None, []
    
    def _calculate_aggregated_parameters(self, signals: List[ProcessedSignal]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            if not signals:
                return {
                    'confidence': 0.0,
                    'stop_loss': 0.0,
                    'take_profit': 0.0,
                    'position_size': 0.0
                }
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            total_weight = sum(s.confidence_adjusted for s in signals)
            
            if total_weight == 0:
                weights = [1/len(signals)] * len(signals)
            else:
                weights = [s.confidence_adjusted / total_weight for s in signals]
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            avg_confidence = sum(
                s.confidence_adjusted * w for s, w in zip(signals, weights)
            )
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
            stop_losses = [s.original_signal.stop_loss for s in signals if s.original_signal.stop_loss]
            take_profits = [s.original_signal.take_profit for s in signals if s.original_signal.take_profit]
            
            avg_stop_loss = np.mean(stop_losses) if stop_losses else 0.0
            avg_take_profit = np.mean(take_profits) if take_profits else 0.0
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç)
            position_size = avg_confidence * 0.1  # 10% –º–∞–∫—Å–∏–º—É–º
            
            return {
                'confidence': avg_confidence,
                'stop_loss': avg_stop_loss,
                'take_profit': avg_take_profit,
                'position_size': position_size
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {
                'confidence': 0.5,
                'stop_loss': 0.0,
                'take_profit': 0.0,
                'position_size': 0.05
            }
    
    def _calculate_consensus_strength(self, consensus_signals: List[ProcessedSignal],
                                    all_signals: List[ProcessedSignal]) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        try:
            if not all_signals:
                return 0.0
            
            consensus_ratio = len(consensus_signals) / len(all_signals)
            
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
            consensus_quality = np.mean([
                s.confidence_adjusted for s in consensus_signals
            ])
            
            return consensus_ratio * consensus_quality
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {e}")
            return 0.5
    
    def get_recent_signals(self, symbol: Optional[str] = None,
                         strategy: Optional[str] = None,
                         limit: int = 10) -> List[ProcessedSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            signals = list(self.processed_signals)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É
            if symbol:
                signals = [s for s in signals if s.symbol == symbol]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if strategy:
                signals = [s for s in signals if s.strategy_name == strategy]
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            signals.sort(key=lambda x: x.timestamp, reverse=True)
            
            return signals[:limit]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            total_signals = len(self.processed_signals)
            
            if total_signals == 0:
                return {
                    'total_processed': 0,
                    'quality_distribution': {},
                    'strategy_distribution': {},
                    'avg_confidence': 0.0
                }
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            quality_dist = defaultdict(int)
            for signal in self.processed_signals:
                quality_dist[signal.quality.value] += 1
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            strategy_dist = defaultdict(int)
            for signal in self.processed_signals:
                strategy_dist[signal.strategy_name] += 1
            
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            avg_confidence = np.mean([
                s.confidence_adjusted for s in self.processed_signals
            ])
            
            return {
                'total_processed': total_signals,
                'quality_distribution': dict(quality_dist),
                'strategy_distribution': dict(strategy_dist),
                'avg_confidence': avg_confidence
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
signal_processor = None

def get_signal_processor() -> SignalProcessor:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global signal_processor
    
    if signal_processor is None:
        signal_processor = SignalProcessor()
    
    return signal_processor

def create_signal_processor(**kwargs) -> SignalProcessor:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    return SignalProcessor(**kwargs)

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'SignalProcessor',
    'ProcessedSignal',
    'AggregatedSignal',
    'SignalQuality',
    'SignalStatus',
    'get_signal_processor',
    'create_signal_processor'
]