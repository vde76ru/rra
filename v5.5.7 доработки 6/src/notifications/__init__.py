"""
Telegram Notifier - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
–§–∞–π–ª: src/notifications/telegram.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
‚úÖ –ê–ª–µ—Ä—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import aiohttp
from typing import Dict, List, Optional, Any
from datetime import datetime
import json
import logging

from ..core.config import config

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
    
    üî• –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–û–¢–û–ú:
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    - –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
    """
    
    def __init__(self, token: str = None, chat_id: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.token = token or config.TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or config.TELEGRAM_CHAT_ID
        self.enabled = config.TELEGRAM_ENABLED
        
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.session = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.enable_trade_alerts = config.TELEGRAM_ENABLE_TRADE_ALERTS
        self.enable_error_alerts = config.TELEGRAM_ENABLE_ERROR_ALERTS
        self.enable_daily_summary = config.TELEGRAM_ENABLE_DAILY_SUMMARY
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.emojis = {
            'buy': 'üíö',
            'sell': '‚ù§Ô∏è',
            'profit': 'üí∞',
            'loss': 'üìâ',
            'warning': '‚ö†Ô∏è',
            'error': 'üö®',
            'info': '‚ÑπÔ∏è',
            'success': '‚úÖ',
            'robot': 'ü§ñ',
            'chart': 'üìä',
            'rocket': 'üöÄ',
            'fire': 'üî•'
        }
        
        if self.enabled and self.token and self.chat_id:
            logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)")
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def send_message(self, message: str, parse_mode: str = 'HTML',
                          disable_notification: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML/Markdown)
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.enabled or not self.token or not self.chat_id:
            logger.debug(f"üì± Telegram (–æ—Ç–∫–ª—é—á–µ–Ω): {message}")
            return False
        
        try:
            session = await self._get_session()
            
            url = f"{self.base_url}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': parse_mode,
                'disable_notification': disable_notification
            }
            
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.debug("‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
            return False
    
    async def send_trade_alert(self, trade_info: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            trade_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ
        """
        if not self.enable_trade_alerts:
            return False
        
        try:
            action = trade_info.get('action', 'unknown').upper()
            symbol = trade_info.get('symbol', 'Unknown')
            amount = trade_info.get('amount', 0)
            price = trade_info.get('price', 0)
            strategy = trade_info.get('strategy', 'unknown')
            profit = trade_info.get('profit', 0)
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            emoji = self.emojis.get(action.lower(), self.emojis['info'])
            profit_emoji = self.emojis['profit'] if profit > 0 else self.emojis['loss']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
{self.emojis['robot']} <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>

{emoji} <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
üíé <b>–°–∏–º–≤–æ–ª:</b> {symbol}
üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {amount:.6f}
üí≤ <b>–¶–µ–Ω–∞:</b> ${price:.4f}
üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy}
"""
            
            if profit != 0:
                message += f"{profit_emoji} <b>P&L:</b> ${profit:.2f} ({profit/abs(profit)*100:+.1f}%)\n"
            
            message += f"\nüïê <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%H:%M:%S UTC')}"
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def send_error_alert(self, error_info: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        """
        if not self.enable_error_alerts:
            return False
        
        try:
            error_type = error_info.get('type', 'Unknown Error')
            error_message = error_info.get('message', 'No details')
            component = error_info.get('component', 'unknown')
            severity = error_info.get('severity', 'medium')
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            severity_emojis = {
                'low': self.emojis['warning'],
                'medium': self.emojis['error'],
                'high': 'üö®üö®',
                'critical': 'üö®üö®üö®'
            }
            
            emoji = severity_emojis.get(severity, self.emojis['error'])
            
            message = f"""
{emoji} <b>–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ</b>

üî¥ <b>–¢–∏–ø:</b> {error_type}
üîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:</b> {component}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_message}
‚ö° <b>–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</b> {severity.upper()}

üïê <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%H:%M:%S UTC')}
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ error –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def send_daily_summary(self, summary_info: Dict[str, Any]) -> bool:
        """
        –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
        
        Args:
            summary_info: –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–µ–Ω—å
        """
        if not self.enable_daily_summary:
            return False
        
        try:
            total_trades = summary_info.get('total_trades', 0)
            profitable_trades = summary_info.get('profitable_trades', 0)
            daily_pnl = summary_info.get('daily_pnl', 0)
            win_rate = summary_info.get('win_rate', 0)
            best_trade = summary_info.get('best_trade', 0)
            worst_trade = summary_info.get('worst_trade', 0)
            active_positions = summary_info.get('active_positions', 0)
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è PnL
            pnl_emoji = self.emojis['profit'] if daily_pnl > 0 else self.emojis['loss']
            trend_emoji = self.emojis['rocket'] if daily_pnl > 0 else 'üìâ'
            
            message = f"""
{self.emojis['chart']} <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>

üìà <b>–°–¥–µ–ª–∫–∏:</b> {total_trades} (–∏–∑ –Ω–∏—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades})
{pnl_emoji} <b>P&L –∑–∞ –¥–µ–Ω—å:</b> ${daily_pnl:.2f}
üéØ <b>Win Rate:</b> {win_rate:.1f}%

{self.emojis['fire']} <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${best_trade:.2f}
üìâ <b>–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${worst_trade:.2f}
üíº <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {active_positions}

{trend_emoji} <b>–û–±—â–∏–π —Ç—Ä–µ–Ω–¥:</b> {'–ü—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å' if daily_pnl > 0 else '–£–±—ã—Ç–æ—á–Ω—ã–π –¥–µ–Ω—å'}

üìÖ <b>–î–∞—Ç–∞:</b> {datetime.utcnow().strftime('%Y-%m-%d')}
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def send_bot_status(self, status_info: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
        
        Args:
            status_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        try:
            status = status_info.get('status', 'unknown')
            uptime = status_info.get('uptime', 'unknown')
            balance = status_info.get('balance', 0)
            active_strategies = status_info.get('active_strategies', [])
            
            status_emojis = {
                'starting': 'üü°',
                'running': 'üü¢',
                'stopping': 'üü†',
                'stopped': 'üî¥',
                'error': 'üö®'
            }
            
            emoji = status_emojis.get(status, self.emojis['info'])
            
            message = f"""
{self.emojis['robot']} <b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>

{emoji} <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status.upper()}
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${balance:.2f}
üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b> {', '.join(active_strategies) if active_strategies else '–ù–µ—Ç'}

üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.utcnow().strftime('%H:%M:%S UTC')}
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def send_market_alert(self, market_info: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
        
        Args:
            market_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–æ—á–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
        """
        try:
            event_type = market_info.get('type', 'market_event')
            symbol = market_info.get('symbol', '')
            message_text = market_info.get('message', '')
            impact = market_info.get('impact', 'medium')
            
            impact_emojis = {
                'low': 'üü¢',
                'medium': 'üü°',
                'high': 'üî¥',
                'critical': 'üö®'
            }
            
            emoji = impact_emojis.get(impact, self.emojis['info'])
            
            message = f"""
{emoji} <b>–†—ã–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ</b>

üíé <b>–°–∏–º–≤–æ–ª:</b> {symbol}
üì¢ <b>–°–æ–±—ã—Ç–∏–µ:</b> {message_text}
‚ö° <b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> {impact.upper()}

üïê <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%H:%M:%S UTC')}
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'TelegramNotifier',
    'telegram_notifier'
]