"""
POSITION MANAGER - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
–§–∞–π–ª: src/exchange/position_manager.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π 24/7
‚úÖ Stop-loss/take-profit –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞
‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø—ã –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import asyncio
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
import logging

from ..core.database import SessionLocal
from ..models.trade import Trade, TradeStatus, OrderSide
from ..logging.smart_logger import get_logger
from .real_client import get_real_exchange_client

logger = get_logger(__name__)

@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: str  # long/short
    size: float
    entry_price: float
    current_price: float
    unrealized_pnl: float
    unrealized_pnl_percent: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    trailing_stop: bool = False
    trailing_distance: Optional[float] = None
    max_price: Optional[float] = None  # –î–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞
    min_price: Optional[float] = None  # –î–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞

@dataclass
class TradeUpdate:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    trade_id: int
    status: TradeStatus
    exit_price: Optional[float] = None
    profit: Optional[float] = None
    exit_reason: Optional[str] = None

class PositionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    
    üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò:
    1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π stop-loss/take-profit –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞
    3. –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
    4. Partial close –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
    5. –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ
    """
    
    def __init__(self, check_interval: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        
        Args:
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.exchange = get_real_exchange_client()
        self.check_interval = check_interval
        self.is_running = False
        self.positions: Dict[str, PositionInfo] = {}
        self.active_trades: Dict[int, Trade] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.max_slippage_percent = 0.5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        self.emergency_stop_drawdown = 0.15  # 15% –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.partial_close_profit_threshold = 0.05  # 5% –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        
        logger.info(
            "Position Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            category='position',
            check_interval=check_interval
        )
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π"""
        if self.is_running:
            logger.warning("Position Manager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        
        logger.info(
            "üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π",
            category='position'
        )
        
        while self.is_running:
            try:
                await self._monitoring_cycle()
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}",
                    category='position'
                )
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", category='position')
    
    async def _monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            await self._update_positions()
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –ë–î
            await self._load_active_trades()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º stop-loss/take-profit
            await self._check_stop_loss_take_profit()
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø—ã
            await self._update_trailing_stops()
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            await self._check_partial_close()
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            await self._check_emergency_conditions()
            
            # 7. –û–±–Ω–æ–≤–ª—è–µ–º PnL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await self._update_trades_pnl()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def _update_positions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö —Å –±–∏—Ä–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            exchange_positions = await self.exchange.fetch_positions()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –∫—ç—à
            self.positions.clear()
            
            for pos in exchange_positions:
                if pos.size > 0:  # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    symbol = pos.symbol
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    ticker = await self.exchange.fetch_ticker(symbol)
                    current_price = ticker['last']
                    
                    position_info = PositionInfo(
                        symbol=symbol,
                        side=pos.side,
                        size=pos.size,
                        entry_price=pos.entry_price,
                        current_price=current_price,
                        unrealized_pnl=pos.unrealized_pnl,
                        unrealized_pnl_percent=pos.percentage
                    )
                    
                    self.positions[symbol] = position_info
            
            if self.positions:
                logger.debug(
                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(self.positions)}",
                    category='position',
                    symbols=list(self.positions.keys())
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _load_active_trades(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–î"""
        db = SessionLocal()
        try:
            active_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.OPEN
            ).all()
            
            self.active_trades.clear()
            for trade in active_trades:
                self.active_trades[trade.id] = trade
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ stop-loss/take-profit –∫ –ø–æ–∑–∏—Ü–∏—è–º
                if trade.symbol in self.positions:
                    position = self.positions[trade.symbol]
                    position.stop_loss = trade.stop_loss
                    position.take_profit = trade.take_profit
                    position.trailing_stop = trade.trailing_stop or False
                    position.trailing_distance = trade.trailing_distance
            
        finally:
            db.close()
    
    async def _check_stop_loss_take_profit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π stop-loss –∏ take-profit"""
        updates = []
        
        for symbol, position in self.positions.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop-loss
                if position.stop_loss:
                    sl_triggered = False
                    
                    if position.side == 'long' and position.current_price <= position.stop_loss:
                        sl_triggered = True
                    elif position.side == 'short' and position.current_price >= position.stop_loss:
                        sl_triggered = True
                    
                    if sl_triggered:
                        logger.warning(
                            f"üõë Stop-Loss triggered –¥–ª—è {symbol}",
                            category='position',
                            symbol=symbol,
                            current_price=position.current_price,
                            stop_loss=position.stop_loss,
                            loss_percent=position.unrealized_pnl_percent
                        )
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        if await self._close_position_with_reason(symbol, "Stop-Loss"):
                            updates.append(TradeUpdate(
                                trade_id=self._get_trade_id_by_symbol(symbol),
                                status=TradeStatus.CLOSED,
                                exit_price=position.current_price,
                                profit=position.unrealized_pnl,
                                exit_reason="Stop-Loss"
                            ))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º take-profit
                if position.take_profit:
                    tp_triggered = False
                    
                    if position.side == 'long' and position.current_price >= position.take_profit:
                        tp_triggered = True
                    elif position.side == 'short' and position.current_price <= position.take_profit:
                        tp_triggered = True
                    
                    if tp_triggered:
                        logger.info(
                            f"üéØ Take-Profit triggered –¥–ª—è {symbol}",
                            category='position',
                            symbol=symbol,
                            current_price=position.current_price,
                            take_profit=position.take_profit,
                            profit_percent=position.unrealized_pnl_percent
                        )
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        if await self._close_position_with_reason(symbol, "Take-Profit"):
                            updates.append(TradeUpdate(
                                trade_id=self._get_trade_id_by_symbol(symbol),
                                status=TradeStatus.CLOSED,
                                exit_price=position.current_price,
                                profit=position.unrealized_pnl,
                                exit_reason="Take-Profit"
                            ))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL/TP –¥–ª—è {symbol}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏ –≤ –ë–î
        if updates:
            await self._update_trades_in_db(updates)
    
    async def _update_trailing_stops(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–æ–≤"""
        for symbol, position in self.positions.items():
            if not position.trailing_stop or not position.trailing_distance:
                continue
            
            try:
                trade = self._get_trade_by_symbol(symbol)
                if not trade:
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é/–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                if position.side == 'long':
                    if not position.max_price or position.current_price > position.max_price:
                        position.max_price = position.current_price
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                        new_stop = position.max_price * (1 - position.trailing_distance / 100)
                        
                        if not position.stop_loss or new_stop > position.stop_loss:
                            position.stop_loss = new_stop
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                            await self._update_trade_stop_loss(trade.id, new_stop)
                            
                            logger.info(
                                f"üìà –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}",
                                category='position',
                                symbol=symbol,
                                new_stop=new_stop,
                                max_price=position.max_price
                            )
                
                else:  # short position
                    if not position.min_price or position.current_price < position.min_price:
                        position.min_price = position.current_price
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                        new_stop = position.min_price * (1 + position.trailing_distance / 100)
                        
                        if not position.stop_loss or new_stop < position.stop_loss:
                            position.stop_loss = new_stop
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                            await self._update_trade_stop_loss(trade.id, new_stop)
                            
                            logger.info(
                                f"üìâ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}",
                                category='position',
                                symbol=symbol,
                                new_stop=new_stop,
                                min_price=position.min_price
                            )
                            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è {symbol}: {e}")
    
    async def _check_partial_close(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        for symbol, position in self.positions.items():
            try:
                # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–æ—Ä–æ–≥–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º 50% –ø–æ–∑–∏—Ü–∏–∏
                if position.unrealized_pnl_percent >= self.partial_close_profit_threshold * 100:
                    trade = self._get_trade_by_symbol(symbol)
                    if trade and not hasattr(trade, 'partial_closed'):
                        
                        partial_size = position.size * 0.5
                        
                        # –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        close_side = 'sell' if position.side == 'long' else 'buy'
                        
                        result = await self.exchange.create_order(
                            symbol=symbol,
                            order_type='market',
                            side=close_side,
                            amount=partial_size
                        )
                        
                        if result.success:
                            logger.info(
                                f"üí∞ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: 50%",
                                category='position',
                                symbol=symbol,
                                profit_percent=position.unrealized_pnl_percent
                            )
                            
                            # –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ
                            await self._mark_partial_closed(trade.id)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")
    
    async def _check_emergency_conditions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π PnL
            total_pnl = sum(pos.unrealized_pnl for pos in self.positions.values())
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            balance = await self.exchange.fetch_balance()
            total_balance = balance.get('total', {}).get('USDT', 0)
            
            if total_balance > 0:
                total_drawdown = abs(total_pnl) / total_balance
                
                if total_drawdown >= self.emergency_stop_drawdown:
                    logger.critical(
                        f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! –ü—Ä–æ—Å–∞–¥–∫–∞: {total_drawdown:.1%}",
                        category='position',
                        total_pnl=total_pnl,
                        total_balance=total_balance,
                        drawdown=total_drawdown
                    )
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
                    await self.emergency_close_all()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
    
    async def _update_trades_pnl(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL —Å–¥–µ–ª–æ–∫ –≤ –ë–î"""
        if not self.positions:
            return
        
        db = SessionLocal()
        try:
            for symbol, position in self.positions.items():
                trade = self._get_trade_by_symbol(symbol)
                if trade:
                    trade.current_price = position.current_price
                    trade.unrealized_pnl = position.unrealized_pnl
                    trade.updated_at = datetime.utcnow()
                    
                    db.merge(trade)
            
            db.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL –≤ –ë–î: {e}")
        finally:
            db.close()
    
    # =================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =================================================================
    
    async def _close_position_with_reason(self, symbol: str, reason: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
        try:
            success = await self.exchange.close_position(symbol)
            
            if success:
                logger.info(
                    f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {reason}",
                    category='position',
                    symbol=symbol,
                    reason=reason
                )
            else:
                logger.error(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}: {reason}",
                    category='position',
                    symbol=symbol,
                    reason=reason
                )
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False
    
    def _get_trade_by_symbol(self, symbol: str) -> Optional[Trade]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        for trade in self.active_trades.values():
            if trade.symbol == symbol:
                return trade
        return None
    
    def _get_trade_id_by_symbol(self, symbol: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        trade = self._get_trade_by_symbol(symbol)
        return trade.id if trade else None
    
    async def _update_trade_stop_loss(self, trade_id: int, new_stop_loss: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ stop-loss —Å–¥–µ–ª–∫–∏ –≤ –ë–î"""
        db = SessionLocal()
        try:
            trade = db.query(Trade).filter(Trade.id == trade_id).first()
            if trade:
                trade.stop_loss = new_stop_loss
                trade.updated_at = datetime.utcnow()
                db.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è stop-loss: {e}")
        finally:
            db.close()
    
    async def _mark_partial_closed(self, trade_id: int):
        """–ü–æ–º–µ—Ç–∏—Ç—å —Å–¥–µ–ª–∫—É –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é"""
        db = SessionLocal()
        try:
            trade = db.query(Trade).filter(Trade.id == trade_id).first()
            if trade:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                if not trade.notes:
                    trade.notes = "partial_closed"
                else:
                    trade.notes += ",partial_closed"
                trade.updated_at = datetime.utcnow()
                db.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
        finally:
            db.close()
    
    async def _update_trades_in_db(self, updates: List[TradeUpdate]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ –ë–î"""
        db = SessionLocal()
        try:
            for update in updates:
                trade = db.query(Trade).filter(Trade.id == update.trade_id).first()
                if trade:
                    trade.status = update.status
                    if update.exit_price:
                        trade.exit_price = update.exit_price
                    if update.profit is not None:
                        trade.profit = update.profit
                    if update.exit_reason:
                        trade.exit_reason = update.exit_reason
                    trade.closed_at = datetime.utcnow()
                    trade.updated_at = datetime.utcnow()
            
            db.commit()
            
            logger.info(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –≤ –ë–î: {len(updates)}",
                category='position'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –ë–î: {e}")
        finally:
            db.close()
    
    # =================================================================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´
    # =================================================================
    
    async def get_positions_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        if not self.positions:
            return {
                'total_positions': 0,
                'total_pnl': 0,
                'total_pnl_percent': 0,
                'positions': []
            }
        
        total_pnl = sum(pos.unrealized_pnl for pos in self.positions.values())
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç PnL
        avg_pnl_percent = sum(pos.unrealized_pnl_percent for pos in self.positions.values()) / len(self.positions)
        
        positions_data = []
        for symbol, pos in self.positions.items():
            positions_data.append({
                'symbol': symbol,
                'side': pos.side,
                'size': pos.size,
                'entry_price': pos.entry_price,
                'current_price': pos.current_price,
                'pnl': pos.unrealized_pnl,
                'pnl_percent': pos.unrealized_pnl_percent,
                'stop_loss': pos.stop_loss,
                'take_profit': pos.take_profit
            })
        
        return {
            'total_positions': len(self.positions),
            'total_pnl': total_pnl,
            'total_pnl_percent': avg_pnl_percent,
            'positions': positions_data
        }
    
    async def emergency_close_all(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô!", category='position')
            
            closed_count = await self.exchange.close_all_positions()
            
            if closed_count > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                updates = []
                for trade_id in self.active_trades.keys():
                    updates.append(TradeUpdate(
                        trade_id=trade_id,
                        status=TradeStatus.CLOSED,
                        exit_reason="Emergency Stop"
                    ))
                
                await self._update_trades_in_db(updates)
                
                logger.critical(
                    f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}",
                    category='position'
                )
                
                return True
            
            return False
            
        except Exception as e:
            logger.critical(f"üö® –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ó–ê–ö–†–´–¢–ò–Ø: {e}", category='position')
            return False
    
    async def set_trailing_stop(self, symbol: str, trailing_distance_percent: float) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            trade = self._get_trade_by_symbol(symbol)
            if not trade:
                logger.error(f"‚ùå –°–¥–µ–ª–∫–∞ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            db = SessionLocal()
            try:
                trade.trailing_stop = True
                trade.trailing_distance = trailing_distance_percent
                trade.updated_at = datetime.utcnow()
                db.merge(trade)
                db.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏–∏
                if symbol in self.positions:
                    self.positions[symbol].trailing_stop = True
                    self.positions[symbol].trailing_distance = trailing_distance_percent
                
                logger.info(
                    f"‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: {trailing_distance_percent}%",
                    category='position',
                    symbol=symbol,
                    trailing_distance=trailing_distance_percent
                )
                
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –¥–ª—è {symbol}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
position_manager = None

def get_position_manager() -> PositionManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
    global position_manager
    
    if position_manager is None:
        position_manager = PositionManager()
    
    return position_manager

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'PositionManager',
    'PositionInfo', 
    'TradeUpdate',
    'get_position_manager'
]