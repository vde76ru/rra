"""
–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
–§–∞–π–ª: src/bot/trader.py

üî• –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ú–ü–û–†–¢–´
"""
import asyncio
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
import numpy as np
from collections import deque

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –∏–∑ core (–ò–°–ü–†–ê–í–õ–ï–ù–û)
from ..core.models import Trade, Signal, Order
from ..core.database import SessionLocal
from ..core.config import config
from ..exchange.client import ExchangeClient

# ML –º–æ–¥—É–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
try:
    from ..ml.models.classifier import DirectionClassifier
except ImportError:
    DirectionClassifier = None
    
try:
    from ..ml.features.feature_engineering import FeatureEngineer
except ImportError:
    FeatureEngineer = None
    
try:
    from ..ml.models.reinforcement import TradingRLAgent
except ImportError:
    TradingRLAgent = None

# –ú–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
try:
    from ..analysis.news import NewsImpactScorer
except ImportError:
    NewsImpactScorer = None
    
try:
    from ..analysis.social.signal_extractor import SocialSignalExtractor
except ImportError:
    SocialSignalExtractor = None

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–û)
try:
    from ..logging.smart_logger import SmartLogger
    logger = SmartLogger(__name__)
except ImportError:
    import logging
    logger = logging.getLogger(__name__)

class Trader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, exchange: ExchangeClient):
        self.exchange = exchange
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        self.direction_classifier = DirectionClassifier() if DirectionClassifier else None
        self.feature_engineer = FeatureEngineer() if FeatureEngineer else None
        self.rl_agent = TradingRLAgent() if TradingRLAgent else None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.news_scorer = NewsImpactScorer() if NewsImpactScorer else None
        self.social_extractor = SocialSignalExtractor() if SocialSignalExtractor else None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
        self.total_trades = 0
        self.profitable_trades = 0
        self.total_profit = 0.0
        self.recent_trades = deque(maxlen=100)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        components_status = {
            'DirectionClassifier': self.direction_classifier is not None,
            'FeatureEngineer': self.feature_engineer is not None,
            'TradingRLAgent': self.rl_agent is not None,
            'NewsImpactScorer': self.news_scorer is not None,
            'SocialSignalExtractor': self.social_extractor is not None
        }
        
        available_components = [name for name, available in components_status.items() if available]
        unavailable_components = [name for name, available in components_status.items() if not available]
        
        logger.info(f"‚úÖ Trader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if available_components:
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(available_components)}")
        if unavailable_components:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(unavailable_components)}")
    
    async def execute_trade(self, signal: Dict[str, Any], strategy_name: str) -> Dict[str, Any]:
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"üîÑ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {signal.get('action')} {signal.get('symbol')}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–¥–µ–ª–∫–∏
            trade_data = {
                'symbol': signal.get('symbol'),
                'action': signal.get('action'),
                'amount': signal.get('amount', 0),
                'price': signal.get('price', 0),
                'strategy': strategy_name,
                'confidence': signal.get('confidence', 0),
                'timestamp': datetime.utcnow()
            }
            
            # ML –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.direction_classifier and signal.get('features'):
                try:
                    ml_prediction = await self._get_ml_prediction(signal)
                    trade_data['ml_prediction'] = ml_prediction
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.news_scorer:
                try:
                    news_impact = await self._analyze_news_impact(signal.get('symbol'))
                    trade_data['news_impact'] = news_impact
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if self.social_extractor:
                try:
                    social_sentiment = await self._analyze_social_sentiment(signal.get('symbol'))
                    trade_data['social_sentiment'] = social_sentiment
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ exchange
            execution_result = await self.exchange.execute_order(trade_data)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_statistics(execution_result)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            await self._save_trade_to_db(trade_data, execution_result)
            
            logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {execution_result.get('status', 'unknown')}")
            
            return {
                'success': True,
                'trade_data': trade_data,
                'execution_result': execution_result,
                'total_trades': self.total_trades,
                'win_rate': self.get_win_rate()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'trade_data': trade_data if 'trade_data' in locals() else {}
            }
    
    async def _get_ml_prediction(self, signal: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        if not self.direction_classifier:
            return {'available': False}
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            prediction = {
                'direction': 'UP' if signal.get('confidence', 0) > 0.7 else 'HOLD',
                'confidence': signal.get('confidence', 0.5),
                'expected_return': signal.get('confidence', 0.5) * 0.05,  # 5% –º–∞–∫—Å–∏–º—É–º
                'risk_score': 1 - signal.get('confidence', 0.5),
                'model_used': 'DirectionClassifier',
                'timestamp': datetime.utcnow().isoformat()
            }
            
            return prediction
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return {'available': False, 'error': str(e)}
    
    async def _analyze_news_impact(self, symbol: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not self.news_scorer:
            return {'available': False}
        
        try:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            impact = self.news_scorer.score_news_impact(
                news_text=f"Recent market analysis for {symbol}",
                symbol=symbol
            )
            
            return {
                'sentiment': impact.sentiment.value,
                'impact_score': impact.impact_score,
                'confidence': impact.confidence,
                'category': impact.category.value,
                'urgency': impact.urgency,
                'available': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return {'available': False, 'error': str(e)}
    
    async def _analyze_social_sentiment(self, symbol: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        if not self.social_extractor:
            return {'available': False}
        
        try:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ Twitter, Reddit –∏ —Ç.–¥.
            sentiment = {
                'overall_sentiment': 'neutral',
                'sentiment_score': 0.0,
                'mention_volume': 'medium',
                'influencer_sentiment': 'neutral',
                'trending': False,
                'available': True
            }
            
            return sentiment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'available': False, 'error': str(e)}
    
    def _update_statistics(self, execution_result: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        try:
            if execution_result.get('success', False):
                self.total_trades += 1
                
                profit = execution_result.get('profit', 0)
                self.total_profit += profit
                
                if profit > 0:
                    self.profitable_trades += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                trade_record = {
                    'timestamp': datetime.utcnow(),
                    'profit': profit,
                    'success': True
                }
                self.recent_trades.append(trade_record)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _save_trade_to_db(self, trade_data: Dict[str, Any], 
                              execution_result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = SessionLocal()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
            trade = Trade(
                symbol=trade_data.get('symbol'),
                strategy=trade_data.get('strategy'),
                action=trade_data.get('action'),
                amount=trade_data.get('amount', 0),
                price=trade_data.get('price', 0),
                confidence=trade_data.get('confidence', 0),
                profit=execution_result.get('profit', 0),
                status='completed' if execution_result.get('success') else 'failed',
                created_at=trade_data.get('timestamp', datetime.utcnow())
            )
            
            db.add(trade)
            db.commit()
            
            logger.debug(f"üíæ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: ID {trade.id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        finally:
            try:
                db.close()
            except:
                pass
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        return {
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'total_profit': self.total_profit,
            'win_rate': self.get_win_rate(),
            'average_profit': self.get_average_profit(),
            'recent_trades_count': len(self.recent_trades),
            'components_available': {
                'ml_classifier': self.direction_classifier is not None,
                'feature_engineer': self.feature_engineer is not None,
                'news_scorer': self.news_scorer is not None,
                'social_extractor': self.social_extractor is not None
            }
        }
    
    def get_win_rate(self) -> float:
        """–†–∞—Å—á–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        if self.total_trades == 0:
            return 0.0
        return (self.profitable_trades / self.total_trades) * 100
    
    def get_average_profit(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏"""
        if self.total_trades == 0:
            return 0.0
        return self.total_profit / self.total_trades

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['Trader']