"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô
–ü—É—Ç—å: src/web/api_routes.py

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞.
"""
import asyncio
import json
from fastapi import APIRouter, Depends, HTTPException, status, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import HTMLResponse, JSONResponse, StreamingResponse
from fastapi.security import OAuth2PasswordRequestForm
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from pydantic import BaseModel
import logging

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from ..core.database import get_db
from ..core.models import (
    Trade, Signal, TradingPair, User, BotState, 
    Balance, TradeStatus, OrderSide, SignalAction
)
from ..core.clean_logging import get_clean_logger
from .dashboard import get_dashboard_html
from .auth import get_current_user, create_access_token, verify_password, get_password_hash

logger = get_clean_logger(__name__)

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ó–ê–©–ò–¢–´ –û–¢ –ë–†–£–¢–§–û–†–°–ê =====
MAX_LOGIN_ATTEMPTS = 5  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
BLOCK_DURATION_MINUTES = 30  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
LOGIN_ATTEMPT_WINDOW_MINUTES = 15  # –û–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫

# ===== PYDANTIC –ú–û–î–ï–õ–ò =====

class LoginRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    username: str
    password: str

class BotStartRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    strategy: Optional[str] = "auto"
    pairs: Optional[List[str]] = None

class BotActionRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"""
    action: str  # start, stop, restart

class SettingsRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    max_position_size: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    max_daily_trades: Optional[int] = None
    trading_pairs: Optional[List[str]] = None

# ===== WEBSOCKET –ú–ï–ù–ï–î–ñ–ï–† =====

class WebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self._broadcast_task: Optional[asyncio.Task] = None
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        try:
            if bot_manager:
                status = bot_manager.get_status()
                await websocket.send_json({
                    "type": "initial_status",
                    "data": status
                })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def broadcast(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message = json.dumps(data, default=str, ensure_ascii=False)
        disconnected = []
        
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)
    
    async def start_broadcast_loop(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if self._broadcast_task and not self._broadcast_task.done():
            return
        
        self._broadcast_task = asyncio.create_task(self._broadcast_worker())
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    
    async def _broadcast_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        while True:
            try:
                if bot_manager:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    status = bot_manager.get_status()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    await self.broadcast({
                        "type": "status_update",
                        "data": status,
                        "timestamp": datetime.utcnow()
                    })
                
                await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast worker: {e}")
                await asyncio.sleep(10)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
ws_manager = WebSocketManager()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è BotManager
bot_manager = None

def set_bot_manager(manager):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞"""
    global bot_manager
    bot_manager = manager
    logger.info("‚úÖ BotManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ API —Ä–æ—É—Ç–∞—Ö")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter()

# ===== –§–£–ù–ö–¶–ò–ò –ó–ê–©–ò–¢–´ –û–¢ –ë–†–£–¢–§–û–†–°–ê =====

def check_user_blocked(user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if not user.is_blocked:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if user.blocked_at:
        block_duration = timedelta(minutes=BLOCK_DURATION_MINUTES)
        if datetime.utcnow() - user.blocked_at > block_duration:
            return False
    
    return True

def handle_failed_login(db: Session, user: User, client_ip: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞"""
    user.failed_login_attempts += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if user.failed_login_attempts >= MAX_LOGIN_ATTEMPTS:
        user.is_blocked = True
        user.blocked_at = datetime.utcnow()
        logger.warning(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ {MAX_LOGIN_ATTEMPTS} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. IP: {client_ip}")
    
    db.commit()

def handle_successful_login(db: Session, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
    user.failed_login_attempts = 0
    user.last_login = datetime.utcnow()
    if user.is_blocked:
        user.is_blocked = False
        user.blocked_at = None
    db.commit()

# ===== –û–°–ù–û–í–ù–´–ï ENDPOINTS =====

@router.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    return get_dashboard_html()

@router.get("/api")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "service": "Crypto Trading Bot API",
        "version": "3.0.0",
        "status": "running",
        "timestamp": datetime.utcnow(),
        "endpoints": {
            "dashboard": "/",
            "documentation": "/docs",
            "health": "/health",
            "login": "/api/login",
            "bot_status": "/api/bot/status",
            "websocket": "/ws"
        }
    }

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    health_info = {
        "status": "healthy",
        "timestamp": datetime.utcnow(),
        "components": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    try:
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        db.execute("SELECT 1")
        health_info["components"]["database"] = "healthy"
        db.close()
    except Exception as e:
        health_info["components"]["database"] = "error"
        health_info["status"] = "degraded"
    
    # BotManager
    if bot_manager:
        health_info["components"]["bot_manager"] = "healthy"
    else:
        health_info["components"]["bot_manager"] = "not_initialized"
        health_info["status"] = "degraded"
    
    return health_info

# ===== AUTHENTICATION ENDPOINTS =====

@router.post("/api/login")
async def login(
    request: LoginRequest,
    req: Request,
    db: Session = Depends(get_db)
):
    """
    Endpoint –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ MAX_LOGIN_ATTEMPTS –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    """
    # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
    client_ip = req.client.host if req.client else "unknown"
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.username == request.username).first()
    
    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º —è–≤–Ω–æ
        logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {request.username}. IP: {client_ip}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_blocked(user):
        remaining_time = BLOCK_DURATION_MINUTES
        if user.blocked_at:
            elapsed = (datetime.utcnow() - user.blocked_at).total_seconds() / 60
            remaining_time = max(0, BLOCK_DURATION_MINUTES - int(elapsed))
        
        logger.warning(f"üîí –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}. IP: {client_ip}")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=f"–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å {remaining_time} –º–∏–Ω—É—Ç"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if not verify_password(request.password, user.hashed_password):
        # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
        handle_failed_login(db, user, client_ip)
        
        remaining_attempts = MAX_LOGIN_ATTEMPTS - user.failed_login_attempts
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è {user.username}. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}. IP: {client_ip}")
        
        if remaining_attempts > 0:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}"
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {BLOCK_DURATION_MINUTES} –º–∏–Ω—É—Ç"
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not user.is_active:
        logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}. IP: {client_ip}")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        )
    
    # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    handle_successful_login(db, user)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(data={"sub": user.username})
    
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {user.username}. IP: {client_ip}")
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": {
            "username": user.username,
            "is_admin": user.is_admin,
            "email": user.email
        }
    }

@router.post("/auth/token")
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    req: Request = None,
    db: Session = Depends(get_db)
):
    """OAuth2 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º —á—Ç–æ –∏ /api/login
    login_request = LoginRequest(
        username=form_data.username,
        password=form_data.password
    )
    
    result = await login(login_request, req, db)
    
    # OAuth2 —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    return {
        "access_token": result["access_token"],
        "token_type": "bearer"
    }

@router.get("/api/user/me")
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return {
        "username": current_user.username,
        "email": current_user.email,
        "is_admin": current_user.is_admin,
        "is_active": current_user.is_active,
        "created_at": current_user.created_at,
        "last_login": current_user.last_login
    }

# ===== BOT CONTROL ENDPOINTS =====

@router.get("/api/bot/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    if not bot_manager:
        return {
            "status": "error",
            "is_running": False,
            "message": "Bot manager not initialized",
            "timestamp": datetime.utcnow()
        }
    
    try:
        return bot_manager.get_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "status": "error",
            "is_running": False,
            "message": str(e),
            "timestamp": datetime.utcnow()
        }

@router.post("/api/bot/start")
async def start_bot(
    request: BotStartRequest,
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    if not bot_manager:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Bot manager not initialized"
        )
    
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if request.pairs:
            await bot_manager.update_pairs(request.pairs)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        success, message = await bot_manager.start()
        
        if success:
            # –ó–∞–ø—É—Å–∫–∞–µ–º broadcast loop
            await ws_manager.start_broadcast_loop()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            await ws_manager.broadcast({
                "type": "bot_started",
                "message": message,
                "strategy": request.strategy,
                "user": current_user.username,
                "timestamp": datetime.utcnow()
            })
            
            return {
                "success": True,
                "message": message,
                "status": "started"
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=message
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to start bot: {str(e)}"
        )

@router.post("/api/bot/stop")
async def stop_bot(current_user: User = Depends(get_current_user)):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    if not bot_manager:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Bot manager not initialized"
        )
    
    logger.info(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞")
    
    try:
        success, message = await bot_manager.stop()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.broadcast({
            "type": "bot_stopped",
            "message": message,
            "user": current_user.username,
            "timestamp": datetime.utcnow()
        })
        
        return {
            "success": success,
            "message": message,
            "status": "stopped"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to stop bot: {str(e)}"
        )

@router.post("/api/bot/action")
async def bot_action(
    request: BotActionRequest,
    current_user: User = Depends(get_current_user)
):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    if request.action == "start":
        return await start_bot(BotStartRequest(), current_user)
    elif request.action == "stop":
        return await stop_bot(current_user)
    elif request.action == "restart":
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await stop_bot(current_user)
        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        return await start_bot(BotStartRequest(), current_user)
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Unknown action: {request.action}"
        )

# ===== DATA ENDPOINTS =====

@router.get("/api/stats")
async def get_statistics(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        now = datetime.utcnow()
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_trades = db.query(Trade).filter(
            Trade.created_at >= today_start
        ).all()
        
        # –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(today_trades)
        closed_trades = [t for t in today_trades if t.status == TradeStatus.CLOSED]
        profitable_trades = [t for t in closed_trades if t.profit and t.profit > 0]
        
        total_profit = sum(t.profit or 0 for t in closed_trades)
        success_rate = (len(profitable_trades) / len(closed_trades) * 100) if closed_trades else 0
        
        # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
        best_trade = max(closed_trades, key=lambda t: t.profit or 0) if closed_trades else None
        worst_trade = min(closed_trades, key=lambda t: t.profit or 0) if closed_trades else None
        
        return {
            "total_trades": total_trades,
            "closed_trades": len(closed_trades),
            "profitable_trades": len(profitable_trades),
            "total_profit": round(total_profit, 2),
            "success_rate": round(success_rate, 1),
            "best_trade": {
                "symbol": best_trade.symbol,
                "profit": round(best_trade.profit, 2)
            } if best_trade else None,
            "worst_trade": {
                "symbol": worst_trade.symbol,
                "profit": round(worst_trade.profit, 2)
            } if worst_trade else None,
            "timestamp": now
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get statistics"
        )



@router.get("/api/signals")
async def get_signals(
    limit: int = 50,
    executed: Optional[bool] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        query = db.query(Signal)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é
        if executed is not None:
            query = query.filter(Signal.executed == executed)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = query.order_by(desc(Signal.created_at)).limit(limit).all()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        signals_data = []
        for signal in signals:
            signals_data.append({
                "id": signal.id,
                "symbol": signal.symbol,
                "action": signal.action,
                "confidence": float(signal.confidence) if signal.confidence else 0,
                "price": float(signal.price) if signal.price else 0,
                "stop_loss": float(signal.stop_loss) if signal.stop_loss else None,
                "take_profit": float(signal.take_profit) if signal.take_profit else None,
                "strategy": signal.strategy,
                "reason": signal.reason,
                "executed": signal.executed,
                "created_at": signal.created_at.isoformat() if signal.created_at else None
            })
        
        return {"signals": signals_data}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get signals"
        )

@router.get("/api/balance")
async def get_balance(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å –±–∏—Ä–∂–∏
        if bot_manager and hasattr(bot_manager, 'exchange'):
            try:
                balance = await bot_manager.exchange.fetch_balance()
                usdt_balance = balance.get('USDT', {})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                balance_record = Balance(
                    currency='USDT',
                    total=float(usdt_balance.get('total', 0)),
                    free=float(usdt_balance.get('free', 0)),
                    used=float(usdt_balance.get('used', 0)),
                    timestamp=datetime.utcnow()
                )
                db.add(balance_record)
                db.commit()
                
                return {
                    "USDT": {
                        "total": float(usdt_balance.get('total', 0)),
                        "free": float(usdt_balance.get('free', 0)),
                        "used": float(usdt_balance.get('used', 0))
                    },
                    "source": "exchange",
                    "timestamp": datetime.utcnow()
                }
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –±–∏—Ä–∂–∏, –±–µ—Ä–µ–º –∏–∑ –ë–î
        latest_balance = db.query(Balance).filter(
            Balance.currency == 'USDT'
        ).order_by(desc(Balance.timestamp)).first()
        
        if latest_balance:
            return {
                "USDT": {
                    "total": float(latest_balance.total),
                    "free": float(latest_balance.free),
                    "used": float(latest_balance.used)
                },
                "source": "database",
                "timestamp": latest_balance.timestamp
            }
        else:
            return {
                "USDT": {"total": 0, "free": 0, "used": 0},
                "source": "default",
                "timestamp": datetime.utcnow()
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return {
            "USDT": {"total": 0, "free": 0, "used": 0},
            "error": str(e),
            "timestamp": datetime.utcnow()
        }

@router.post("/api/trading-pairs")
async def update_trading_pairs(
    pairs: List[str],
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"
        )
    
    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
        db.query(TradingPair).update({"is_active": False})
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        for symbol in pairs:
            pair = db.query(TradingPair).filter(
                TradingPair.symbol == symbol
            ).first()
            
            if pair:
                pair.is_active = True
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
                new_pair = TradingPair(
                    symbol=symbol,
                    is_active=True,
                    strategy='auto',  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    stop_loss_percent=2.0,
                    take_profit_percent=4.0
                )
                db.add(new_pair)
        
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–æ—Ç–µ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if bot_manager:
            await bot_manager.update_pairs(pairs)
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –æ–±–Ω–æ–≤–∏–ª —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
        
        return {
            "success": True,
            "message": f"Updated {len(pairs)} trading pairs",
            "pairs": pairs
        }
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update trading pairs"
        )


# ===== SETTINGS ENDPOINTS =====

@router.get("/api/settings")
async def get_settings(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –ë–î
        from ..core.config import config
        
        settings = {
            "trading": {
                "max_position_size_percent": config.MAX_POSITION_SIZE_PERCENT,
                "stop_loss_percent": config.STOP_LOSS_PERCENT,
                "take_profit_percent": config.TAKE_PROFIT_PERCENT,
                "max_daily_trades": config.MAX_DAILY_TRADES,
                "max_positions": config.MAX_POSITIONS,
                "min_risk_reward_ratio": config.MIN_RISK_REWARD_RATIO
            },
            "exchange": {
                "name": "Bybit",
                "testnet": config.BYBIT_TESTNET
            },
            "notifications": {
                "telegram_enabled": bool(config.TELEGRAM_BOT_TOKEN),
                "telegram_chat_id": config.TELEGRAM_CHAT_ID if config.TELEGRAM_BOT_TOKEN else None
            }
        }
        
        return settings
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get settings"
        )

@router.post("/api/settings")
async def update_settings(
    settings: SettingsRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
    
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        
        logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –æ–±–Ω–æ–≤–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.broadcast({
            "type": "settings_updated",
            "settings": settings.dict(exclude_none=True),
            "user": current_user.username,
            "timestamp": datetime.utcnow()
        })
        
        return {
            "success": True,
            "message": "Settings updated successfully"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update settings"
        )

# ===== WEBSOCKET ENDPOINT =====

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await ws_manager.connect(websocket)
    
    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            try:
                message = json.loads(data)
                
                if message.get("type") == "ping":
                    await websocket.send_json({"type": "pong"})
                elif message.get("type") == "get_status":
                    if bot_manager:
                        status = bot_manager.get_status()
                        await websocket.send_json({
                            "type": "status_response",
                            "data": status
                        })
                        
            except json.JSONDecodeError:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                
    except WebSocketDisconnect:
        ws_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        ws_manager.disconnect(websocket)

# ===== EXPORT/IMPORT ENDPOINTS =====

@router.get("/api/export/trades")
async def export_trades(
    format: str = "csv",
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ –≤ CSV –∏–ª–∏ JSON (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    try:
        query = db.query(Trade)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
        if not current_user.is_admin:
            query = query.filter(Trade.user_id == current_user.id)
        
        trades = query.order_by(desc(Trade.created_at)).all()
        
        if format == "json":
            trades_data = []
            for trade in trades:
                trades_data.append({
                    "id": trade.id,
                    "symbol": trade.symbol,
                    "side": str(trade.side.value) if hasattr(trade.side, 'value') else str(trade.side),
                    "entry_price": float(trade.entry_price) if trade.entry_price else 0,
                    "exit_price": float(trade.exit_price) if trade.exit_price else None,
                    "quantity": float(trade.quantity) if trade.quantity else 0,
                    "profit": float(trade.profit) if trade.profit else None,
                    "status": str(trade.status.value) if hasattr(trade.status, 'value') else str(trade.status),
                    "strategy": trade.strategy,
                    "created_at": trade.created_at.isoformat() if trade.created_at else None,
                    "closed_at": trade.closed_at.isoformat() if trade.closed_at else None
                })
            
            return JSONResponse(content={"trades": trades_data})
            
        else:  # CSV
            import csv
            from io import StringIO
            
            output = StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                "ID", "Symbol", "Side", "Entry Price", "Exit Price",
                "Quantity", "Profit", "Status", "Strategy",
                "Created At", "Closed At"
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for trade in trades:
                writer.writerow([
                    trade.id,
                    trade.symbol,
                    str(trade.side.value) if hasattr(trade.side, 'value') else str(trade.side),
                    float(trade.entry_price) if trade.entry_price else 0,
                    float(trade.exit_price) if trade.exit_price else "",
                    float(trade.quantity) if trade.quantity else 0,
                    float(trade.profit) if trade.profit else "",
                    str(trade.status.value) if hasattr(trade.status, 'value') else str(trade.status),
                    trade.strategy,
                    trade.created_at.isoformat() if trade.created_at else "",
                    trade.closed_at.isoformat() if trade.closed_at else ""
                ])
            
            output.seek(0)
            
            return StreamingResponse(
                iter([output.getvalue()]),
                media_type="text/csv",
                headers={
                    "Content-Disposition": f"attachment; filename=trades_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                }
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to export trades"
        )
        
        


# ===== ADMIN ENDPOINTS =====

@router.post("/api/admin/unblock-user/{username}")
async def unblock_user(
    username: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.username == username).first()
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
    user.is_blocked = False
    user.blocked_at = None
    user.failed_login_attempts = 0
    db.commit()
    
    logger.info(f"üîì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    
    return {
        "success": True,
        "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    }

@router.get("/api/admin/users")
async def get_users_list(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    
    users = db.query(User).all()
    
    users_data = []
    for user in users:
        users_data.append({
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "is_active": user.is_active,
            "is_admin": user.is_admin,
            "is_blocked": user.is_blocked,
            "failed_login_attempts": user.failed_login_attempts,
            "last_login": user.last_login.isoformat() if user.last_login else None,
            "blocked_at": user.blocked_at.isoformat() if user.blocked_at else None,
            "created_at": user.created_at.isoformat() if user.created_at else None
        })
    
    return {"users": users_data}

# ===== ADVANCED ANALYTICS ENDPOINTS =====

@router.get("/api/analytics/performance")
async def get_performance_analytics(
    days: int = 30,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedAnalytics –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        from ..analysis.advanced_analytics import advanced_analytics
        
        report = await advanced_analytics.generate_performance_report(days)
        return report
        
    except ImportError:
        # –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=days)
        
        query = db.query(Trade).filter(
            Trade.created_at >= start_date,
            Trade.status == TradeStatus.CLOSED
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
        if not current_user.is_admin:
            query = query.filter(Trade.user_id == current_user.id)
        
        trades = query.all()
        
        return {
            "period": {
                "start": start_date.isoformat(),
                "end": end_date.isoformat(),
                "days": days
            },
            "summary": {
                "total_trades": len(trades),
                "profitable_trades": len([t for t in trades if t.profit and t.profit > 0]),
                "total_profit": sum(t.profit or 0 for t in trades)
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get analytics"
        )
        
        
@router.get("/api/trading/status")
async def get_trading_status(
    current_user: User = Depends(get_current_user)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        if not bot_manager:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Bot manager not initialized"
            )
        
        if hasattr(bot_manager, 'trading_integration'):
            trading_status = bot_manager.trading_integration.get_status()
            
            return {
                'success': True,
                'data': {
                    'mode': 'live' if not config.PAPER_TRADING else 'paper',
                    'open_positions': trading_status.get('open_positions', 0),
                    'daily_pnl': trading_status.get('daily_pnl', 0.0),
                    'risk_utilization': trading_status.get('risk_utilization', 0.0),
                    'last_trade': trading_status.get('last_trade_time'),
                    'trades_today': trading_status.get('trades_today', 0),
                    'balance': trading_status.get('current_balance', 0.0),
                    'equity': trading_status.get('equity', 0.0),
                    'margin_used': trading_status.get('margin_used', 0.0),
                    'is_safe': trading_status.get('is_safe', True)
                }
            }
        else:
            return {
                'success': False, 
                'error': 'Trading integration not initialized'
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.get("/api/trading/positions")  
async def get_open_positions(
    current_user: User = Depends(get_current_user)
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        if not bot_manager or not hasattr(bot_manager, 'trading_integration'):
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Trading integration not available"
            )
        
        positions = await bot_manager.trading_integration.get_open_positions()
        
        return {
            'success': True,
            'data': positions,
            'count': len(positions),
            'timestamp': datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.post("/api/trading/close_position")
async def close_position(
    request: dict,
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        symbol = request.get('symbol')
        if not symbol:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Symbol is required"
            )
        
        if not bot_manager or not hasattr(bot_manager, 'trading_integration'):
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Trading integration not available"
            )
        
        result = await bot_manager.trading_integration.close_position(symbol)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –∑–∞–∫—Ä—ã–ª –ø–æ–∑–∏—Ü–∏—é {symbol}",
            category='trading',
            user_id=current_user.id,
            symbol=symbol,
            action='manual_close'
        )
        
        return {
            'success': result.get('success', False),
            'message': result.get('message', ''),
            'symbol': symbol,
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.post("/api/trading/close_all")
async def close_all_positions(
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        if not bot_manager or not hasattr(bot_manager, 'trading_integration'):
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Trading integration not available"
            )
        
        result = await bot_manager.trading_integration.close_all_positions()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        logger.critical(
            f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –∑–∞–∫—Ä—ã–ª –í–°–ï –ø–æ–∑–∏—Ü–∏–∏",
            category='trading',
            user_id=current_user.id,
            action='close_all_positions',
            positions_count=result.get('closed_count', 0)
        )
        
        return {
            'success': result.get('success', False),
            'message': result.get('message', ''),
            'closed_positions': result.get('closed_count', 0),
            'failed_positions': result.get('failed_count', 0),
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.post("/api/trading/emergency_stop")
async def emergency_stop_trading(
    current_user: User = Depends(get_current_user)
):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        if not bot_manager:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Bot manager not available"
            )
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        result = await bot_manager.emergency_stop()
        
        # –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.critical(
            f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.username}",
            category='emergency',
            user_id=current_user.id,
            action='emergency_stop'
        )
        
        return {
            'success': result[0],
            'message': result[1],
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.get("/api/trading/risk_status")
async def get_risk_status(
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤"""
    try:
        if not bot_manager or not hasattr(bot_manager, 'trading_integration'):
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Trading integration not available"
            )
        
        risk_status = await bot_manager.trading_integration.check_risk_limits()
        
        return {
            'success': True,
            'data': {
                'is_safe': risk_status.is_safe,
                'risk_score': risk_status.risk_score,
                'daily_loss': risk_status.daily_loss,
                'portfolio_risk': risk_status.portfolio_risk,
                'max_drawdown': risk_status.max_drawdown,
                'open_positions': risk_status.open_positions_count,
                'correlation_risk': risk_status.correlation_risk,
                'warnings': risk_status.warnings,
                'limits': {
                    'max_daily_loss': config.MAX_DAILY_LOSS_PERCENT,
                    'max_portfolio_risk': config.MAX_PORTFOLIO_RISK_PERCENT,
                    'max_positions': config.MAX_POSITIONS,
                    'max_correlation': config.MAX_CORRELATION_THRESHOLD
                }
            },
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∏—Å–∫–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )

@router.post("/api/trading/set_mode")
async def set_trading_mode(
    request: dict,
    current_user: User = Depends(get_current_user)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (paper/live)"""
    try:
        mode = request.get('mode')  # 'paper' –∏–ª–∏ 'live'
        
        if mode not in ['paper', 'live']:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Mode must be 'paper' or 'live'"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if mode == 'live' and not current_user.is_admin:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Only admin can enable live trading"
            )
        
        if not bot_manager:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Bot manager not available"
            )
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º
        old_mode = 'paper' if config.PAPER_TRADING else 'live'
        
        if mode == 'paper':
            config.PAPER_TRADING = True
            config.LIVE_TRADING = False
        else:
            config.PAPER_TRADING = False  
            config.LIVE_TRADING = True
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞
        logger.critical(
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} —Å–º–µ–Ω–∏–ª —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {old_mode} ‚Üí {mode}",
            category='trading',
            user_id=current_user.id,
            old_mode=old_mode,
            new_mode=mode
        )
        
        return {
            'success': True,
            'message': f'–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode}',
            'old_mode': old_mode,
            'new_mode': mode,
            'timestamp': datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê =====

__all__ = [
    'router',
    'set_bot_manager', 
    'ws_manager',
    'WebSocketManager',
    'get_trading_status',
    'get_open_positions', 
    'close_position',
    'close_all_positions',
    'emergency_stop_trading',
    'get_risk_status',
    'set_trading_mode'
]