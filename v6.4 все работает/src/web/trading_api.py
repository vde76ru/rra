"""
API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: src/web/trading_api.py

üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ï–ô:
‚úÖ –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞  
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –£–î–ê–õ–ï–ù–ê –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_trading_pairs
‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–º–µ–Ω
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from flask import jsonify, request
from functools import wraps

from ..core.config import config
from ..logging.smart_logger import get_logger

logger = get_logger(__name__)

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        auth_header = request.headers.get('Authorization', '')
        if not auth_header and not request.cookies.get('session'):
            return jsonify({
                'success': False,
                'error': 'Authorization required'
            }), 401
        return f(*args, **kwargs)
    return decorated_function

def register_trading_api_routes(app, bot_manager=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    """
    
    logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–û–ú
    # =================================================================
    
    @app.route('/api/bot/start', methods=['POST'])
    @login_required
    def start_bot():
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            success = bot_manager.start()
            
            if success:
                return jsonify({
                    'success': True,
                    'message': 'Bot started successfully',
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Failed to start bot'
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    @login_required
    def stop_bot():
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            success = bot_manager.stop()
            
            if success:
                return jsonify({
                    'success': True,
                    'message': 'Bot stopped successfully',
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Failed to stop bot'
                }), 500
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/restart', methods=['POST'])
    @login_required 
    def restart_bot():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            stop_success = bot_manager.stop()
            if not stop_success:
                return jsonify({
                    'success': False,
                    'error': 'Failed to stop bot for restart'
                }), 500
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            start_success = bot_manager.start()
            if not start_success:
                return jsonify({
                    'success': False,
                    'error': 'Failed to start bot after stop'
                }), 500
            
            return jsonify({
                'success': True,
                'message': 'Bot restarted successfully',
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/emergency-stop', methods=['POST'])
    @login_required
    def emergency_stop_bot():
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            success = bot_manager.emergency_stop()
            
            return jsonify({
                'success': success,
                'message': 'Emergency stop executed' if success else 'Emergency stop failed',
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò
    # =================================================================
    
    @app.route('/api/bot/positions')
    @login_required
    def get_bot_positions():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            if hasattr(bot_manager, 'get_open_positions'):
                positions = bot_manager.get_open_positions()
            elif hasattr(bot_manager, 'positions'):
                positions = list(bot_manager.positions.values())
            else:
                positions = []
            
            return jsonify({
                'success': True,
                'positions': positions,
                'count': len(positions),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/close-position/<symbol>', methods=['POST'])
    @login_required
    def close_bot_position(symbol):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            success = bot_manager.close_position(symbol)
            
            return jsonify({
                'success': success,
                'message': f'Position {symbol} closed' if success else f'Failed to close {symbol}',
                'symbol': symbol,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/close-all-positions', methods=['POST'])
    @login_required
    def close_all_bot_positions():
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            result = bot_manager.close_all_positions()
            
            return jsonify({
                'success': result.get('success', False),
                'closed_count': result.get('closed_count', 0),
                'failed_count': result.get('failed_count', 0),
                'message': result.get('message', 'Completed'),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–†–ì–û–í–´–ú–ò –ü–ê–†–ê–ú–ò (–ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–û)
    # =================================================================
    
    @app.route('/api/bot/active-pairs', methods=['GET'])
    @login_required
    def get_bot_active_pairs():
        """
        –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–æ—Ç–∞
        (–±—ã–ª–∞ get_trading_pairs - –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∞ —Å charts_routes.py)
        """
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            status = bot_manager.get_status()
            active_pairs = status.get('active_pairs', [])
            all_pairs = status.get('available_pairs', [])
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
            if not all_pairs:
                all_pairs = active_pairs
            
            return jsonify({
                'success': True,
                'active_pairs': active_pairs,
                'available_pairs': all_pairs,
                'count': len(active_pairs),
                'total_available': len(all_pairs),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/active-pairs', methods=['POST'])
    @login_required
    def update_bot_active_pairs():
        """
        –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–æ—Ç–∞
        (–±—ã–ª–∞ update_trading_pairs - –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∞)
        """
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            data = request.get_json() or {}
            pairs = data.get('pairs', [])
            
            if not pairs:
                return jsonify({
                    'success': False,
                    'error': 'No pairs specified'
                }), 400
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä
            invalid_pairs = [pair for pair in pairs if not isinstance(pair, str) or len(pair) < 6]
            if invalid_pairs:
                return jsonify({
                    'success': False,
                    'error': f'Invalid pairs format: {invalid_pairs}'
                }), 400
            
            success = bot_manager.update_trading_pairs(pairs)
            
            return jsonify({
                'success': success,
                'active_pairs': pairs,
                'count': len(pairs),
                'message': 'Trading pairs updated' if success else 'Failed to update pairs',
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –°–¢–†–ê–¢–ï–ì–ò–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò
    # =================================================================
    
    @app.route('/api/bot/strategies')
    @login_required
    def get_bot_strategies():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            strategies = bot_manager.get_available_strategies()
            current_strategy = bot_manager.get_current_strategy()
            
            return jsonify({
                'success': True,
                'strategies': strategies,
                'current_strategy': current_strategy,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/strategy', methods=['POST'])
    @login_required
    def set_bot_strategy():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            data = request.get_json() or {}
            strategy = data.get('strategy')
            
            if not strategy:
                return jsonify({
                    'success': False,
                    'error': 'Strategy not specified'
                }), 400
            
            success = bot_manager.set_strategy(strategy)
            
            return jsonify({
                'success': success,
                'strategy': strategy,
                'message': 'Strategy updated' if success else 'Failed to update strategy',
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    # =================================================================
    
    @app.route('/api/bot/health')
    @login_required
    def get_bot_health():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available',
                    'status': 'unavailable'
                }), 503
            
            health = bot_manager.get_health_status()
            
            return jsonify({
                'success': True,
                'health': health,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'status': 'error'
            }), 500
    
    @app.route('/api/bot/metrics')
    @login_required
    def get_bot_metrics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        try:
            if not bot_manager:
                return jsonify({
                    'success': False,
                    'error': 'Bot manager not available'
                }), 503
            
            metrics = bot_manager.get_performance_metrics()
            
            return jsonify({
                'success': True,
                'metrics': metrics,
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # CORS –ü–û–î–î–ï–†–ñ–ö–ê
    # =================================================================
    
    @app.route('/api/bot/start', methods=['OPTIONS'])
    @app.route('/api/bot/stop', methods=['OPTIONS'])
    @app.route('/api/bot/restart', methods=['OPTIONS'])
    @app.route('/api/bot/emergency-stop', methods=['OPTIONS'])
    @app.route('/api/bot/close-all-positions', methods=['OPTIONS'])
    def trading_api_options():
        """CORS preflight –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response
    
    # =================================================================
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    # =================================================================
    
    logger.info("‚úÖ API —Ä–æ—É—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   üü¢ POST /api/bot/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    logger.info("   üü¢ POST /api/bot/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    logger.info("   üü¢ POST /api/bot/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    logger.info("   üü¢ POST /api/bot/emergency-stop - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    logger.info("   üü¢ GET /api/bot/positions - –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    logger.info("   üü¢ POST /api/bot/close-position/<symbol> - –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
    logger.info("   üü¢ POST /api/bot/close-all-positions - –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π")
    logger.info("   üü¢ GET/POST /api/bot/active-pairs - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏")
    logger.info("   üü¢ GET /api/bot/strategies - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    logger.info("   üü¢ POST /api/bot/strategy - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    logger.info("   üü¢ GET /api/bot/health - –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞")
    logger.info("   üü¢ GET /api/bot/metrics - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    return True

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['register_trading_api_routes']