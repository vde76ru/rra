"""
–†–ï–ê–õ–¨–ù–´–ô –ë–ò–†–ñ–ï–í–û–ô –ö–õ–ò–ï–ù–¢ - –ó–∞–º–µ–Ω–∞ –∑–∞–≥–ª—É—à–µ–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
–§–∞–π–ª: src/exchange/real_client.py

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–≥–ª—É—à–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏  
‚úÖ Stop-loss/take-profit –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –±–∏—Ä–∂–∏
"""
import asyncio
import ccxt.async_support as ccxt
import numpy as np
import time
import random
from typing import Dict, List, Optional, Tuple, Any, Union
from datetime import datetime, timedelta
from dataclasses import dataclass
import logging
from decimal import Decimal, ROUND_DOWN

from ..core.database import SessionLocal
from ..core.models import Trade, TradeStatus, OrderSide
from ..logging.smart_logger import get_logger
from ..core.config import config

logger = get_logger(__name__)

@dataclass
class OrderResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    success: bool
    order_id: Optional[str] = None
    filled_quantity: float = 0.0
    average_price: float = 0.0
    commission: float = 0.0
    error_message: Optional[str] = None
    timestamp: datetime = None

@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: str  # 'long' –∏–ª–∏ 'short'
    size: float
    entry_price: float
    unrealized_pnl: float
    percentage: float
    value: float

class RealExchangeClient:
    """
    –†–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    üî• –ó–ê–ú–ï–ù–Ø–ï–¢ –í–°–ï –ó–ê–ì–õ–£–®–ö–ò –ù–ê –†–ï–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:
    - –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–ø–∞–º–∏
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    - –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    - –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∏—Ä–∂–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
        self.exchange = None
        self.is_connected = False
        self.last_api_call = 0
        self.api_calls_count = 0
        self.rate_limit_delay = 1.0  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
        self.human_delays = {
            'min_delay': 0.5,
            'max_delay': 3.0,
            'order_delay': 2.0,
            'analysis_delay': 5.0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        self.order_retry_attempts = 3
        self.order_timeout = 30
        self.slippage_tolerance = 0.5  # 0.5%
        
        logger.info("üîó RealExchangeClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", category='exchange')
    
    async def connect(self, exchange_name: str = 'bybit', testnet: bool = True) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∏—Ä–∂–µ
        
        Args:
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏ ('bybit', 'binance', 'okex')
            testnet: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞)
        """
        try:
            if exchange_name.lower() == 'bybit':
                self.exchange = ccxt.bybit({
                    'apiKey': config.BYBIT_API_KEY,
                    'secret': config.BYBIT_SECRET_KEY,
                    'sandbox': testnet,  # True –¥–ª—è testnet
                    'enableRateLimit': True,
                    'rateLimit': 100,  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    'options': {
                        'defaultType': 'spot',  # spot –∏–ª–∏ future
                        'adjustForTimeDifference': True
                    }
                })
            
            elif exchange_name.lower() == 'binance':
                self.exchange = ccxt.binance({
                    'apiKey': config.BINANCE_API_KEY,
                    'secret': config.BINANCE_SECRET_KEY,
                    'sandbox': testnet,
                    'enableRateLimit': True,
                    'rateLimit': 50,
                    'options': {
                        'defaultType': 'spot',
                        'adjustForTimeDifference': True
                    }
                })
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.exchange.load_markets()
            balance = await self.exchange.fetch_balance()
            
            self.is_connected = True
            
            logger.info(
                f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                category='exchange',
                testnet=testnet,
                markets_count=len(self.exchange.markets)
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {e}")
            self.is_connected = False
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        if self.exchange:
            await self.exchange.close()
            self.is_connected = False
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏", category='exchange')
    
    # =================================================================
    # –†–ï–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # =================================================================
    
    async def create_order(self, symbol: str, order_type: str, side: str, 
                          amount: float, price: Optional[float] = None,
                          stop_loss: Optional[float] = None,
                          take_profit: Optional[float] = None) -> OrderResult:
        """
        üî• –†–ï–ê–õ–¨–ù–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ (–ù–ï –ó–ê–ì–õ–£–®–ö–ê!)
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ('market', 'limit')
            side: –°—Ç–æ—Ä–æ–Ω–∞ ('buy', 'sell')
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            take_profit: –£—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            
        Returns:
            OrderResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not self.is_connected:
                return OrderResult(
                    success=False, 
                    error_message="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"
                )
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            await self._human_delay('order')
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            validation_result = await self._validate_order_params(
                symbol, order_type, side, amount, price
            )
            if not validation_result.success:
                return validation_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance_check = await self._check_sufficient_balance(symbol, side, amount, price)
            if not balance_check.success:
                return balance_check
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            normalized_params = await self._normalize_order_params(symbol, amount, price)
            amount = normalized_params['amount']
            price = normalized_params['price']
            
            logger.info(
                f"üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞",
                category='exchange',
                symbol=symbol,
                type=order_type,
                side=side,
                amount=amount,
                price=price
            )
            
            # –†–∞–∑–º–µ—â–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
            order = None
            for attempt in range(self.order_retry_attempts):
                try:
                    order = await self.exchange.create_order(
                        symbol=symbol,
                        type=order_type,
                        side=side,
                        amount=amount,
                        price=price,
                        params={}
                    )
                    break
                    
                except ccxt.NetworkError as e:
                    if attempt < self.order_retry_attempts - 1:
                        await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                    else:
                        raise e
            
            if not order:
                return OrderResult(
                    success=False,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
                )
            
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            order_result = await self._wait_for_order_execution(order['id'], symbol)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stop-loss –∏ take-profit –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if order_result.success and (stop_loss or take_profit):
                await self._set_stop_loss_take_profit(
                    symbol, side, order_result.filled_quantity, 
                    stop_loss, take_profit
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if order_result.success:
                logger.info(
                    f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω",
                    category='exchange',
                    order_id=order_result.order_id,
                    filled_quantity=order_result.filled_quantity,
                    average_price=order_result.average_price,
                    commission=order_result.commission
                )
            else:
                logger.error(
                    f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_result.error_message}",
                    category='exchange'
                )
            
            return order_result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return OrderResult(
                success=False,
                error_message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )
    
    async def _validate_order_params(self, symbol: str, order_type: str, 
                                   side: str, amount: float, 
                                   price: Optional[float]) -> OrderResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
            if symbol not in self.exchange.markets:
                return OrderResult(
                    success=False,
                    error_message=f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
            market = self.exchange.markets[symbol]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            if amount < market.get('limits', {}).get('amount', {}).get('min', 0):
                return OrderResult(
                    success=False,
                    error_message=f"–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {amount}"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            if order_type == 'limit' and price is None:
                return OrderResult(
                    success=False,
                    error_message="–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"
                )
            
            return OrderResult(success=True)
            
        except Exception as e:
            return OrderResult(
                success=False,
                error_message=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            )
    
    async def _check_sufficient_balance(self, symbol: str, side: str, 
                                      amount: float, price: Optional[float]) -> OrderResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance = await self.exchange.fetch_balance()
            
            if side.lower() == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–∞ –∫–≤–æ—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ (–æ–±—ã—á–Ω–æ USDT)
                quote_currency = symbol.split('/')[1]
                available_balance = balance.get(quote_currency, {}).get('free', 0)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É
                if price:
                    required_amount = amount * price
                else:
                    # –î–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –∑–∞–ø–∞—Å–æ–º
                    ticker = await self.exchange.fetch_ticker(symbol)
                    required_amount = amount * ticker['ask'] * 1.01  # +1% –∑–∞–ø–∞—Å
                
                if available_balance < required_amount:
                    return OrderResult(
                        success=False,
                        error_message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {quote_currency}: –Ω—É–∂–Ω–æ {required_amount:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance:.2f}"
                    )
            
            else:  # sell
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
                base_currency = symbol.split('/')[0]
                available_balance = balance.get(base_currency, {}).get('free', 0)
                
                if available_balance < amount:
                    return OrderResult(
                        success=False,
                        error_message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_currency}: –Ω—É–∂–Ω–æ {amount}, –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance}"
                    )
            
            return OrderResult(success=True)
            
        except Exception as e:
            return OrderResult(
                success=False,
                error_message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            )
    
    async def _normalize_order_params(self, symbol: str, amount: float, 
                                    price: Optional[float]) -> Dict[str, float]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏"""
        try:
            market = self.exchange.markets[symbol]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            amount_precision = market.get('precision', {}).get('amount', 8)
            amount = float(Decimal(str(amount)).quantize(
                Decimal('0.' + '0' * (amount_precision - 1) + '1'),
                rounding=ROUND_DOWN
            ))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—É
            if price:
                price_precision = market.get('precision', {}).get('price', 8)
                price = float(Decimal(str(price)).quantize(
                    Decimal('0.' + '0' * (price_precision - 1) + '1'),
                    rounding=ROUND_DOWN
                ))
            
            return {
                'amount': amount,
                'price': price
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {'amount': amount, 'price': price}
    
    async def _wait_for_order_execution(self, order_id: str, symbol: str, 
                                      timeout: int = 30) -> OrderResult:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            start_time = time.time()
            
            while time.time() - start_time < timeout:
                await asyncio.sleep(1)
                
                order = await self.exchange.fetch_order(order_id, symbol)
                
                if order['status'] == 'closed':
                    return OrderResult(
                        success=True,
                        order_id=order_id,
                        filled_quantity=float(order['filled']),
                        average_price=float(order['average']) if order['average'] else float(order['price']),
                        commission=float(order.get('fee', {}).get('cost', 0)),
                        timestamp=datetime.utcnow()
                    )
                
                elif order['status'] == 'canceled':
                    return OrderResult(
                        success=False,
                        error_message="–û—Ä–¥–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω"
                    )
            
            # Timeout - –æ—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
            await self.exchange.cancel_order(order_id, symbol)
            return OrderResult(
                success=False,
                error_message=f"–¢–∞–π–º–∞—É—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ ({timeout}—Å)"
            )
            
        except Exception as e:
            return OrderResult(
                success=False,
                error_message=f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            )
    
    async def _set_stop_loss_take_profit(self, symbol: str, side: str, 
                                       quantity: float, stop_loss: Optional[float],
                                       take_profit: Optional[float]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ stop-loss –∏ take-profit –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            if stop_loss:
                sl_side = 'sell' if side == 'buy' else 'buy'
                await self.exchange.create_order(
                    symbol=symbol,
                    type='stop_market',
                    side=sl_side,
                    amount=quantity,
                    price=None,
                    params={'stopPrice': stop_loss}
                )
                
                logger.info(f"‚úÖ Stop-loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_loss}")
            
            if take_profit:
                tp_side = 'sell' if side == 'buy' else 'buy'
                await self.exchange.create_order(
                    symbol=symbol,
                    type='take_profit_market',
                    side=tp_side,
                    amount=quantity,
                    price=None,
                    params={'stopPrice': take_profit}
                )
                
                logger.info(f"‚úÖ Take-profit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {take_profit}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP: {e}")
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò
    # =================================================================
    
    async def fetch_positions(self) -> List[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = await self.exchange.fetch_positions()
            
            position_list = []
            for pos in positions:
                if float(pos.get('contracts', 0)) > 0:  # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    position_info = PositionInfo(
                        symbol=pos['symbol'],
                        side=pos.get('side', 'long'),
                        size=float(pos.get('contracts', 0)),
                        entry_price=float(pos.get('entryPrice', 0)),
                        unrealized_pnl=float(pos.get('unrealizedPnl', 0)),
                        percentage=float(pos.get('percentage', 0)),
                        value=float(pos.get('notional', 0))
                    )
                    position_list.append(position_info)
            
            return position_list
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def close_position(self, symbol: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        try:
            positions = await self.fetch_positions()
            
            for position in positions:
                if position.symbol == symbol:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
                    close_side = 'sell' if position.side == 'long' else 'buy'
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
                    result = await self.create_order(
                        symbol=symbol,
                        order_type='market',
                        side=close_side,
                        amount=position.size
                    )
                    
                    return result.success
            
            logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False
    
    async def close_all_positions(self) -> int:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = await self.fetch_positions()
            closed_count = 0
            
            for position in positions:
                success = await self.close_position(position.symbol)
                if success:
                    closed_count += 1
                    
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
                await asyncio.sleep(0.5)
            
            logger.info(f"üö® –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}/{len(positions)}")
            return closed_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0
    
    # =================================================================
    # –ü–û–õ–£–ß–ï–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•
    # =================================================================
    
    async def fetch_ticker(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞"""
        await self._human_delay('data')
        return await self.exchange.fetch_ticker(symbol)
    
    async def fetch_balance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        await self._human_delay('data')
        return await self.exchange.fetch_balance()
    
    async def fetch_order_book(self, symbol: str, limit: int = 20) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        await self._human_delay('data')
        return await self.exchange.fetch_order_book(symbol, limit)
    
    async def get_candles(self, symbol: str, timeframe: str = '5m', 
                         limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π"""
        await self._human_delay('data')
        
        ohlcv = await self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        
        candles = []
        for candle in ohlcv:
            candles.append({
                'timestamp': candle[0],
                'open': candle[1],
                'high': candle[2],
                'low': candle[3],
                'close': candle[4],
                'volume': candle[5]
            })
        
        return candles
    
    # =================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =================================================================
    
    async def _human_delay(self, operation_type: str = 'default'):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        delays = {
            'order': self.human_delays['order_delay'],
            'data': random.uniform(self.human_delays['min_delay'], self.human_delays['max_delay']),
            'analysis': self.human_delays['analysis_delay'],
            'default': self.rate_limit_delay
        }
        
        delay = delays.get(operation_type, delays['default'])
        delay += random.uniform(0, delay * 0.3)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        
        await asyncio.sleep(delay)
        self.api_calls_count += 1
    
    def calculate_position_size(self, symbol: str, balance: float, 
                              risk_percent: float = 2.0) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            risk_amount = balance * (risk_percent / 100)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
            price = 50000  # –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç—å —Å –±–∏—Ä–∂–∏
            
            position_size = risk_amount / price
            
            return round(position_size, 6)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
real_exchange_client = None

def get_real_exchange_client() -> RealExchangeClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    global real_exchange_client
    
    if real_exchange_client is None:
        real_exchange_client = RealExchangeClient()
    
    return real_exchange_client

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'RealExchangeClient',
    'OrderResult',
    'PositionInfo',
    'get_real_exchange_client'
]