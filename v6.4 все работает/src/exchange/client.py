"""
–†–ï–ê–õ–¨–ù–´–ô EXCHANGE CLIENT - –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
import ccxt
import asyncio
import random
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
import logging
import os
from decimal import Decimal, ROUND_DOWN

from ..logging.smart_logger import get_logger
from ..core.bybit_config import BybitConfig

logger = get_logger(__name__)

class ExchangeClient:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –±–∏—Ä–∂–µ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.is_connected = False
        self.exchange_name = "mock"
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        self.is_connected = True
        return True
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        self.is_connected = False
    
    async def get_ticker(self, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞"""
        return {
            'symbol': symbol,
            'last': 50000.0,
            'percentage': 1.5,
            'baseVolume': 1000000
        }
    
    async def get_account_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        return {
            'totalWalletBalance': 10000.0,
            'availableBalance': 8000.0
        }

class RealExchangeClient:
    """
    –†–ï–ê–õ–¨–ù–´–ô –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ Bybit —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –†–ï–ê–õ–¨–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!
    –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
    1. API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    2. Testnet –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
    3. –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
    4. –†–∏—Å–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.exchange = None
        self.is_connected = False
        self.last_request_time = {}
        self._init_exchange()
    
    def _init_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            config = BybitConfig.get_exchange_config()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á–∏ –µ—Å—Ç—å
            if not config.get('apiKey') or not config.get('secret'):
                raise ValueError("‚ùå API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
            self.exchange = ccxt.bybit(config)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._test_connection()
            
            logger.info(
                "‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                category='exchange',
                testnet=config.get('hostname') == 'testnet.bybit.com'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            server_time = self.exchange.fetch_time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            balance = self.exchange.fetch_balance()
            
            self.is_connected = True
            
            logger.info(
                "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ",
                category='exchange',
                server_time=datetime.fromtimestamp(server_time/1000),
                balance_keys=list(balance.keys())
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
            self.is_connected = False
            raise
    
    async def human_delay(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫"""
        delay = random.uniform(0.1, 0.3)
        await asyncio.sleep(delay)
    
    async def micro_delay(self):
        """–ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        delay = random.uniform(0.01, 0.05)
        await asyncio.sleep(delay)
    
    # =================================================================
    # –†–ï–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # =================================================================
    
    async def create_order(self, symbol: str, order_type: str, side: str, 
                          amount: float, price: Optional[float] = None, 
                          stop_loss: Optional[float] = None,
                          take_profit: Optional[float] = None) -> Optional[Dict]:
        """
        ‚ö†Ô∏è –†–ï–ê–õ–¨–ù–û–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ!
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            order_type: market, limit, stop_limit
            side: buy, sell
            amount: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –£—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ –∏–ª–∏ None
        """
        await self.human_delay()
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation_result = await self._validate_order_params(
                symbol, order_type, side, amount, price
            )
            if not validation_result['valid']:
                logger.error(
                    f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞: {validation_result['reason']}",
                    category='trade',
                    symbol=symbol,
                    side=side,
                    amount=amount
                )
                return None
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance_check = await self._check_balance_for_order(symbol, side, amount, price)
            if not balance_check['sufficient']:
                logger.error(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {balance_check['reason']}",
                    category='trade',
                    symbol=symbol,
                    required=balance_check['required'],
                    available=balance_check['available']
                )
                return None
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if order_type == 'market' and not price:
                ticker = await self.fetch_ticker(symbol)
                price = ticker['last']
            
            # 4. –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
            logger.info(
                f"üöÄ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û –æ—Ä–¥–µ—Ä–∞",
                category='trade',
                symbol=symbol,
                side=side.upper(),
                amount=amount,
                order_type=order_type,
                price=price
            )
            
            order = self.exchange.create_order(
                symbol=symbol,
                type=order_type,
                side=side,
                amount=amount,
                price=price if order_type != 'market' else None
            )
            
            # 5. –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
            if order and order.get('status') in ['closed', 'filled']:
                if stop_loss or take_profit:
                    await self._place_stop_loss_take_profit(
                        symbol, side, amount, stop_loss, take_profit, order
                    )
            
            logger.info(
                f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω",
                category='trade',
                order_id=order.get('id'),
                status=order.get('status'),
                filled=order.get('filled', 0),
                symbol=symbol
            )
            
            return order
            
        except ccxt.BaseError as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {str(e)}",
                category='trade',
                symbol=symbol,
                side=side,
                amount=amount,
                error_type=type(e).__name__
            )
            return None
            
        except Exception as e:
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {str(e)}",
                category='trade',
                symbol=symbol,
                side=side,
                amount=amount
            )
            return None
    
    async def _validate_order_params(self, symbol: str, order_type: str, 
                                   side: str, amount: float, 
                                   price: Optional[float]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            markets = self.exchange.load_markets()
            
            if symbol not in markets:
                return {'valid': False, 'reason': f'–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            market = markets[symbol]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            min_amount = market['limits']['amount']['min']
            max_amount = market['limits']['amount']['max']
            
            if amount < min_amount:
                return {'valid': False, 'reason': f'–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä: {amount} < {min_amount}'}
            
            if max_amount and amount > max_amount:
                return {'valid': False, 'reason': f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä: {amount} > {max_amount}'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            if order_type == 'limit' and not price:
                return {'valid': False, 'reason': '–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞'}
            
            if price:
                min_price = market['limits']['price']['min']
                max_price = market['limits']['price']['max']
                
                if min_price and price < min_price:
                    return {'valid': False, 'reason': f'–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞: {price} < {min_price}'}
                
                if max_price and price > max_price:
                    return {'valid': False, 'reason': f'–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞: {price} > {max_price}'}
            
            return {'valid': True, 'reason': 'OK'}
            
        except Exception as e:
            return {'valid': False, 'reason': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}'}
    
    async def _check_balance_for_order(self, symbol: str, side: str, 
                                     amount: float, price: Optional[float]) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance = await self.fetch_balance()
            
            base_currency = symbol.replace('USDT', '').replace('BUSD', '')
            quote_currency = 'USDT' if 'USDT' in symbol else 'BUSD'
            
            if side == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –≤–∞–ª—é—Ç–∞ (USDT)
                required = amount * (price if price else await self._get_current_price(symbol))
                available = balance.get(quote_currency, {}).get('free', 0)
                
                return {
                    'sufficient': available >= required,
                    'required': required,
                    'available': available,
                    'currency': quote_currency,
                    'reason': f'–ù—É–∂–Ω–æ {required:.2f} {quote_currency}, –¥–æ—Å—Ç—É–ø–Ω–æ {available:.2f}'
                }
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (BTC, ETH –∏ —Ç.–¥.)
                required = amount
                available = balance.get(base_currency, {}).get('free', 0)
                
                return {
                    'sufficient': available >= required,
                    'required': required,
                    'available': available,
                    'currency': base_currency,
                    'reason': f'–ù—É–∂–Ω–æ {required:.4f} {base_currency}, –¥–æ—Å—Ç—É–ø–Ω–æ {available:.4f}'
                }
                
        except Exception as e:
            return {
                'sufficient': False,
                'required': 0,
                'available': 0,
                'currency': '',
                'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}'
            }
    
    async def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            ticker = await self.fetch_ticker(symbol)
            return ticker['last']
        except Exception:
            return 0.0
    
    async def _place_stop_loss_take_profit(self, symbol: str, side: str, 
                                         amount: float, stop_loss: Optional[float],
                                         take_profit: Optional[float], 
                                         parent_order: Dict):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            close_side = 'sell' if side == 'buy' else 'buy'
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            if stop_loss:
                try:
                    sl_order = self.exchange.create_order(
                        symbol=symbol,
                        type='stop_market',
                        side=close_side,
                        amount=amount,
                        price=None,
                        params={'stopPrice': stop_loss}
                    )
                    
                    logger.info(
                        f"‚úÖ Stop-Loss —Ä–∞–∑–º–µ—â–µ–Ω",
                        category='trade',
                        symbol=symbol,
                        stop_price=stop_loss,
                        order_id=sl_order.get('id')
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Stop-Loss: {e}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if take_profit:
                try:
                    tp_order = self.exchange.create_order(
                        symbol=symbol,
                        type='limit',
                        side=close_side,
                        amount=amount,
                        price=take_profit
                    )
                    
                    logger.info(
                        f"‚úÖ Take-Profit —Ä–∞–∑–º–µ—â–µ–Ω",
                        category='trade',
                        symbol=symbol,
                        tp_price=take_profit,
                        order_id=tp_order.get('id')
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Take-Profit: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è TP/SL: {e}")
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–Ø–ú–ò
    # =================================================================
    
    async def fetch_open_orders(self, symbol: Optional[str] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        await self.micro_delay()
        
        try:
            if symbol:
                orders = self.exchange.fetch_open_orders(symbol)
            else:
                orders = self.exchange.fetch_open_orders()
            
            return orders
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return []
    
    async def cancel_order(self, order_id: str, symbol: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        await self.human_delay()
        
        try:
            result = self.exchange.cancel_order(order_id, symbol)
            
            logger.info(
                f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω",
                category='trade',
                order_id=order_id,
                symbol=symbol
            )
            
            return True
            
        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}",
                category='trade',
                symbol=symbol
            )
            return False
    
    async def cancel_all_orders(self, symbol: Optional[str] = None) -> int:
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            open_orders = await self.fetch_open_orders(symbol)
            cancelled_count = 0
            
            for order in open_orders:
                if await self.cancel_order(order['id'], order['symbol']):
                    cancelled_count += 1
            
            logger.info(
                f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {cancelled_count}",
                category='trade',
                symbol=symbol or 'ALL'
            )
            
            return cancelled_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return 0
    
    async def fetch_positions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        await self.micro_delay()
        
        try:
            positions = self.exchange.fetch_positions()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = [pos for pos in positions if float(pos.get('contracts', 0)) > 0]
            
            return open_positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def close_position(self, symbol: str, side: Optional[str] = None) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            positions = await self.fetch_positions()
            position = next((p for p in positions if p['symbol'] == symbol), None)
            
            if not position:
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            size = abs(float(position.get('contracts', 0)))
            if size == 0:
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
                return True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            position_side = position.get('side', 'long')
            close_side = 'sell' if position_side == 'long' else 'buy'
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            order = await self.create_order(
                symbol=symbol,
                order_type='market',
                side=close_side,
                amount=size
            )
            
            if order:
                logger.info(
                    f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞",
                    category='trade',
                    symbol=symbol,
                    size=size,
                    side=close_side
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False
    
    async def close_all_positions(self) -> int:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = await self.fetch_positions()
            closed_count = 0
            
            for position in positions:
                symbol = position['symbol']
                if await self.close_position(symbol):
                    closed_count += 1
            
            logger.info(
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}",
                category='trade'
            )
            
            return closed_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0
    
    # =================================================================
    # –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    # =================================================================
    
    async def fetch_ticker(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä"""
        await self.micro_delay()
        
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return ticker
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            raise
    
    async def fetch_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
        await self.human_delay()
        
        try:
            balance = self.exchange.fetch_balance()
            return balance
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            raise
    
    async def get_candles(self, symbol: str, timeframe: str = '5m', 
                         limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏"""
        await self.micro_delay()
        
        try:
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            candles = []
            
            for candle in ohlcv:
                candles.append({
                    'timestamp': candle[0],
                    'open': candle[1],
                    'high': candle[2],
                    'low': candle[3],
                    'close': candle[4],
                    'volume': candle[5]
                })
            
            return candles
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            raise

    def calculate_position_size(self, symbol: str, balance: float, 
                              risk_percent: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            markets = self.exchange.load_markets()
            
            if symbol not in markets:
                logger.error(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return 0.001
            
            market = markets[symbol]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            risk_amount = balance * (risk_percent / 100)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = risk_amount / current_price
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            min_amount = market['limits']['amount']['min']
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ precision
            precision = market['precision']['amount']
            quantity = float(Decimal(str(quantity)).quantize(
                Decimal('0.' + '0' * precision), rounding=ROUND_DOWN
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
            if quantity < min_amount:
                quantity = min_amount
            
            return quantity
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.001

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
real_exchange_client = None

def get_real_exchange_client() -> RealExchangeClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    global real_exchange_client
    
    if real_exchange_client is None:
        real_exchange_client = RealExchangeClient()
    
    return real_exchange_client

def create_real_exchange_client() -> RealExchangeClient:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    return RealExchangeClient()

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'ExchangeClient',
    'RealExchangeClient',
    'get_real_exchange_client',
    'create_real_exchange_client'
]