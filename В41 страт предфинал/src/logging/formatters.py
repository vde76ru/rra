"""
–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–§–∞–π–ª: src/logging/formatters.py
"""
import json
import logging
from datetime import datetime
from typing import Dict, Any


class JSONFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≤ JSON –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    def format(self, record: logging.LogRecord) -> str:
        log_data = {
            'timestamp': datetime.utcnow().isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if hasattr(record, 'category'):
            log_data['category'] = record.category
        if hasattr(record, 'symbol'):
            log_data['symbol'] = record.symbol
        if hasattr(record, 'strategy'):
            log_data['strategy'] = record.strategy
        if hasattr(record, 'trade_id'):
            log_data['trade_id'] = record.trade_id
        if hasattr(record, 'context'):
            log_data['context'] = record.context
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        if record.exc_info:
            log_data['exception'] = self.formatException(record.exc_info)
        
        return json.dumps(log_data, ensure_ascii=False)


class ColoredConsoleFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Green
        'WARNING': '\033[33m',   # Yellow
        'ERROR': '\033[31m',     # Red
        'CRITICAL': '\033[35m',  # Magenta
    }
    
    CATEGORY_COLORS = {
        'trade': '\033[94m',     # Blue
        'profit_loss': '\033[92m', # Light Green
        'signal': '\033[96m',    # Light Cyan
        'strategy': '\033[95m',  # Light Magenta
        'error': '\033[91m',     # Light Red
    }
    
    RESET = '\033[0m'
    BOLD = '\033[1m'
    
    def format(self, record: logging.LogRecord) -> str:
        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_fmt = '%(asctime)s - %(levelname)s'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'category'):
            log_fmt += ' - %(category)s'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'symbol'):
            log_fmt += ' [%(symbol)s]'
        
        log_fmt += ' - %(message)s'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatter = logging.Formatter(log_fmt, datefmt='%H:%M:%S')
        formatted = formatter.format(record)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞
        level_color = self.COLORS.get(record.levelname, '')
        
        # –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_color = ''
        if hasattr(record, 'category'):
            category_color = self.CATEGORY_COLORS.get(record.category, '')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
        if level_color:
            # –î–µ–ª–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω—ã–º –∏ —Ü–≤–µ—Ç–Ω—ã–º
            formatted = formatted.replace(
                record.levelname,
                f"{self.BOLD}{level_color}{record.levelname}{self.RESET}"
            )
        
        if category_color and hasattr(record, 'category'):
            formatted = formatted.replace(
                record.category,
                f"{category_color}{record.category}{self.RESET}"
            )
        
        # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞
        keywords = {
            'PROFIT': '\033[92m',  # Light Green
            'LOSS': '\033[91m',    # Light Red
            'BUY': '\033[94m',     # Blue
            'SELL': '\033[93m',    # Yellow
        }
        
        for keyword, color in keywords.items():
            formatted = formatted.replace(
                keyword,
                f"{self.BOLD}{color}{keyword}{self.RESET}"
            )
        
        return formatted


class TelegramFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    
    EMOJI_MAP = {
        'DEBUG': 'üîç',
        'INFO': '‚ÑπÔ∏è',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®'
    }
    
    CATEGORY_EMOJI = {
        'trade': 'üíº',
        'profit_loss': 'üí∞',
        'signal': 'üìä',
        'strategy': 'üéØ',
        'error': 'üõë',
        'market': 'üìà',
        'system': '‚öôÔ∏è'
    }
    
    def format(self, record: logging.LogRecord) -> str:
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
        level_emoji = self.EMOJI_MAP.get(record.levelname, '')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_emoji = ''
        if hasattr(record, 'category'):
            category_emoji = self.CATEGORY_EMOJI.get(record.category, '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        parts = [
            f"{level_emoji} <b>{record.levelname}</b>",
            f"{category_emoji} {getattr(record, 'category', 'system').upper()}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª
        if hasattr(record, 'symbol'):
            parts.append(f"[{record.symbol}]")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        parts.append(f"\n\n{record.getMessage()}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ª–æ–≥–æ–≤
        if record.levelname in ['ERROR', 'CRITICAL'] and hasattr(record, 'context'):
            context = getattr(record, 'context', {})
            if context:
                parts.append("\n\n<b>–î–µ—Ç–∞–ª–∏:</b>")
                for key, value in context.items():
                    if key not in ['symbol', 'category', 'strategy']:
                        parts.append(f"‚Ä¢ {key}: {value}")
        
        # –í—Ä–µ–º—è
        parts.append(f"\n\nüïê {datetime.now().strftime('%H:%M:%S')}")
        
        return '\n'.join(parts)


class CSVFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    
    def format(self, record: logging.LogRecord) -> str:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamp = datetime.utcnow().isoformat()
        level = record.levelname
        category = getattr(record, 'category', 'system')
        symbol = getattr(record, 'symbol', '')
        strategy = getattr(record, 'strategy', '')
        message = record.getMessage().replace('"', '""')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º CSV —Å—Ç—Ä–æ–∫—É
        csv_parts = [
            timestamp,
            level,
            category,
            symbol,
            strategy,
            f'"{message}"'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ JSON
        if hasattr(record, 'context'):
            context_json = json.dumps(
                getattr(record, 'context', {}), 
                ensure_ascii=False
            ).replace('"', '""')
            csv_parts.append(f'"{context_json}"')
        else:
            csv_parts.append('""')
        
        return ','.join(csv_parts)


class MetricsFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
    
    def format(self, record: logging.LogRecord) -> str:
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        if not hasattr(record, 'context'):
            return ''
        
        context = getattr(record, 'context', {})
        metrics = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if record.category == 'trade':
            if 'price' in context:
                metrics.append(f'trade_price{{symbol="{record.symbol}",action="{context.get("side", "unknown")}"}} {context["price"]}')
            if 'quantity' in context:
                metrics.append(f'trade_quantity{{symbol="{record.symbol}"}} {context["quantity"]}')
        
        elif record.category == 'profit_loss':
            if 'profit' in context:
                metrics.append(f'trade_profit{{symbol="{record.symbol}"}} {context["profit"]}')
            if 'profit_percent' in context:
                metrics.append(f'trade_profit_percent{{symbol="{record.symbol}"}} {context["profit_percent"]}')
        
        elif record.category == 'signal':
            if 'confidence' in context:
                metrics.append(f'signal_confidence{{symbol="{record.symbol}",strategy="{record.strategy}"}} {context["confidence"]}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp
        timestamp = int(datetime.utcnow().timestamp() * 1000)
        return '\n'.join([f"{metric} {timestamp}" for metric in metrics])


class SlackFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è Slack webhooks"""
    
    def format(self, record: logging.LogRecord) -> Dict[str, Any]:
        # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        color_map = {
            'DEBUG': '#36a64f',
            'INFO': '#2eb886',
            'WARNING': '#ff9900',
            'ERROR': '#ff0000',
            'CRITICAL': '#8b0000'
        }
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"{record.levelname}: {record.getMessage()}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º attachment
        attachment = {
            "color": color_map.get(record.levelname, '#808080'),
            "title": getattr(record, 'category', 'System').title(),
            "text": record.getMessage(),
            "fields": [],
            "footer": "Trading Bot",
            "ts": int(datetime.utcnow().timestamp())
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
        if hasattr(record, 'symbol'):
            attachment['fields'].append({
                "title": "Symbol",
                "value": record.symbol,
                "short": True
            })
        
        if hasattr(record, 'strategy'):
            attachment['fields'].append({
                "title": "Strategy",
                "value": record.strategy,
                "short": True
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if record.levelname in ['ERROR', 'CRITICAL'] and hasattr(record, 'context'):
            context = getattr(record, 'context', {})
            for key, value in context.items():
                if key not in ['symbol', 'strategy', 'category']:
                    attachment['fields'].append({
                        "title": key.replace('_', ' ').title(),
                        "value": str(value),
                        "short": True
                    })
        
        return {
            "text": text,
            "attachments": [attachment]
        }