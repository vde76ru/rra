"""
–§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞
–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–µ–µ –∏–∑ –í22 –∏ –í23
–§–∞–π–ª: src/strategies/factory.py
"""

from typing import Dict, Type, List, Optional
import logging

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
from .base import BaseStrategy

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
from .momentum import MomentumStrategy
from .multi_indicator import MultiIndicatorStrategy
from .scalping import ScalpingStrategy

class StrategyFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
    - –ë–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        self._strategies: Dict[str, Type[BaseStrategy]] = {
            'momentum': MomentumStrategy,
            'multi_indicator': MultiIndicatorStrategy,
            'scalping': ScalpingStrategy
        }
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self._load_additional_strategies()
    
    def _load_additional_strategies(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        try:
            from .safe_multi_indicator import SafeMultiIndicatorStrategy
            self._strategies['safe_multi_indicator'] = SafeMultiIndicatorStrategy
            logger.debug("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: safe_multi_indicator")
        except ImportError as e:
            logger.debug(f"‚ö†Ô∏è SafeMultiIndicatorStrategy –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SafeMultiIndicatorStrategy: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        try:
            from .conservative import ConservativeStrategy
            self._strategies['conservative'] = ConservativeStrategy
            logger.debug("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: conservative")
        except ImportError as e:
            logger.debug(f"‚ö†Ô∏è ConservativeStrategy –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ConservativeStrategy: {e}")
    
    def create(self, name: str, **kwargs) -> BaseStrategy:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if name not in self._strategies:
            available = ', '.join(self._strategies.keys())
            raise ValueError(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: '{name}'. "
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {available}"
            )
        
        strategy_class = self._strategies[name]
        try:
            return strategy_class(**kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {name}: {e}")
            raise
    
    def list_strategies(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        return list(self._strategies.keys())
    
    def get_strategy_info(self, name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ None
        """
        if name not in self._strategies:
            return None
        
        strategy_class = self._strategies[name]
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = {
            'name': name,
            'class_name': strategy_class.__name__,
            'description': getattr(strategy_class, '__doc__', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç').strip()
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(strategy_class, 'STRATEGY_TYPE'):
            info['type'] = strategy_class.STRATEGY_TYPE
        else:
            info['type'] = 'general'
        
        if hasattr(strategy_class, 'RISK_LEVEL'):
            info['risk_level'] = strategy_class.RISK_LEVEL
        else:
            info['risk_level'] = 'unknown'
        
        if hasattr(strategy_class, 'TIMEFRAMES'):
            info['timeframes'] = strategy_class.TIMEFRAMES
        
        if hasattr(strategy_class, 'SUPPORTED_PAIRS'):
            info['supported_pairs'] = strategy_class.SUPPORTED_PAIRS
        
        return info
    
    def get_all_strategies_info(self) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
        """
        return {
            name: self.get_strategy_info(name) 
            for name in self._strategies.keys()
        }
    
    def register_strategy(self, name: str, strategy_class: Type[BaseStrategy]):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_class: –ö–ª–∞—Å—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        if not issubclass(strategy_class, BaseStrategy):
            raise ValueError(
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_class.__name__} –¥–æ–ª–∂–Ω–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseStrategy"
            )
        
        self._strategies[name] = strategy_class
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {name}")
    
    def unregister_strategy(self, name: str):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        if name in self._strategies:
            del self._strategies[name]
            logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {name}")
    
    def strategy_exists(self, name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        return name in self._strategies
    
    def get_strategy_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        return len(self._strategies)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategy_factory = StrategyFactory()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è
__version__ = "1.0.0"

def get_version() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    return __version__

def print_strategies_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
    print(f"üìä –ú–æ–¥—É–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è {__version__})")
    print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {strategy_factory.get_strategy_count()}")
    
    for strategy_name in strategy_factory.list_strategies():
        info = strategy_factory.get_strategy_info(strategy_name)
        risk_level = info.get('risk_level', 'unknown')
        strategy_type = info.get('type', 'general')
        print(f" ‚úÖ {strategy_name} ({strategy_type}, —Ä–∏—Å–∫: {risk_level})")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
print_strategies_info()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
__all__ = [
    'StrategyFactory',
    'strategy_factory',
    'get_version',
    'print_strategies_info'
]