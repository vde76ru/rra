"""
–ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π Bybit
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/exchange/client.py
"""
import ccxt
import asyncio
import sys
import random
import logging
from typing import Dict, Any, List, Optional, Tuple, Dict, Optional, List
from datetime import datetime

from ..core.config import config
from .humanizer import HumanBehaviorMixin

logger = logging.getLogger(__name__)

class ExchangeClient(HumanBehaviorMixin):
    """
    –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit
    –í–∫–ª—é—á–∞–µ—Ç –∏–º–∏—Ç–∞—Ü–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.exchange = self._create_exchange()
        self._init_human_behavior()
        logger.info(f"‚úÖ Exchange –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({'TESTNET' if config.BYBIT_TESTNET else 'MAINNET'})")
    
    def _create_exchange(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        exchange_config = {
            'apiKey': config.BYBIT_API_KEY,
            'secret': config.BYBIT_API_SECRET,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'swap',  # –î–ª—è –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                'testnet': config.BYBIT_TESTNET
            }
        }
        
        exchange = ccxt.bybit(exchange_config)
        
        if config.BYBIT_TESTNET:
            exchange.set_sandbox_mode(True)
        
        return exchange
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        try:
            await self.human_delay()
            self.exchange.fetch_time()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def fetch_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
        await self.human_delay()
        
        try:
            balance = self.exchange.fetch_balance()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –±–∞–ª–∞–Ω—Å—ã
            filtered_balance = {}
            for currency, amounts in balance.items():
                if isinstance(amounts, dict) and amounts.get('total', 0) > 0:
                    filtered_balance[currency] = amounts
            
            logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {len(filtered_balance)} –≤–∞–ª—é—Ç")
            return filtered_balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            raise
    
    async def fetch_ticker(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        await self.micro_delay()  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞
        
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return ticker
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            raise
    
    async def fetch_ohlcv(self, symbol: str, timeframe: str = '5m', limit: int = 100) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        await self.human_delay()
        
        try:
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return ohlcv
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV {symbol}: {e}")
            raise
    
    
    
    async def create_order(
        self,
        symbol: str,
        side: str,
        amount: float,
        order_type: str = 'market',
        price: Optional[float] = None
    ) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–¥—É–º–∏–π –ø–µ—Ä–µ–¥ –æ—Ä–¥–µ—Ä–æ–º
        await self.think_before_action()
        
        # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        amount = self.humanize_amount(amount)
        
        # –ò–Ω–æ–≥–¥–∞ "–ø–µ—Ä–µ–¥—É–º—ã–≤–∞–µ–º"
        if self.should_hesitate():
            logger.info(f"üòï –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–º–Ω–µ–Ω–∏–π - –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {symbol}")
            return None
        
        # –ò–Ω–æ–≥–¥–∞ "—Å–ª—É—á–∞–π–Ω–æ" –¥–µ–ª–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ (–Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—É—é)
        if config.ENABLE_HUMAN_MODE and random.random() < 0.02:  # 2% —à–∞–Ω—Å
            error_factor = random.uniform(0.95, 1.05)  # ¬±5%
            amount = self.humanize_amount(amount * error_factor)
            logger.info(f"ü§è –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–±–æ–ª—å—à–æ–π –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ: {amount}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∏
            await self.micro_delay()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            order = self.exchange.create_order(
                symbol=symbol,
                type=order_type,
                side=side.lower(),
                amount=amount,
                price=price
            )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {side} {amount} {symbol} @ {order.get('price', 'market')}")
            
            # –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
            if config.ENABLE_HUMAN_MODE and random.random() < 0.3:  # 30% —à–∞–Ω—Å
                await asyncio.sleep(random.uniform(2, 5))
                logger.debug("üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä...")
                
            return order
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
            if config.ENABLE_HUMAN_MODE and random.random() < 0.3:  # 30% —à–∞–Ω—Å –ø–æ–≤—Ç–æ—Ä–∞
                await asyncio.sleep(random.uniform(2, 5))
                logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞")
                try:
                    return self.exchange.create_order(
                        symbol=symbol,
                        type=order_type,
                        side=side.lower(),
                        amount=amount,
                        price=price
                    )
                except:
                    pass
            raise
    
    async def cancel_order(self, order_id: str, symbol: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        await self.human_delay()
        
        try:
            self.exchange.cancel_order(order_id, symbol)
            logger.info(f"‚ùå –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    async def fetch_order_book(self, symbol: str, limit: int = 10) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω"""
        await self.micro_delay()
        
        try:
            order_book = self.exchange.fetch_order_book(symbol, limit)
            return order_book
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            raise
    
    async def fetch_trades(self, symbol: str, limit: int = 50) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        await self.micro_delay()
        
        try:
            trades = self.exchange.fetch_trades(symbol, limit=limit)
            return trades
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ {symbol}: {e}")
            raise
    
    async def fetch_my_trades(self, symbol: str = None, limit: int = 50) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ —Å–¥–µ–ª–∫–∏"""
        await self.human_delay()
        
        try:
            if symbol:
                trades = self.exchange.fetch_my_trades(symbol, limit=limit)
            else:
                trades = self.exchange.fetch_my_trades(limit=limit)
            return trades
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å–¥–µ–ª–æ–∫: {e}")
            raise
    
    async def fetch_positions(self) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        await self.human_delay()
        
        try:
            positions = self.exchange.fetch_positions()
            return positions
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            raise
    
    def calculate_position_size(self, symbol: str, balance: float, risk_percent: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            market = self.exchange.market(symbol)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            risk_amount = balance * (risk_percent / 100)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            min_amount = market.get('limits', {}).get('amount', {}).get('min', 0.001)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ precision
            precision = market.get('precision', {}).get('amount', 8)
            amount = round(risk_amount, precision)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
            if amount < min_amount:
                amount = min_amount
                
            return amount
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
exchange_client = ExchangeClient()