#!/bin/bash
# final_setup.sh - –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞

cd /var/www/www-root/data/www/systemetech.ru

echo "üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Crypto Trading Bot"
echo "========================================="

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥
echo -e "\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if [ -L ".env" ] && [ -e ".env" ]; then
    echo "‚úÖ –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    echo "   –°—Å—ã–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞: $(readlink -f .env)"
else
    echo "‚ö†Ô∏è  –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    ln -sf /etc/crypto/config/.env .env
    echo "‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo -e "\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env..."
source .env
if [ -n "$DB_NAME" ]; then
    echo "‚úÖ DB_NAME: $DB_NAME"
else
    echo "‚ùå DB_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
fi

if [ -n "$DB_USER" ]; then
    echo "‚úÖ DB_USER: $DB_USER"
else
    echo "‚ùå DB_USER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
fi

if [ "$BYBIT_TESTNET" = "true" ]; then
    echo "‚úÖ BYBIT_TESTNET: true (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)"
else
    echo "‚ö†Ô∏è  BYBIT_TESTNET: false (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è!)"
fi

# 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "\n3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
source venv/bin/activate
echo "‚úÖ Python: $(which python)"

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
echo -e "\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
if [ ! -f "src/core/database.py" ]; then
    echo "‚ö†Ô∏è  –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    bash create_main_files.sh
else
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
echo -e "\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
python check_database.py

# 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
echo -e "\n6Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
cat > app.py << 'EOF'
from fastapi import FastAPI, WebSocket
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import json
from datetime import datetime
import asyncio

from src.core.database import SessionLocal
from src.core.models import Trade

app = FastAPI(title="Crypto Trading Bot")

# HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
html = """
<!DOCTYPE html>
<html>
<head>
    <title>Crypto Bot Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #1a1a1a;
            color: #fff;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .metric {
            background: #2a2a2a;
            padding: 20px;
            margin: 10px;
            border-radius: 8px;
            display: inline-block;
            min-width: 200px;
        }
        .profit { color: #4caf50; }
        .loss { color: #f44336; }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #444;
        }
        th {
            background-color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Crypto Trading Bot Dashboard</h1>
        
        <div id="metrics">
            <div class="metric">
                <h3>–ë–∞–ª–∞–Ω—Å</h3>
                <div id="balance">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="metric">
                <h3>–î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å</h3>
                <div id="daily-pnl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
            <div class="metric">
                <h3>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</h3>
                <div id="open-positions">0</div>
            </div>
            <div class="metric">
                <h3>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</h3>
                <div id="total-trades">0</div>
            </div>
        </div>
        
        <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</h2>
        <table id="trades-table">
            <thead>
                <tr>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–°–∏–º–≤–æ–ª</th>
                    <th>–°—Ç–æ—Ä–æ–Ω–∞</th>
                    <th>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞</th>
                    <th>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞</th>
                    <th>–ü—Ä–∏–±—ã–ª—å</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
            </thead>
            <tbody id="trades-tbody">
            </tbody>
        </table>
    </div>
    
    <script>
        const ws = new WebSocket(`ws://${window.location.host}/ws`);
        
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            updateDashboard(data);
        };
        
        function updateDashboard(data) {
            document.getElementById('balance').textContent = '$' + data.balance.toFixed(2);
            document.getElementById('daily-pnl').textContent = '$' + data.daily_pnl.toFixed(2);
            document.getElementById('open-positions').textContent = data.open_positions;
            document.getElementById('total-trades').textContent = data.total_trades;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ P&L
            const pnlElement = document.getElementById('daily-pnl');
            pnlElement.className = data.daily_pnl >= 0 ? 'profit' : 'loss';
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫
            updateTradesTable(data.recent_trades);
        }
        
        function updateTradesTable(trades) {
            const tbody = document.getElementById('trades-tbody');
            tbody.innerHTML = '';
            
            trades.forEach(trade => {
                const row = tbody.insertRow();
                row.insertCell(0).textContent = new Date(trade.created_at).toLocaleString();
                row.insertCell(1).textContent = trade.symbol;
                row.insertCell(2).textContent = trade.side;
                row.insertCell(3).textContent = '$' + trade.entry_price.toFixed(2);
                row.insertCell(4).textContent = trade.exit_price ? '$' + trade.exit_price.toFixed(2) : '-';
                
                const profitCell = row.insertCell(5);
                if (trade.profit !== null) {
                    profitCell.textContent = '$' + trade.profit.toFixed(2);
                    profitCell.className = trade.profit >= 0 ? 'profit' : 'loss';
                } else {
                    profitCell.textContent = '-';
                }
                
                row.insertCell(6).textContent = trade.status;
            });
        }
    </script>
</body>
</html>
"""

@app.get("/")
async def get():
    return HTMLResponse(html)

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            db = SessionLocal()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = db.query(Trade).count()
            open_positions = db.query(Trade).filter(Trade.status == 'OPEN').count()
            
            # –î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            today_trades = db.query(Trade).filter(
                Trade.status == 'CLOSED',
                Trade.closed_at >= datetime.utcnow().date()
            ).all()
            daily_pnl = sum(trade.profit or 0 for trade in today_trades)
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            recent_trades = db.query(Trade).order_by(Trade.created_at.desc()).limit(10).all()
            
            db.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {
                'balance': 10000,  # –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
                'daily_pnl': daily_pnl,
                'open_positions': open_positions,
                'total_trades': total_trades,
                'recent_trades': [
                    {
                        'created_at': trade.created_at.isoformat(),
                        'symbol': trade.symbol,
                        'side': trade.side,
                        'entry_price': trade.entry_price,
                        'exit_price': trade.exit_price,
                        'profit': trade.profit,
                        'status': trade.status
                    }
                    for trade in recent_trades
                ]
            }
            
            await websocket.send_text(json.dumps(data))
            await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
    except Exception as e:
        print(f"WebSocket error: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

echo "‚úÖ –§–∞–π–ª app.py —Å–æ–∑–¥–∞–Ω"

# 7. –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
echo -e "\n7Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
python test_installation.py

echo -e "\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ Bybit –≤ /etc/crypto/config/.env"
echo "   - –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://testnet.bybit.com"
echo "   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BYBIT_API_KEY –∏ BYBIT_API_SECRET"
echo ""
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
echo "   python main_simple.py"
echo ""
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:"
echo "   python app.py"
echo ""
echo "4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:"
echo "   http://systemetech.ru:8000"