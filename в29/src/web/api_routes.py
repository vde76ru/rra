"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/web/api_routes.py
"""
import asyncio
import json
import io
import csv
from fastapi import APIRouter, Depends, HTTPException, status, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func
from pydantic import BaseModel
from .dashboard import get_dashboard_html


from ..core.database import get_db
from ..core.models import Trade, Signal, TradingPair, User, BotState, Balance
from ..bot.manager import bot_manager
from .auth import get_current_user
from ..core.clean_logging import get_clean_logger

logger = get_clean_logger(__name__)

# ‚úÖ Pydantic –º–æ–¥–µ–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
class BotStartRequest(BaseModel):
    strategy: Optional[str] = None
    pairs: Optional[List[str]] = None

class SettingsRequest(BaseModel):
    max_position_size: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    max_daily_trades: Optional[int] = None
    trading_pairs: Optional[List[str]] = None
    email_notifications: bool = True
    telegram_notifications: bool = False
    telegram_token: Optional[str] = None

class TradeResponse(BaseModel):
    id: int
    timestamp: datetime
    symbol: str
    side: str
    amount: float
    price: float
    profit: Optional[float]
    strategy: Optional[str]
    status: str

# ‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
class WebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def broadcast(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message = json.dumps(data, default=str, ensure_ascii=False)
        disconnected = []
        
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
ws_manager = WebSocketManager()

router = APIRouter()

# ‚úÖ –ù–û–í–´–ô –†–û–£–¢ - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@router.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º"""
    return get_dashboard_html()

# ‚úÖ –ù–û–í–´–ô –†–û–£–¢ - –ü—Ä–æ—Å—Ç–æ–µ API –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.get("/api")
async def api_info():
    """
    –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints
    –∏ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_status = "unknown"
        try:
            if hasattr(bot_manager, 'get_status'):
                status_info = bot_manager.get_status()
                bot_status = status_info.get('status', 'unknown')
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {e}")
        
        return {
            "service": "Crypto Trading Bot API",
            "version": "3.0.0",
            "status": "running",
            "bot_status": bot_status,
            "timestamp": datetime.utcnow(),
            "endpoints": {
                "documentation": "/docs",
                "redoc": "/redoc", 
                "health": "/health",
                "status": "/status",
                "websocket": "/ws"
            },
            "features": [
                "Automated trading",
                "Multiple strategies",
                "Real-time monitoring",
                "WebSocket support",
                "Advanced analytics"
            ]
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ api_info: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Internal server error", "message": str(e)}
        )

# ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π health check
@router.get("/health")
async def health_check():
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    """
    try:
        health_info = {
            "status": "healthy",
            "timestamp": datetime.utcnow(),
            "components": {
                "api": "healthy",
                "database": "unknown",
                "bot_manager": "unknown",
                "websocket": "healthy"
            },
            "metrics": {
                "websocket_connections": len(ws_manager.active_connections),
                "uptime_seconds": 0
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BotManager
        try:
            if hasattr(bot_manager, 'get_health_check'):
                bot_health = bot_manager.get_health_check()
                health_info["components"]["bot_manager"] = bot_health.get("overall_status", "unknown")
                health_info["bot_details"] = bot_health
            else:
                health_info["components"]["bot_manager"] = "available"
        except Exception as e:
            health_info["components"]["bot_manager"] = "error"
            health_info["bot_error"] = str(e)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            from ..core.database import SessionLocal
            from sqlalchemy import text
            
            db = SessionLocal()
            result = db.execute(text("SELECT 1")).scalar()
            db.close()
            
            if result == 1:
                health_info["components"]["database"] = "healthy"
            else:
                health_info["components"]["database"] = "unhealthy"
                
        except Exception as e:
            health_info["components"]["database"] = "error"
            health_info["database_error"] = str(e)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        component_statuses = list(health_info["components"].values())
        if "error" in component_statuses or "unhealthy" in component_statuses:
            health_info["status"] = "degraded"
        
        return health_info
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health_check: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "unhealthy", 
                "timestamp": datetime.utcnow(),
                "error": str(e)
            }
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
def set_bot_manager(manager):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞"""
    global bot_manager
    bot_manager = manager
    logger.info("‚úÖ BotManager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ API —Ä–æ—É—Ç–∞—Ö")

# ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å...
# (–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)

# WebSocket endpoint
@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await ws_manager.connect(websocket)
    try:
        while True:
            await asyncio.sleep(5)
            
            status_data = {
                "type": "bot_status",
                "status": bot_manager.get_status() if hasattr(bot_manager, 'get_status') else {"status": "unknown"},
                "timestamp": datetime.utcnow()
            }
            await websocket.send_text(json.dumps(status_data, default=str))
    
    except WebSocketDisconnect:
        ws_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        ws_manager.disconnect(websocket)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å)
@router.get("/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞)"""
    try:
        if hasattr(bot_manager, 'get_status'):
            base_status = bot_manager.get_status()
            return base_status
        else:
            return {
                "status": "unknown",
                "message": "BotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "timestamp": datetime.utcnow()
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "status": "error",
            "message": str(e),
            "timestamp": datetime.utcnow()
        }

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã...
# (–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)