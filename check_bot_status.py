#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""
import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
import asyncio
import locale

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UTF-8
try:
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –ª–æ–∫–∞–ª—å
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
        pass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/www/www-root/data/www/systemetech.ru')

from src.core.database import SessionLocal
from src.core.models import Trade, Signal, BotState, TradingPair
from src.core.unified_bot_manager import unified_bot_manager  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

load_dotenv()

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê")
    print("=" * 50)
    
    # 1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    try:
        status = unified_bot_manager.get_comprehensive_status()
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        print(f"   –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: {'‚úÖ –î–∞' if status['process_running'] else '‚ùå –ù–µ—Ç'}")
        print(f"   PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {status.get('process_pid', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        print(f"   –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if status['manager_running'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(status['active_pairs'])}")
        print(f"   –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {status['open_positions']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        status = {'manager_running': False, 'process_running': False, 'active_pairs': [], 'open_positions': 0}
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    db = SessionLocal()
    try:
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        bot_state = db.query(BotState).first()
        if bot_state:
            print(f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î:")
            print(f"   –ó–∞–ø—É—â–µ–Ω: {'‚úÖ –î–∞' if bot_state.is_running else '‚ùå –ù–µ—Ç'}")
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {bot_state.start_time}")
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {bot_state.total_trades}")
            print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {bot_state.profitable_trades}")
            print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${bot_state.total_profit:.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${bot_state.current_balance:.2f}")
        else:
            print(f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î: ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if bot_state and status:
            if bot_state.is_running != status['manager_running']:
                print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:")
                print(f"   –ë–î –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {'–ó–∞–ø—É—â–µ–Ω' if bot_state.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print(f"   –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {'–ó–∞–ø—É—â–µ–Ω' if status['manager_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        active_pairs = db.query(TradingPair).filter(TradingPair.is_active == True).all()
        print(f"\nüí± –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã ({len(active_pairs)}):")
        for pair in active_pairs:
            print(f"   - {pair.symbol} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {pair.strategy})")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        recent_signals = db.query(Signal).order_by(Signal.created_at.desc()).limit(5).all()
        print(f"\nüì° –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã ({len(recent_signals)}):")
        for signal in recent_signals:
            time_ago = datetime.utcnow() - signal.created_at
            print(f"   - {signal.created_at.strftime('%H:%M:%S')} ({int(time_ago.total_seconds()/60)}–º –Ω–∞–∑–∞–¥): "
                  f"{signal.symbol} {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        open_trades = db.query(Trade).filter(Trade.status == 'OPEN').all()
        print(f"\nüíº –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(open_trades)}):")
        for trade in open_trades:
            print(f"   - {trade.symbol} {trade.side} @ ${trade.entry_price:.2f} "
                  f"(–∫–æ–ª-–≤–æ: {trade.quantity:.4f})")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        closed_trades = db.query(Trade).filter(
            Trade.status == 'CLOSED'
        ).order_by(Trade.closed_at.desc()).limit(5).all()
        
        print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ ({len(closed_trades)}):")
        for trade in closed_trades:
            if trade.closed_at:
                time_ago = datetime.utcnow() - trade.closed_at
                print(f"   - {trade.closed_at.strftime('%H:%M:%S')} ({int(time_ago.total_seconds()/60)}–º –Ω–∞–∑–∞–¥): "
                      f"{trade.symbol} P&L: ${trade.profit:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
    finally:
        db.close()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö:")
    try:
        log_path = '/var/www/www-root/data/www/systemetech.ru/logs/trading.log'
        if os.path.exists(log_path):
            with open(log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                    print(f"   {line.strip()}")
        else:
            print(f"   ‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_path}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def test_bot_cycle():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("\nüß™ –¢–ï–°–¢ –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        status = unified_bot_manager.get_comprehensive_status()
        
        if not status['manager_running']:
            print("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            unified_bot_manager.load_state()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
            if status['active_pairs']:
                symbol = status['active_pairs'][0]
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
                
                try:
                    signal = await unified_bot_manager.analyze_pair_test(symbol)
                    if signal:
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
                        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal.reason}")
                        print(f"   –¶–µ–Ω–∞: ${signal.price:.2f}")
                    else:
                        print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω (WAIT)")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    import traceback
                    traceback.print_exc()
            else:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            print("‚ÑπÔ∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def sync_bot_state():
    """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    print("\nüîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        result = unified_bot_manager.sync_state()
        if result['success']:
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            print(f"   –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ó–∞–ø—É—â–µ–Ω' if result['is_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result['error']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def safe_input(prompt: str) -> str:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π input
        return input(prompt).strip().lower()
    except UnicodeDecodeError:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        import sys
        sys.stdout.write(prompt)
        sys.stdout.flush()
        
        # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
        try:
            line = sys.stdin.buffer.readline()
            return line.decode('utf-8', errors='ignore').strip().lower()
        except:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'n'
            return 'n'

if __name__ == "__main__":
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        check_bot_status()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥
        user_input = safe_input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞? (y/n): ")
        if user_input == 'y':
            asyncio.run(test_bot_cycle())
        
        # ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_input = safe_input("\n–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è? (y/n): ")
        if sync_input == 'y':
            sync_bot_state()
            
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()