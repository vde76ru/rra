#!/usr/bin/env python3
"""
–£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–´–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢
==================================

–¶–µ–ª—å: –°–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚úÖ –ê–Ω–∞–ª–∏–∑ –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –Ω–∞ –±–∏—Ä–∂–µ
‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
‚úÖ –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ
‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞

–§–∞–π–ª: src/bot/advanced_manager.py
"""

import asyncio
import logging
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from enum import Enum
import json
import pickle
from collections import defaultdict, deque
import aiohttp
import ccxt.async_support as ccxt

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from ..core.database import SessionLocal
from ..core.models import *
from ..core.config import config
from ..exchange.client import ExchangeClient
from ..strategies.base import TradingSignal
from ..analysis.market_analyzer import MarketAnalyzer
from ..ml.models.price_predictor import PricePredictor
from ..ml.models.sentiment_analyzer import SentimentAnalyzer
from ..notifications.telegram import telegram_notifier

logger = logging.getLogger(__name__)

class MarketPhase(Enum):
    """–§–∞–∑—ã —Ä—ã–Ω–∫–∞"""
    ACCUMULATION = "accumulation"    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
    MARKUP = "markup"                # –†–æ—Å—Ç
    DISTRIBUTION = "distribution"    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ  
    MARKDOWN = "markdown"            # –ü–∞–¥–µ–Ω–∏–µ
    UNKNOWN = "unknown"              # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è

@dataclass
class TradingOpportunity:
    """–¢–æ—Ä–≥–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
    symbol: str
    strategy: str
    signal: TradingSignal
    score: float                    # –û–±—â–∏–π —Å–∫–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    risk_level: str                 # low, medium, high
    expected_profit: float          # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å %
    max_loss: float                 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ %
    market_phase: MarketPhase
    confidence: float               # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
    volume_score: float             # –°–∫–æ—Ä –æ–±—ä–µ–º–∞
    news_sentiment: float           # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    technical_score: float          # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    timestamp: datetime = field(default_factory=datetime.utcnow)

@dataclass
class MarketState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
    overall_trend: str              # BULLISH, BEARISH, SIDEWAYS
    volatility: str                 # LOW, MEDIUM, HIGH
    fear_greed_index: int          # 0-100
    btc_dominance: float           # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC
    total_market_cap: float        # –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    volume_24h: float              # –û–±—ä–µ–º –∑–∞ 24—á
    active_coins: int              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
    timestamp: datetime = field(default_factory=datetime.utcnow)

class AdvancedTradingBot:
    """
    –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç
    
    –§—É–Ω–∫—Ü–∏–∏:
    1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
    3. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    4. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    5. –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    6. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    7. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
    """

    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.exchange = None
        self.market_analyzer = MarketAnalyzer()
        self.price_predictor = PricePredictor()
        self.sentiment_analyzer = SentimentAnalyzer()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.start_time = None
        self.total_cycles = 0
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.all_trading_pairs = []          # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        self.active_pairs = []               # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.blacklisted_pairs = set()       # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        self.opportunities = {}              # –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.positions = {}                  # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –º–æ–¥–µ–ª–∏
        self.available_strategies = [
            'multi_indicator',
            'momentum', 
            'mean_reversion',
            'breakout',
            'scalping',
            'swing',
            'ml_prediction',
            'sentiment_based',
            'arbitrage'
        ]
        self.strategy_performance = defaultdict(lambda: {
            'total_trades': 0,
            'winning_trades': 0,
            'total_profit': 0.0,
            'win_rate': 0.0,
            'avg_profit': 0.0,
            'max_drawdown': 0.0,
            'sharpe_ratio': 0.0
        })
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.market_state = MarketState(
            overall_trend="UNKNOWN",
            volatility="MEDIUM", 
            fear_greed_index=50,
            btc_dominance=0.0,
            total_market_cap=0.0,
            volume_24h=0.0,
            active_coins=0
        )
        
        # –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        self.ml_models = {}
        self.feature_cache = {}
        self.prediction_cache = {}
        
        # –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
        self.news_cache = deque(maxlen=1000)
        self.social_signals = deque(maxlen=500)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'max_positions': 20,              # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1 –¥–æ 20
            'max_daily_trades': 100,          # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 100
            'position_size_percent': 2.0,     # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
            'max_risk_per_trade': 1.0,        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ 1%
            'min_profit_target': 1.5,         # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏ 1.5%
            
            # –°–µ–ª–µ–∫—Ü–∏—è –≤–∞–ª—é—Ç
            'min_volume_24h': 1000000,        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $1M
            'min_market_cap': 10000000,       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è $10M
            'max_pairs_to_analyze': 200,      # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ 200 –ø–∞—Ä
            'pair_update_interval': 3600,     # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–∞–∂–¥—ã–π —á–∞—Å
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
            'strategy_selection_method': 'adaptive',  # adaptive, best_performer, ensemble
            'min_strategy_confidence': 0.6,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 60%
            'ensemble_min_strategies': 3,     # –ú–∏–Ω–∏–º—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω—Å–∞–º–±–ª—è
            
            # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            'max_correlation': 0.7,           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
            'portfolio_risk_limit': 10.0,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è 10%
            'stop_loss_atr_multiplier': 2.0,  # –°—Ç–æ–ø-–ª–æ—Å—Å = 2 * ATR
            'take_profit_atr_multiplier': 4.0,# –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç = 4 * ATR
            'trailing_stop_enabled': True,    # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
            'dynamic_position_sizing': True,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            
            # –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            'enable_ml_predictions': True,
            'ml_prediction_weight': 0.3,      # –í–µ—Å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            'retrain_interval_hours': 24,     # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            'min_training_samples': 1000,     # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
            'enable_news_analysis': True,
            'news_impact_weight': 0.2,        # –í–µ—Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            'sentiment_threshold': 0.1,       # –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            'analysis_interval': 60,          # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫
            'data_update_interval': 30,       # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
            'health_check_interval': 300,     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω
        }

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
            logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
            self.exchange = ExchangeClient()
            await self.exchange.initialize()
            logger.info("‚úÖ –ë–∏—Ä–∂–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            logger.info("üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            await self._load_all_trading_pairs()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.all_trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π
            logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π...")
            await self._initialize_ml_models()
            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã")
            
            # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._load_historical_data()
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # 5. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
            logger.info("üåê –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞...")
            await self._analyze_market_state()
            logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def _load_all_trading_pairs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å –±–∏—Ä–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏
            markets = await self.exchange.fetch_markets()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            filtered_pairs = []
            for market in markets:
                symbol = market['symbol']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if (market['quote'] == 'USDT' and 
                    market['active'] and 
                    not market.get('spot', True) == False):
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 24—á
                        ticker = await self.exchange.fetch_ticker(symbol)
                        volume_24h = float(ticker.get('quoteVolume', 0))
                        
                        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
                        if volume_24h >= self.config['min_volume_24h']:
                            filtered_pairs.append({
                                'symbol': symbol,
                                'base': market['base'],
                                'quote': market['quote'],
                                'volume_24h': volume_24h,
                                'price': float(ticker.get('last', 0)),
                                'change_24h': float(ticker.get('percentage', 0))
                            })
                            
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                        continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (–±–æ–ª—å—à–∏–π –æ–±—ä–µ–º = –±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
            filtered_pairs.sort(key=lambda x: x['volume_24h'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            max_pairs = self.config['max_pairs_to_analyze']
            self.all_trading_pairs = filtered_pairs[:max_pairs]
            
            # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–æ–ø 50% –ø–æ –æ–±—ä–µ–º—É)
            active_count = min(50, len(self.all_trading_pairs) // 2)
            self.active_pairs = [pair['symbol'] for pair in self.all_trading_pairs[:active_count]]
            
            logger.info(f"üìà –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(self.all_trading_pairs)} –ø–∞—Ä –∏–∑ {len(markets)}")
            logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(self.active_pairs)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞—Ä–∞–º
            self.active_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT']

    async def _initialize_ml_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω
            self.ml_models['price_predictor'] = PricePredictor()
            
            # –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            self.ml_models['sentiment_analyzer'] = SentimentAnalyzer()
            
            # –ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
            from ..ml.models.regime_classifier import RegimeClassifier
            self.ml_models['regime_classifier'] = RegimeClassifier()
            
            # –ú–æ–¥–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            from ..ml.models.portfolio_optimizer import PortfolioOptimizer
            self.ml_models['portfolio_optimizer'] = PortfolioOptimizer()
            
            logger.info("üß† ML –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML: {e}")
            self.config['enable_ml_predictions'] = False

    async def _load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø-20 –ø–∞—Ä
            top_pairs = self.active_pairs[:20]
            
            for symbol in top_pairs:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                    candles = await self.exchange.fetch_ohlcv(
                        symbol, '1h', limit=720  # 30 –¥–Ω–µ–π * 24 —á–∞—Å–∞
                    )
                    
                    if candles:
                        df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                        self.feature_cache[symbol] = df
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                    continue
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(self.feature_cache)} –ø–∞—Ä")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _analyze_market_state(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            top_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 
                          'XRPUSDT', 'DOTUSDT', 'AVAXUSDT', 'MATICUSDT', 'LINKUSDT']
            
            trends = []
            volumes = []
            changes_24h = []
            
            for symbol in top_symbols:
                try:
                    ticker = await self.exchange.fetch_ticker(symbol)
                    change_24h = float(ticker.get('percentage', 0))
                    volume_24h = float(ticker.get('quoteVolume', 0))
                    
                    changes_24h.append(change_24h)
                    volumes.append(volume_24h)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                    if change_24h > 2:
                        trends.append('BULLISH')
                    elif change_24h < -2:
                        trends.append('BEARISH')
                    else:
                        trends.append('SIDEWAYS')
                        
                except Exception:
                    continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥
            bullish_count = trends.count('BULLISH')
            bearish_count = trends.count('BEARISH')
            
            if bullish_count > bearish_count * 1.5:
                overall_trend = 'BULLISH'
            elif bearish_count > bullish_count * 1.5:
                overall_trend = 'BEARISH'  
            else:
                overall_trend = 'SIDEWAYS'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            avg_change = np.mean(np.abs(changes_24h)) if changes_24h else 0
            if avg_change > 5:
                volatility = 'HIGH'
            elif avg_change > 2:
                volatility = 'MEDIUM'
            else:
                volatility = 'LOW'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            self.market_state = MarketState(
                overall_trend=overall_trend,
                volatility=volatility,
                fear_greed_index=50,  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
                btc_dominance=0.0,    # TODO: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å
                total_market_cap=sum(volumes),
                volume_24h=sum(volumes),
                active_coins=len(self.active_pairs)
            )
            
            logger.info(f"üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {overall_trend}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            return False
        
        self.is_running = True
        self.start_time = datetime.utcnow()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
            await asyncio.gather(
                self._main_trading_loop(),
                self._market_monitoring_loop(),
                self._ml_training_loop(),
                self._risk_monitoring_loop(),
                self._news_monitoring_loop()
            )
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.is_running = False
            return False

    async def _main_trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        while self.is_running:
            try:
                cycle_start = datetime.utcnow()
                self.total_cycles += 1
                
                logger.info(f"üìä –¶–∏–∫–ª #{self.total_cycles} - –∞–Ω–∞–ª–∏–∑ {len(self.active_pairs)} –ø–∞—Ä")
                
                # 1. –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                opportunities = await self._find_trading_opportunities()
                
                # 2. –û—Ü–µ–Ω–∫–∞ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
                ranked_opportunities = await self._rank_opportunities(opportunities)
                
                # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                await self._manage_existing_positions()
                
                # 4. –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                await self._execute_new_trades(ranked_opportunities)
                
                # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await self._update_performance_stats()
                
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                cycle_time = (datetime.utcnow() - cycle_start).total_seconds()
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª #{self.total_cycles} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å")
                
                # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                await asyncio.sleep(max(0, self.config['analysis_interval'] - cycle_time))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(30)

    async def _find_trading_opportunities(self) -> List[TradingOpportunity]:
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä–∞–º"""
        opportunities = []
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä
        tasks = []
        for symbol in self.active_pairs:
            if symbol not in self.blacklisted_pairs:
                task = self._analyze_trading_pair(symbol)
                tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–∞—á–∫–∞–º–∏ –ø–æ 10
        batch_size = 10
        for i in range(0, len(tasks), batch_size):
            batch = tasks[i:i + batch_size]
            results = await asyncio.gather(*batch, return_exceptions=True)
            
            for result in results:
                if isinstance(result, TradingOpportunity):
                    opportunities.append(result)
                elif isinstance(result, Exception):
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã: {result}")
        
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        return opportunities

    async def _analyze_trading_pair(self, symbol: str) -> Optional[TradingOpportunity]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self._get_market_data(symbol)
            if not market_data:
                return None
            
            # 2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_signals = await self._get_strategy_signals(symbol, market_data)
            
            # 3. ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
            ml_prediction = None
            if self.config['enable_ml_predictions']:
                ml_prediction = await self._get_ml_prediction(symbol, market_data)
            
            # 4. –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            news_sentiment = 0.0
            if self.config['enable_news_analysis']:
                news_sentiment = await self._get_news_sentiment(symbol)
            
            # 5. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            combined_signal = await self._combine_signals(
                strategy_signals, ml_prediction, news_sentiment
            )
            
            if combined_signal and combined_signal.confidence >= self.config['min_strategy_confidence']:
                # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä
                opportunity = TradingOpportunity(
                    symbol=symbol,
                    strategy=combined_signal.reason.split(':')[0] if ':' in combined_signal.reason else 'combined',
                    signal=combined_signal,
                    score=combined_signal.confidence,
                    risk_level=self._assess_risk_level(market_data),
                    expected_profit=abs(combined_signal.take_profit - combined_signal.price) / combined_signal.price * 100,
                    max_loss=abs(combined_signal.stop_loss - combined_signal.price) / combined_signal.price * 100,
                    market_phase=self._determine_market_phase(market_data),
                    confidence=combined_signal.confidence,
                    volume_score=market_data.get('volume_score', 0.5),
                    news_sentiment=news_sentiment,
                    technical_score=np.mean([s.confidence for s in strategy_signals])
                )
                
                return opportunity
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            
        return None

    async def _get_market_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            candles = await self.exchange.fetch_ohlcv(symbol, '1h', limit=100)
            if not candles:
                return None
            
            df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ –æ–±—ä–µ–º
            ticker = await self.exchange.fetch_ticker(symbol)
            current_price = float(ticker['last'])
            volume_24h = float(ticker.get('quoteVolume', 0))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_technical_indicators(df)
            
            # –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞
            avg_volume = df['volume'].tail(20).mean()
            volume_score = min(1.0, df['volume'].iloc[-1] / avg_volume) if avg_volume > 0 else 0.5
            
            return {
                'symbol': symbol,
                'df': df,
                'current_price': current_price,
                'volume_24h': volume_24h,
                'volume_score': volume_score,
                'indicators': indicators,
                'ticker': ticker
            }
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

    def _calculate_technical_indicators(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            from ta import add_all_ta_features
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df_with_indicators = add_all_ta_features(
                df, open="open", high="high", low="low", close="close", volume="volume"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            last_row = df_with_indicators.iloc[-1]
            
            return {
                'rsi': last_row.get('momentum_rsi', 50),
                'macd': last_row.get('trend_macd', 0),
                'macd_signal': last_row.get('trend_macd_signal', 0),
                'bb_upper': last_row.get('volatility_bbh', 0),
                'bb_lower': last_row.get('volatility_bbl', 0),
                'sma_20': last_row.get('trend_sma_20', 0),
                'ema_12': last_row.get('trend_ema_12', 0),
                'ema_26': last_row.get('trend_ema_26', 0),
                'atr': last_row.get('volatility_atr', 0),
                'volume_adi': last_row.get('volume_adi', 0),
                'stoch_k': last_row.get('momentum_stoch', 50),
                'williams_r': last_row.get('momentum_wr', -50)
            }
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}

    async def _get_strategy_signals(self, symbol: str, market_data: Dict) -> List[TradingSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        signals = []
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_classes = {
            'multi_indicator': 'MultiIndicatorStrategy',
            'momentum': 'MomentumStrategy', 
            'mean_reversion': 'MeanReversionStrategy',
            'breakout': 'BreakoutStrategy',
            'scalping': 'ScalpingStrategy'
        }
        
        for strategy_name, strategy_class in strategy_classes.items():
            try:
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                module = __import__(f'src.strategies.{strategy_name}', fromlist=[strategy_class])
                StrategyClass = getattr(module, strategy_class)
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy = StrategyClass()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
                signal = await strategy.analyze(symbol, market_data['df'])
                
                if signal and signal.action != 'WAIT':
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    signal.reason = f"{strategy_name}: {signal.reason}"
                    signals.append(signal)
                    
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                continue
        
        return signals

    async def _get_ml_prediction(self, symbol: str, market_data: Dict) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            if 'price_predictor' not in self.ml_models:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self._prepare_ml_features(market_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = await self.ml_models['price_predictor'].predict(
                symbol, features
            )
            
            return prediction
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return None

    def _prepare_ml_features(self, market_data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML"""
        try:
            df = market_data['df']
            indicators = market_data['indicators']
            
            # –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            returns = df['close'].pct_change().fillna(0)
            volatility = returns.rolling(20).std()
            
            features = {
                # –ë–∞–∑–æ–≤—ã–µ
                'price': market_data['current_price'],
                'volume': df['volume'].iloc[-1],
                'volume_score': market_data['volume_score'],
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                **indicators,
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ
                'return_1h': returns.iloc[-1],
                'return_24h': returns.tail(24).mean(),
                'volatility_20': volatility.iloc[-1] if not volatility.empty else 0,
                'price_position': (market_data['current_price'] - df['low'].tail(20).min()) / (df['high'].tail(20).max() - df['low'].tail(20).min()),
                
                # –†—ã–Ω–æ—á–Ω—ã–µ
                'market_trend': 1 if self.market_state.overall_trend == 'BULLISH' else -1 if self.market_state.overall_trend == 'BEARISH' else 0,
                'market_volatility': 2 if self.market_state.volatility == 'HIGH' else 1 if self.market_state.volatility == 'MEDIUM' else 0,
            }
            
            return features
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return {}

    async def _get_news_sentiment(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            if 'sentiment_analyzer' not in self.ml_models:
                return 0.0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∏–∑ —Å–∏–º–≤–æ–ª–∞
            base_asset = symbol.replace('USDT', '').replace('BUSD', '').replace('USDC', '')
            
            # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫—ç—à–µ
            relevant_news = []
            for news in self.news_cache:
                if any(keyword in news.get('title', '').lower() 
                      for keyword in [base_asset.lower(), 'crypto', 'bitcoin', 'ethereum']):
                    relevant_news.append(news)
            
            if not relevant_news:
                return 0.0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            sentiment_scores = []
            for news in relevant_news[-10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                score = await self.ml_models['sentiment_analyzer'].analyze(
                    news.get('title', '') + ' ' + news.get('content', '')
                )
                sentiment_scores.append(score)
            
            return np.mean(sentiment_scores) if sentiment_scores else 0.0
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
            return 0.0

    async def _combine_signals(self, strategy_signals: List[TradingSignal], 
                             ml_prediction: Optional[Dict], 
                             news_sentiment: float) -> Optional[TradingSignal]:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤—ã–π"""
        try:
            if not strategy_signals:
                return None
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
            buy_signals = [s for s in strategy_signals if s.action == 'BUY']
            sell_signals = [s for s in strategy_signals if s.action == 'SELL']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if len(buy_signals) > len(sell_signals):
                dominant_signals = buy_signals
                action = 'BUY'
            elif len(sell_signals) > len(buy_signals):
                dominant_signals = sell_signals
                action = 'SELL'
            else:
                # –†–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –≤—ã–±–∏—Ä–∞–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                all_signals = buy_signals + sell_signals
                best_signal = max(all_signals, key=lambda x: x.confidence)
                dominant_signals = [best_signal]
                action = best_signal.action
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_confidence = np.mean([s.confidence for s in dominant_signals])
            avg_price = np.mean([s.price for s in dominant_signals])
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if ml_prediction and self.config['enable_ml_predictions']:
                ml_weight = self.config['ml_prediction_weight']
                ml_direction = ml_prediction.get('direction', 0)  # -1, 0, 1
                ml_confidence = ml_prediction.get('confidence', 0.5)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ ML
                if (action == 'BUY' and ml_direction > 0) or (action == 'SELL' and ml_direction < 0):
                    avg_confidence = avg_confidence * (1 + ml_weight * ml_confidence)
                else:
                    avg_confidence = avg_confidence * (1 - ml_weight * ml_confidence)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω
            if self.config['enable_news_analysis'] and abs(news_sentiment) > self.config['sentiment_threshold']:
                news_weight = self.config['news_impact_weight']
                
                if (action == 'BUY' and news_sentiment > 0) or (action == 'SELL' and news_sentiment < 0):
                    avg_confidence = avg_confidence * (1 + news_weight * abs(news_sentiment))
                else:
                    avg_confidence = avg_confidence * (1 - news_weight * abs(news_sentiment))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            avg_confidence = min(0.95, max(0.05, avg_confidence))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            atr = np.mean([s.indicators.get('atr', 0) for s in dominant_signals if s.indicators])
            if atr == 0:
                atr = avg_price * 0.02  # 2% –∫–∞–∫ fallback
            
            if action == 'BUY':
                stop_loss = avg_price - (atr * self.config['stop_loss_atr_multiplier'])
                take_profit = avg_price + (atr * self.config['take_profit_atr_multiplier'])
            else:
                stop_loss = avg_price + (atr * self.config['stop_loss_atr_multiplier'])
                take_profit = avg_price - (atr * self.config['take_profit_atr_multiplier'])
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            combined_signal = TradingSignal(
                action=action,
                confidence=avg_confidence,
                price=avg_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                reason=f"Combined({len(dominant_signals)} strategies, ML: {bool(ml_prediction)}, News: {news_sentiment:.2f})",
                risk_reward_ratio=abs(take_profit - avg_price) / abs(stop_loss - avg_price)
            )
            
            return combined_signal
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return None

    async def _rank_opportunities(self, opportunities: List[TradingOpportunity]) -> List[TradingOpportunity]:
        """–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            for opp in opportunities:
                # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
                score = opp.confidence * 0.4
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä
                score += opp.technical_score * 0.25
                
                # Risk/Reward ratio
                if opp.signal.risk_reward_ratio and opp.signal.risk_reward_ratio > 0:
                    rr_score = min(1.0, opp.signal.risk_reward_ratio / 3.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 3.0
                    score += rr_score * 0.15
                
                # –û–±—ä–µ–º
                score += opp.volume_score * 0.1
                
                # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
                if abs(opp.news_sentiment) > 0.1:
                    score += abs(opp.news_sentiment) * 0.05
                
                # –§–∞–∑–∞ —Ä—ã–Ω–∫–∞
                if opp.market_phase in [MarketPhase.MARKUP, MarketPhase.ACCUMULATION]:
                    score += 0.05
                
                opp.score = score
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä–∞
            ranked = sorted(opportunities, key=lambda x: x.score, reverse=True)
            
            logger.info(f"üèÜ –¢–æ–ø-5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
            for i, opp in enumerate(ranked[:5]):
                logger.info(f"  {i+1}. {opp.symbol}: {opp.score:.3f} ({opp.signal.action}, RR: {opp.signal.risk_reward_ratio:.2f})")
            
            return ranked
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return opportunities

    async def _manage_existing_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        try:
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_trades = db.query(Trade).filter(Trade.status == TradeStatus.OPEN).all()
            
            for trade in open_trades:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    ticker = await self.exchange.fetch_ticker(trade.symbol)
                    current_price = float(ticker['last'])
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                    if trade.side == OrderSide.BUY:
                        pnl_percent = (current_price - trade.entry_price) / trade.entry_price * 100
                    else:
                        pnl_percent = (trade.entry_price - current_price) / trade.entry_price * 100
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                    should_close_sl = False
                    if trade.stop_loss:
                        if trade.side == OrderSide.BUY and current_price <= trade.stop_loss:
                            should_close_sl = True
                        elif trade.side == OrderSide.SELL and current_price >= trade.stop_loss:
                            should_close_sl = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                    should_close_tp = False
                    if trade.take_profit:
                        if trade.side == OrderSide.BUY and current_price >= trade.take_profit:
                            should_close_tp = True
                        elif trade.side == OrderSide.SELL and current_price <= trade.take_profit:
                            should_close_tp = True
                    
                    # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    if self.config['trailing_stop_enabled'] and pnl_percent > 2.0:
                        await self._update_trailing_stop(trade, current_price)
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if should_close_sl:
                        await self._close_position(trade, current_price, 'stop_loss')
                        logger.info(f"üõë –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {trade.symbol} –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É: {pnl_percent:.2f}%")
                    elif should_close_tp:
                        await self._close_position(trade, current_price, 'take_profit')
                        logger.info(f"üéØ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {trade.symbol} –ø–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É: {pnl_percent:.2f}%")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {trade.symbol}: {e}")
                    continue
            
            db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")

    async def _execute_new_trades(self, opportunities: List[TradingOpportunity]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            current_positions = len(self.positions)
            max_new_trades = min(
                self.config['max_positions'] - current_positions,
                self.config['max_daily_trades']  # TODO: —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            )
            
            if max_new_trades <= 0:
                logger.info("‚è∏Ô∏è –õ–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            selected_opportunities = opportunities[:max_new_trades]
            
            for opp in selected_opportunities:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
                    if opp.symbol in self.positions:
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    position_size = await self._calculate_position_size(opp)
                    
                    if position_size <= 0:
                        continue
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    success = await self._open_position(opp, position_size)
                    
                    if success:
                        logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {opp.symbol}: {opp.signal.action}, —Ä–∞–∑–º–µ—Ä: {position_size:.4f}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if telegram_notifier.enabled:
                            await telegram_notifier.send_message(
                                f"üöÄ <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n"
                                f"üìä –ü–∞—Ä–∞: {opp.symbol}\n"
                                f"üìà –î–µ–π—Å—Ç–≤–∏–µ: {opp.signal.action}\n"
                                f"üí∞ –†–∞–∑–º–µ—Ä: {position_size:.4f}\n"
                                f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {opp.confidence:.1%}\n"
                                f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {opp.strategy}"
                            )
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {opp.symbol}: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

    async def _calculate_position_size(self, opportunity: TradingOpportunity) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            balance = await self.exchange.fetch_balance()
            usdt_balance = float(balance.get('USDT', {}).get('free', 0))
            
            if usdt_balance < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                return 0
            
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            base_position_size = usdt_balance * (self.config['position_size_percent'] / 100)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_multiplier = opportunity.confidence
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_multiplier = 1.0
            if self.market_state.volatility == 'HIGH':
                volatility_multiplier = 0.7
            elif self.market_state.volatility == 'LOW':
                volatility_multiplier = 1.2
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
            risk_multiplier = 1.0
            if opportunity.risk_level == 'high':
                risk_multiplier = 0.6
            elif opportunity.risk_level == 'low':
                risk_multiplier = 1.3
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            final_size = base_position_size * confidence_multiplier * volatility_multiplier * risk_multiplier
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            quantity = final_size / opportunity.signal.price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –±–∏—Ä–∂–∏
            # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ exchange.markets
            min_quantity = 0.001  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            return max(min_quantity, quantity) if quantity >= min_quantity else 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0

    async def _open_position(self, opportunity: TradingOpportunity, quantity: float) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order_type = 'market'
            side = 'buy' if opportunity.signal.action == 'BUY' else 'sell'
            
            order = await self.exchange.create_order(
                symbol=opportunity.symbol,
                type=order_type,
                side=side,
                amount=quantity,
                price=None  # –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
            )
            
            if order and order.get('status') in ['closed', 'filled']:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db = SessionLocal()
                try:
                    trade = Trade(
                        symbol=opportunity.symbol,
                        side=OrderSide.BUY if side == 'buy' else OrderSide.SELL,
                        quantity=quantity,
                        entry_price=float(order.get('average', opportunity.signal.price)),
                        stop_loss=opportunity.signal.stop_loss,
                        take_profit=opportunity.signal.take_profit,
                        strategy=opportunity.strategy,
                        status=TradeStatus.OPEN,
                        confidence=opportunity.confidence,
                        created_at=datetime.utcnow()
                    )
                    
                    db.add(trade)
                    db.commit()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    self.positions[opportunity.symbol] = trade
                    
                    return True
                    
                finally:
                    db.close()
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {opportunity.symbol}: {e}")
            return False

    async def _close_position(self, trade: Trade, current_price: float, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            side = 'sell' if trade.side == OrderSide.BUY else 'buy'
            
            order = await self.exchange.create_order(
                symbol=trade.symbol,
                type='market',
                side=side,
                amount=trade.quantity,
                price=None
            )
            
            if order and order.get('status') in ['closed', 'filled']:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db = SessionLocal()
                try:
                    exit_price = float(order.get('average', current_price))
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                    if trade.side == OrderSide.BUY:
                        profit_percent = (exit_price - trade.entry_price) / trade.entry_price * 100
                        profit_usdt = (exit_price - trade.entry_price) * trade.quantity
                    else:
                        profit_percent = (trade.entry_price - exit_price) / trade.entry_price * 100
                        profit_usdt = (trade.entry_price - exit_price) * trade.quantity
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    trade.exit_price = exit_price
                    trade.profit = profit_usdt
                    trade.profit_percent = profit_percent
                    trade.status = TradeStatus.CLOSED
                    trade.exit_reason = reason
                    trade.closed_at = datetime.utcnow()
                    
                    db.commit()
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
                    if trade.symbol in self.positions:
                        del self.positions[trade.symbol]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    strategy_stats = self.strategy_performance[trade.strategy]
                    strategy_stats['total_trades'] += 1
                    strategy_stats['total_profit'] += profit_usdt
                    
                    if profit_usdt > 0:
                        strategy_stats['winning_trades'] += 1
                    
                    strategy_stats['win_rate'] = strategy_stats['winning_trades'] / strategy_stats['total_trades'] * 100
                    strategy_stats['avg_profit'] = strategy_stats['total_profit'] / strategy_stats['total_trades']
                    
                finally:
                    db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {trade.symbol}: {e}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...
    
    async def _market_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
        while self.is_running:
            try:
                await self._analyze_market_state()
                await self._update_trading_pairs()
                await asyncio.sleep(self.config['pair_update_interval'])
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞: {e}")
                await asyncio.sleep(300)

    async def _ml_training_loop(self):
        """–¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
        while self.is_running:
            try:
                if self.config['enable_ml_predictions']:
                    await self._retrain_ml_models()
                await asyncio.sleep(self.config['retrain_interval_hours'] * 3600)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML: {e}")
                await asyncio.sleep(3600)

    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
        while self.is_running:
            try:
                await self._check_portfolio_risk()
                await self._check_correlation_risk()
                await self._check_drawdown_limits()
                await asyncio.sleep(self.config['health_check_interval'])
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {e}")
                await asyncio.sleep(300)

    async def _news_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        while self.is_running:
            try:
                if self.config['enable_news_analysis']:
                    await self._fetch_crypto_news()
                    await self._analyze_social_sentiment()
                await asyncio.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                await asyncio.sleep(1800)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...
    
    def _assess_risk_level(self, market_data: Dict) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞
        volatility = market_data.get('indicators', {}).get('atr', 0)
        volume_score = market_data.get('volume_score', 0.5)
        
        if volatility > 0.05 or volume_score < 0.3:
            return 'high'
        elif volatility < 0.02 and volume_score > 0.7:
            return 'low'
        else:
            return 'medium'

    def _determine_market_phase(self, market_data: Dict) -> MarketPhase:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã
        indicators = market_data.get('indicators', {})
        rsi = indicators.get('rsi', 50)
        volume_score = market_data.get('volume_score', 0.5)
        
        if rsi > 70 and volume_score > 0.8:
            return MarketPhase.DISTRIBUTION
        elif rsi < 30 and volume_score > 0.8:
            return MarketPhase.ACCUMULATION
        elif 30 <= rsi <= 70 and volume_score > 0.6:
            return MarketPhase.MARKUP if rsi > 50 else MarketPhase.MARKDOWN
        else:
            return MarketPhase.UNKNOWN

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        return {
            'is_running': self.is_running,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'total_cycles': self.total_cycles,
            'active_pairs': len(self.active_pairs),
            'all_pairs': len(self.all_trading_pairs),
            'open_positions': len(self.positions),
            'market_state': {
                'trend': self.market_state.overall_trend,
                'volatility': self.market_state.volatility,
                'active_coins': self.market_state.active_coins
            },
            'strategy_performance': dict(self.strategy_performance),
            'config': self.config
        }

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # await self._close_all_positions()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['AdvancedTradingBot']