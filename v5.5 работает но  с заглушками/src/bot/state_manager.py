"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–§–∞–π–ª: src/bot/state_manager.py

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: –î–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É BotController –∏ BotManager
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Thread-safe singleton —Å Observer pattern
"""

import threading
import logging
from datetime import datetime
from enum import Enum
from typing import Optional, Dict, Any, List, Callable
from dataclasses import dataclass

logger = logging.getLogger(__name__)

class BotStatus(Enum):
    """–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    STOPPED = "stopped"
    STARTING = "starting" 
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"

@dataclass
class BotState:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π"""
    status: BotStatus
    is_running: bool
    active_pairs: List[str]
    open_positions: int
    start_time: Optional[datetime] = None
    last_update: Optional[datetime] = None
    error_message: Optional[str] = None
    strategy: str = "auto"
    
    def to_api_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç API –æ—Ç–≤–µ—Ç–∞"""
        return {
            'status': self.status.value,
            'is_running': self.is_running,
            'active_pairs': self.active_pairs,
            'open_positions': self.open_positions,
            'positions_details': {},
            'statistics': {
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'uptime': self._calculate_uptime(),
                'cycles_count': 0,
                'trades_today': 0
            },
            'process_info': {},
            'config': {
                'mode': 'TESTNET',
                'max_positions': 1,
                'human_mode': True,
                'max_daily_trades': 10
            },
            'timestamp': datetime.utcnow().isoformat(),
            'error_message': self.error_message
        }
    
    def _calculate_uptime(self) -> Optional[str]:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not self.start_time or not self.is_running:
            return None
        
        uptime = datetime.utcnow() - self.start_time
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

class StateManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å thread-safe –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å—Ç–∏–Ω—ã
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Observer pattern –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    """
    
    _instance = None
    _instance_lock = threading.Lock()
    
    def __new__(cls):
        """Thread-safe —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Singleton"""
        if cls._instance is None:
            with cls._instance_lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StateManager (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)"""
        if getattr(self, '_initialized', False):
            return
        
        self._state_lock = threading.RLock()
        self._state = BotState(
            status=BotStatus.STOPPED,
            is_running=False,
            active_pairs=[],
            open_positions=0,
            strategy="auto"
        )
        
        self._observers: List[Callable] = []
        self._operation_history: List[Dict] = []
        self._initialized = True
        
        logger.info("‚úÖ StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ Singleton")
    
    def get_state(self) -> BotState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (thread-safe)"""
        with self._state_lock:
            self._state.last_update = datetime.utcnow()
            return self._state
    
    def get_status_api(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ API"""
        state = self.get_state()
        return state.to_api_dict()
    
    def can_start(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        with self._state_lock:
            if self._state.status in [BotStatus.RUNNING, BotStatus.STARTING]:
                return False, f"–ë–æ—Ç —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {self._state.status.value}"
            
            if self._state.status == BotStatus.STOPPING:
                return False, "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
            
            return True, "–ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω"
    
    def can_stop(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        with self._state_lock:
            if self._state.status in [BotStatus.STOPPED, BotStatus.STOPPING]:
                return False, f"–ë–æ—Ç —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {self._state.status.value}"
            
            if self._state.status == BotStatus.ERROR:
                return True, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏"
            
            return True, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
    
    def transition_to_starting(self, pairs: List[str], strategy: str = "auto") -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞"""
        can_start, reason = self.can_start()
        if not can_start:
            logger.warning(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—É—Å–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
            return False
        
        with self._state_lock:
            self._state.status = BotStatus.STARTING
            self._state.is_running = False
            self._state.active_pairs = pairs.copy()
            self._state.strategy = strategy
            self._state.error_message = None
            self._state.last_update = datetime.utcnow()
            
            self._record_operation("transition_to_starting", {
                'pairs': pairs,
                'strategy': strategy
            })
            
            self._notify_observers()
            
        logger.info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—É—Å–∫—É: –ø–∞—Ä—ã={pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è={strategy}")
        return True
    
    def transition_to_running(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        with self._state_lock:
            if self._state.status != BotStatus.STARTING:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ running –∏–∑ {self._state.status}")
                return False
            
            self._state.status = BotStatus.RUNNING
            self._state.is_running = True
            self._state.start_time = datetime.utcnow()
            self._state.last_update = datetime.utcnow()
            
            self._record_operation("transition_to_running", {})
            self._notify_observers()
            
        logger.info("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        return True
    
    def transition_to_stopping(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        can_stop, reason = self.can_stop()
        if not can_stop:
            logger.warning(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {reason}")
            return False
        
        with self._state_lock:
            self._state.status = BotStatus.STOPPING
            self._state.is_running = False
            self._state.last_update = datetime.utcnow()
            
            self._record_operation("transition_to_stopping", {})
            self._notify_observers()
            
        logger.info("üõë –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        return True
    
    def transition_to_stopped(self) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        with self._state_lock:
            self._state.status = BotStatus.STOPPED
            self._state.is_running = False
            self._state.active_pairs = []
            self._state.open_positions = 0
            self._state.start_time = None
            self._state.error_message = None
            self._state.last_update = datetime.utcnow()
            
            self._record_operation("transition_to_stopped", {})
            self._notify_observers()
            
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    def transition_to_error(self, error_message: str) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        with self._state_lock:
            self._state.status = BotStatus.ERROR
            self._state.is_running = False
            self._state.error_message = error_message
            self._state.last_update = datetime.utcnow()
            
            self._record_operation("transition_to_error", {
                'error_message': error_message
            })
            self._notify_observers()
            
        logger.error(f"‚ùå –ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏: {error_message}")
        return True
    
    def force_reset(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∞–≤–∞—Ä–∏–π–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞)"""
        with self._state_lock:
            self._state = BotState(
                status=BotStatus.STOPPED,
                is_running=False,
                active_pairs=[],
                open_positions=0,
                strategy="auto"
            )
            
            self._record_operation("force_reset", {})
            self._notify_observers()
            
        logger.warning("üî• –í—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    
    def add_observer(self, callback: Callable) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._state_lock:
            self._observers.append(callback)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω observer, –≤—Å–µ–≥–æ: {len(self._observers)}")
    
    def remove_observer(self, callback: Callable) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        with self._state_lock:
            if callback in self._observers:
                self._observers.remove(callback)
        logger.debug(f"–£–¥–∞–ª–µ–Ω observer, –æ—Å—Ç–∞–ª–æ—Å—å: {len(self._observers)}")
    
    def get_operation_history(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        with self._state_lock:
            return self._operation_history[-limit:]
    
    def _notify_observers(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        for callback in self._observers.copy():  # –ö–æ–ø–∏—è –¥–ª—è thread-safety
            try:
                callback(self._state)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è observer: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π observer
                with self._state_lock:
                    if callback in self._observers:
                        self._observers.remove(callback)
    
    def _record_operation(self, operation: str, details: Dict) -> None:
        """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        record = {
            'timestamp': datetime.utcnow().isoformat(),
            'operation': operation,
            'details': details,
            'state_before': self._state.status.value if hasattr(self._state, 'status') else 'unknown'
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self._operation_history) >= 100:
            self._operation_history = self._operation_history[-50:]
        
        self._operation_history.append(record)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Singleton
state_manager = StateManager()