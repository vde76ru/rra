/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
 * –§–∞–π–ª: charts_enhanced_fixed.js
 */

class FixedChartsManager {
    constructor() {
        this.charts = new Map();
        this.isInitialized = false;
        this.updateInterval = 30000;
        
        console.log('üìä FixedChartsManager —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize() {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chart.js
            if (typeof Chart === 'undefined') {
                throw new Error('Chart.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Chart.js –ü–†–ê–í–ò–õ–¨–ù–û
            this.setupChartDefaults();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            await this.initializeAllCharts();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadInitialData();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            this.startAutoUpdate();
            
            this.isInitialized = true;
            console.log('‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            this.showSuccess('–ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chart.js –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setupChartDefaults() {
        // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chart.js 3.x+
        Chart.defaults.font = {
            ...Chart.defaults.font,
            family: 'Arial, sans-serif'
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        Chart.defaults.color = '#ffffff';
        Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';
        Chart.defaults.backgroundColor = 'rgba(255, 255, 255, 0.1)';
        
        console.log('‚öôÔ∏è Chart.js –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    async initializeAllCharts() {
        const chartsToCreate = [
            { canvasId: 'balanceChart', type: 'balance' },
            { canvasId: 'priceChart', type: 'price' },
            { canvasId: 'positionsChart', type: 'positions' },
            { canvasId: 'tradingview_chart', type: 'tradingview' }
        ];
        
        for (const chartConfig of chartsToCreate) {
            await this.createSingleChart(chartConfig.canvasId, chartConfig.type);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
     */
    async createSingleChart(canvasId, chartType) {
        try {
            const canvas = document.getElementById(canvasId);
            if (!canvas) {
                console.warn(`‚ö†Ô∏è Canvas '${canvasId}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –≥—Ä–∞—Ñ–∏–∫
            if (this.charts.has(canvasId)) {
                console.log(`üìä –ì—Ä–∞—Ñ–∏–∫ '${canvasId}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º`);
                this.charts.get(canvasId).destroy();
            }
            
            const ctx = canvas.getContext('2d');
            let chart = null;
            
            switch (chartType) {
                case 'balance':
                    chart = this.createBalanceChart(ctx);
                    break;
                case 'price':
                    chart = this.createPriceChart(ctx);
                    break;
                case 'positions':
                    chart = this.createPositionsChart(ctx);
                    break;
                case 'tradingview':
                    // TradingView –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                    this.initializeTradingView(canvasId);
                    return;
                default:
                    console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞: ${chartType}`);
                    return null;
            }
            
            if (chart) {
                this.charts.set(canvasId, chart);
                console.log(`‚úÖ –ì—Ä–∞—Ñ–∏–∫ '${canvasId}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
            }
            
            return chart;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ '${canvasId}':`, error);
            return null;
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
     */
    createBalanceChart(ctx) {
        return new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: '–ë–∞–ª–∞–Ω—Å USDT',
                    data: [],
                    borderColor: '#28a745',
                    backgroundColor: 'rgba(40, 167, 69, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#28a745',
                    pointBorderColor: '#ffffff',
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            color: '#ffffff',
                            font: {
                                size: 14
                            }
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        borderColor: '#28a745',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                return `–ë–∞–ª–∞–Ω—Å: $${context.parsed.y.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#ffffff',
                            maxTicksLimit: 8
                        }
                    },
                    y: {
                        display: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            drawBorder: false
                        },
                        ticks: {
                            color: '#ffffff',
                            callback: function(value) {
                                return '$' + value.toFixed(0);
                            }
                        }
                    }
                },
                interaction: {
                    mode: 'nearest',
                    axis: 'x',
                    intersect: false
                }
            }
        });
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
     */
    createPriceChart(ctx) {
        return new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'BTCUSDT',
                    data: [],
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: '#007bff',
                    pointBorderColor: '#ffffff',
                    pointRadius: 3,
                    pointHoverRadius: 5
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        labels: {
                            color: '#ffffff'
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: $${context.parsed.y.toLocaleString()}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: { color: 'rgba(255, 255, 255, 0.1)' },
                        ticks: { color: '#ffffff', maxTicksLimit: 12 }
                    },
                    y: {
                        grid: { color: 'rgba(255, 255, 255, 0.1)' },
                        ticks: { 
                            color: '#ffffff',
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∑–∏—Ü–∏–π
     */
    createPositionsChart(ctx) {
        return new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π'],
                datasets: [{
                    data: [1],
                    backgroundColor: ['#6c757d'],
                    borderColor: ['#495057'],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: '#ffffff',
                            padding: 20,
                            font: {
                                size: 12
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#ffffff',
                        bodyColor: '#ffffff',
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: $${context.parsed.toFixed(2)}`;
                            }
                        }
                    }
                }
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TradingView (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
     */
    initializeTradingView(containerId) {
        if (typeof TradingView !== 'undefined') {
            try {
                new TradingView.widget({
                    autosize: true,
                    symbol: 'BINANCE:BTCUSDT',
                    interval: '1h',
                    timezone: 'Etc/UTC',
                    theme: 'dark',
                    style: '1',
                    locale: 'ru',
                    toolbar_bg: '#1e1e1e',
                    enable_publishing: false,
                    allow_symbol_change: true,
                    container_id: containerId
                });
                console.log('‚úÖ TradingView –≥—Ä–∞—Ñ–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ TradingView:', error);
            }
        } else {
            console.warn('‚ö†Ô∏è TradingView –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞
        this.updateBalanceWithDemo();
        this.updatePriceWithDemo();
        this.updatePositionsWithDemo();
        
        console.log('‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
     */
    updateBalanceWithDemo() {
        const chart = this.charts.get('balanceChart');
        if (!chart) return;
        
        const now = new Date();
        const labels = [];
        const data = [];
        let balance = 1000;
        
        for (let i = 9; i >= 0; i--) {
            const time = new Date(now.getTime() - i * 60 * 60 * 1000);
            labels.push(time.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            }));
            
            balance += (Math.random() - 0.5) * 50;
            data.push(Math.max(900, balance));
        }
        
        chart.data.labels = labels;
        chart.data.datasets[0].data = data;
        chart.update('none');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
     */
    updatePriceWithDemo() {
        const chart = this.charts.get('priceChart');
        if (!chart) return;
        
        const now = new Date();
        const labels = [];
        const data = [];
        let price = 67800;
        
        for (let i = 23; i >= 0; i--) {
            const time = new Date(now.getTime() - i * 60 * 60 * 1000);
            labels.push(time.toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            }));
            
            price += (Math.random() - 0.5) * 1000;
            data.push(Math.max(60000, Math.min(75000, price)));
        }
        
        chart.data.labels = labels;
        chart.data.datasets[0].data = data;
        chart.update('none');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
     */
    updatePositionsWithDemo() {
        const chart = this.charts.get('positionsChart');
        if (!chart) return;
        
        chart.data.labels = ['BTC/USDT', 'ETH/USDT', 'Available'];
        chart.data.datasets[0].data = [450, 350, 200];
        chart.data.datasets[0].backgroundColor = ['#f7931e', '#627eea', '#28a745'];
        chart.data.datasets[0].borderColor = ['#d4761a', '#4f63d2', '#1e7e34'];
        chart.update('none');
    }
    
    /**
     * –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    startAutoUpdate() {
        setInterval(() => {
            if (this.isInitialized) {
                this.updateBalanceWithDemo();
                this.updatePriceWithDemo();
            }
        }, this.updateInterval);
        
        console.log(`‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (${this.updateInterval/1000}—Å)`);
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showSuccess(message) {
        this.showNotification(message, 'success');
    }
    
    showError(message) {
        this.showNotification(message, 'error');
    }
    
    showNotification(message, type = 'info') {
        const alertClass = {
            'success': 'alert-success',
            'error': 'alert-danger', 
            'info': 'alert-info'
        }[type];
        
        const notification = document.createElement('div');
        notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            <strong>${type === 'error' ? '–û—à–∏–±–∫–∞' : '–£—Å–ø–µ—Ö'}:</strong> ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.charts.forEach(chart => {
            try {
                chart.destroy();
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
            }
        });
        this.charts.clear();
        this.isInitialized = false;
        console.log('üßπ FixedChartsManager –æ—á–∏—â–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
let globalChartsManager = null;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async function() {
    try {
        console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏...');
        
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
        await new Promise(resolve => {
            if (typeof Chart !== 'undefined') {
                resolve();
            } else {
                const checkLibraries = setInterval(() => {
                    if (typeof Chart !== 'undefined') {
                        clearInterval(checkLibraries);
                        resolve();
                    }
                }, 100);
            }
        });
        
        globalChartsManager = new FixedChartsManager();
        await globalChartsManager.initialize();
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
    }
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
window.addEventListener('beforeunload', () => {
    if (globalChartsManager) {
        globalChartsManager.destroy();
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.chartsManager = globalChartsManager;