# src/web/bot_control.py
"""
Bot Control API - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

–ú–æ–¥—É–ª—å: API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º StateManager
–°—Ç–∞—Ç—É—Å: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º + unpacking fix
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è StateManager + AsyncRouteHandler + BotManager

–ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. –ó–∞–º–µ–Ω–∞ self.auto_trading –Ω–∞ centralizedStateManager
2. –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
4. ‚úÖ –ù–û–í–û–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ unpacking –æ—à–∏–±–∫–∏ –≤ _start_real_bot/_stop_real_bot
5. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from flask import jsonify, request

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ú–ü–û–†–¢–´: StateManager + AsyncHandler
from ..bot.state_manager import state_manager
from .async_handler import async_handler

logger = logging.getLogger(__name__)

class BotController:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    - –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (self.auto_trading)
    - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ StateManager
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å BotManager
    - ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç BotManager
    - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
    """
    
    def __init__(self, bot_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ BotController
        
        Args:
            bot_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä BotManager –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        self.bot_manager = bot_manager
        self.trading_task: Optional[asyncio.Task] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.controller_stats = {
            'initialization_time': datetime.utcnow(),
            'total_api_calls': 0,
            'successful_operations': 0,
            'failed_operations': 0,
            'last_operation': None
        }
        
        logger.info("üéÆ BotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å StateManager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ StateManager (thread-safe)
        
        Returns:
            Dict: –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑ –µ–¥–∏–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å—Ç–∏–Ω—ã
        """
        try:
            self.controller_stats['total_api_calls'] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ StateManager
            status = state_manager.get_status_api()
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç BotManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.bot_manager:
                try:
                    bot_manager_status = self.bot_manager.get_status()
                    # Merge –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
                    status.update({
                        'bot_manager_info': bot_manager_status,
                        'real_bot_running': getattr(self.bot_manager, 'is_running', False)
                    })
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç BotManager: {e}")
            
            self.controller_stats['successful_operations'] += 1
            return status
            
        except Exception as e:
            self.controller_stats['failed_operations'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'status': 'error',
                'is_running': False,
                'error_message': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    async def start_bot(self) -> Dict[str, Any]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
        """
        operation_start = datetime.utcnow()
        self.controller_stats['last_operation'] = 'start_bot'
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            pairs = self._extract_pairs_from_request()
            strategy = self._extract_strategy_from_request()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: –ø–∞—Ä—ã={pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è={strategy}")
            
            # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ StateManager
            if not state_manager.transition_to_starting(pairs, strategy):
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫',
                    'status': state_manager.get_status_api()
                }
            
            logger.info(f"üì° –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—É—Å–∫—É: –ø–∞—Ä—ã={pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è={strategy}")
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
            
            # –®–∞–≥ 2: –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ BotManager (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            bot_manager_success = await self._start_real_bot(pairs, strategy)
            
            # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if bot_manager_success:
                state_manager.transition_to_running()
                self.controller_stats['successful_operations'] += 1
                
                return {
                    'success': True,
                    'message': f'–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–∏: {", ".join(pairs)}',
                    'status': state_manager.get_status_api(),
                    'operation_time': (datetime.utcnow() - operation_start).total_seconds()
                }
            else:
                state_manager.transition_to_error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BotManager")
                self.controller_stats['failed_operations'] += 1
                
                return {
                    'success': False,
                    'message': '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
                    'status': state_manager.get_status_api()
                }
                
        except Exception as e:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_message}")
            
            state_manager.transition_to_error(error_message)
            self.controller_stats['failed_operations'] += 1
            
            return {
                'success': False,
                'message': error_message,
                'status': state_manager.get_status_api()
            }
    
    async def stop_bot(self) -> Dict[str, Any]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        operation_start = datetime.utcnow()
        self.controller_stats['last_operation'] = 'stop_bot'
        
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
            
            # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ StateManager
            if not state_manager.transition_to_stopping():
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É',
                    'status': state_manager.get_status_api()
                }
            
            # –®–∞–≥ 2: –†–µ–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ BotManager
            bot_manager_success = await self._stop_real_bot()
            
            # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state_manager.transition_to_stopped()
            
            # –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —É—Å–ø–µ—à–Ω–æ–π, –¥–∞–∂–µ –µ—Å–ª–∏ BotManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.controller_stats['successful_operations'] += 1
            
            return {
                'success': True,
                'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                'status': state_manager.get_status_api(),
                'operation_time': (datetime.utcnow() - operation_start).total_seconds(),
                'bot_manager_stopped': bot_manager_success
            }
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.error(f"‚ùå {error_message}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ stopped
            state_manager.transition_to_stopped()
            self.controller_stats['failed_operations'] += 1
            
            return {
                'success': True,  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è API
                'message': f'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {error_message}',
                'status': state_manager.get_status_api()
            }
    
    async def restart_bot(self) -> Dict[str, Any]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å stop -> start
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        try:
            # –®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞
            stop_result = await self.stop_bot()
            if not stop_result['success']:
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {stop_result["message"]}',
                    'status': state_manager.get_status_api()
                }
            
            # –®–∞–≥ 2: –ü–∞—É–∑–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await asyncio.sleep(2)
            
            # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫
            start_result = await self.start_bot()
            
            return {
                'success': start_result['success'],
                'message': f'–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: {start_result["message"]}',
                'status': state_manager.get_status_api(),
                'restart_details': {
                    'stop_result': stop_result['success'],
                    'start_result': start_result['success']
                }
            }
            
        except Exception as e:
            error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_message}")
            
            state_manager.transition_to_error(error_message)
            
            return {
                'success': False,
                'message': error_message,
                'status': state_manager.get_status_api()
            }
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def _extract_pairs_from_request(self) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if request.is_json:
                data = request.get_json() or {}
                pairs = data.get('pairs', [])
            else:
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ form-data –∏ query parameters
                pairs_str = request.form.get('pairs') or request.args.get('pairs')
                if pairs_str:
                    pairs = [p.strip() for p in pairs_str.split(',')]
                else:
                    pairs = []
            
            # –ü–∞—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if not pairs:
                pairs = ['BTCUSDT', 'ETHUSDT']
            
            logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
            return pairs
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return ['BTCUSDT', 'ETHUSDT']
    
    def _extract_strategy_from_request(self) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if request.is_json:
                data = request.get_json() or {}
                strategy = data.get('strategy', 'auto')
            else:
                strategy = request.form.get('strategy') or request.args.get('strategy') or 'auto'
            
            logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
            return strategy
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return 'auto'
    
    async def _start_real_bot(self, pairs: List[str], strategy: str) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ BotManager - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.bot_manager:
            logger.warning("BotManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
            return True
        
        try:
            if hasattr(self.bot_manager, 'update_pairs'):
                await self.bot_manager.update_pairs(pairs)
            
            if hasattr(self.bot_manager, 'start'):
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–ª—É—á–∞—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                result = await self.bot_manager.start()
                
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ (bool, str)
                if isinstance(result, tuple) and len(result) == 2:
                    success, message = result
                    logger.info(f"BotManager start result: {success}, {message}")
                    return success
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ bool
                elif isinstance(result, bool):
                    logger.info(f"BotManager start result: {result}")
                    return result
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç BotManager.start(): {type(result)}")
                    return bool(result)
            else:
                logger.warning("BotManager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ start")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BotManager: {e}")
            return False
    
    async def _stop_real_bot(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ BotManager - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.bot_manager:
            logger.warning("BotManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            return True
        
        try:
            if hasattr(self.bot_manager, 'stop'):
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–ª—É—á–∞—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                result = await self.bot_manager.stop()
                
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ (bool, str)
                if isinstance(result, tuple) and len(result) == 2:
                    success, message = result
                    logger.info(f"BotManager stop result: {success}, {message}")
                    return success
                # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ bool
                elif isinstance(result, bool):
                    logger.info(f"BotManager stop result: {result}")
                    return result
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç BotManager.stop(): {type(result)}")
                    return bool(result)
            else:
                logger.warning("BotManager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ stop")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ BotManager: {e}")
            return False
    
    def get_controller_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return {
            **self.controller_stats,
            'state_manager_history': state_manager.get_operation_history(5),
            'current_state': state_manager.get_status_api()
        }


def register_bot_control_routes(app, bot_manager=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤ —Å StateManager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
        
    Returns:
        BotController: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    """
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ —Å StateManager...")
    
    bot_controller = BotController(bot_manager)
    
    # === –û–°–ù–û–í–ù–´–ï API ENDPOINTS ===
    
    @app.route('/api/bot/status', methods=['GET'])
    def get_bot_status_action():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)"""
        try:
            status = bot_controller.get_status()
            return jsonify(status)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    
    @app.route('/api/bot/start', methods=['POST'])
    @async_handler.async_route(timeout=30)
    async def start_bot_action():
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)"""
        try:
            logger.info("üéØ API –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            logger.info(f"üìä Request: {request.content_type}, Method: {request.method}")
            
            result = await bot_controller.start_bot()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['success']:
                logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {result['message']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['message']}")
            
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                'status': state_manager.get_status_api()
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    @async_handler.async_route(timeout=15)
    async def stop_bot_action():
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)"""
        try:
            logger.info("üéØ API –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
            
            result = await bot_controller.stop_bot()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['success']:
                logger.info(f"‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result['message']}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {result['message']}")
            
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return jsonify({
                'success': False,
                'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                'status': state_manager.get_status_api()
            }), 500
    
    @app.route('/api/bot/restart', methods=['POST'])
    @async_handler.async_route(timeout=45)
    async def restart_bot_action():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)"""
        try:
            logger.info("üéØ API –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            
            result = await bot_controller.restart_bot()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['success']:
                logger.info(f"‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω: {result['message']}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['message']}")
            
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                'status': state_manager.get_status_api()
            }), 500
    
    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS ===
    
    @app.route('/api/bot/force-reset', methods=['POST'])
    def force_reset_action():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∞–≤–∞—Ä–∏–π–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞)"""
        try:
            logger.warning("üî• API –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞")
            
            state_manager.force_reset()
            
            return jsonify({
                'success': True,
                'message': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ',
                'status': state_manager.get_status_api(),
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/diagnostics', methods=['GET'])
    def get_diagnostics():
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            return jsonify({
                'success': True,
                'controller_stats': bot_controller.get_controller_stats(),
                'state_manager_history': state_manager.get_operation_history(10),
                'async_handler_stats': async_handler.get_stats(),
                'timestamp': datetime.utcnow().isoformat()
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # === CORS –ü–û–î–î–ï–†–ñ–ö–ê ===
    
    @app.route('/api/bot/start', methods=['OPTIONS'])
    @app.route('/api/bot/stop', methods=['OPTIONS'])
    @app.route('/api/bot/restart', methods=['OPTIONS'])
    @app.route('/api/bot/force-reset', methods=['OPTIONS'])
    def bot_control_options():
        """CORS preflight –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response
    
    logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: StateManager + AsyncRouteHandler + BotManager")
    logger.info("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: Unpacking –æ—à–∏–±–∫–∞ –≤ _start_real_bot/_stop_real_bot")
    
    return bot_controller

# –≠–∫—Å–ø–æ—Ä—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = ['BotController', 'register_bot_control_routes']