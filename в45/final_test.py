#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""
import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import json
import traceback
from typing import Dict, List, Tuple, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    import ccxt.async_support as ccxt
    import pandas as pd
    import numpy as np
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class SystemTester:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    1. –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    """
    
    def __init__(self):
        self.test_results = {}
        self.errors = []
        self.warnings = []
        self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        env_path = Path('/etc/crypto/config/.env')
        if env_path.exists():
            load_dotenv(env_path)
            print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {env_path}{Colors.ENDC}")
        else:
            load_dotenv()
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª{Colors.ENDC}")
    
    async def test_environment(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - Python –≤–µ—Ä—Å–∏—è
        - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        - –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è{Colors.ENDC}")
        results = {
            'python_version': sys.version,
            'packages': {},
            'env_vars': {},
            'directories': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        critical_packages = [
            'ccxt', 'pandas', 'numpy', 'sqlalchemy', 
            'flask', 'scikit-learn', 'torch', 'transformers'
        ]
        
        for package in critical_packages:
            try:
                module = __import__(package)
                version = getattr(module, '__version__', 'unknown')
                results['packages'][package] = {'status': 'installed', 'version': version}
                print(f"  {Colors.GREEN}‚úÖ {package} v{version}{Colors.ENDC}")
            except ImportError:
                results['packages'][package] = {'status': 'missing', 'version': None}
                self.errors.append(f"–ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                print(f"  {Colors.RED}‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env = [
            'BYBIT_API_KEY', 'BYBIT_API_SECRET', 'DATABASE_URL',
            'SECRET_KEY', 'JWT_SECRET_KEY', 'BYBIT_TESTNET'
        ]
        
        for var in required_env:
            value = os.getenv(var)
            if value:
                results['env_vars'][var] = 'set'
                print(f"  {Colors.GREEN}‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Colors.ENDC}")
            else:
                results['env_vars'][var] = 'missing'
                self.errors.append(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                print(f"  {Colors.RED}‚ùå {var} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç{Colors.ENDC}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = ['src', 'logs', 'data', 'models', 'static', 'templates']
        for dir_name in required_dirs:
            dir_path = Path(dir_name)
            if dir_path.exists():
                results['directories'][dir_name] = 'exists'
                print(f"  {Colors.GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç{Colors.ENDC}")
            else:
                dir_path.mkdir(exist_ok=True)
                results['directories'][dir_name] = 'created'
                print(f"  {Colors.YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}{Colors.ENDC}")
        
        return results
    
    async def test_database_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü
        - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö{Colors.ENDC}")
        results = {
            'connection': False,
            'tables': {},
            'performance': {}
        }
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            database_url = os.getenv('DATABASE_URL')
            if not database_url:
                raise Exception("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            engine = create_engine(database_url)
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            with engine.connect() as conn:
                from sqlalchemy import text
                result = conn.execute(text("SELECT 1"))
                results['connection'] = True
                print(f"  {Colors.GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            from sqlalchemy import inspect
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            
            required_tables = [
                'bot_state', 'trades', 'signals', 'balances',
                'trading_pairs', 'ml_models', 'users'
            ]
            
            for table in required_tables:
                if table in tables:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    with engine.connect() as conn:
                        count = conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                        results['tables'][table] = {'exists': True, 'rows': count}
                        print(f"  {Colors.GREEN}‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π{Colors.ENDC}")
                else:
                    results['tables'][table] = {'exists': False, 'rows': 0}
                    self.warnings.append(f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç{Colors.ENDC}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            import time
            start_time = time.time()
            with engine.connect() as conn:
                for _ in range(10):
                    conn.execute(text("SELECT * FROM bot_state LIMIT 1"))
            query_time = (time.time() - start_time) / 10
            results['performance']['avg_query_time'] = query_time
            print(f"  {Colors.CYAN}‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {query_time:.3f}—Å{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}{Colors.ENDC}")
        
        return results
    
    async def test_bybit_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        - Rate limits
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit{Colors.ENDC}")
        results = {
            'connection': False,
            'authentication': False,
            'market_data': {},
            'account_data': {},
            'rate_limit': {}
        }
        
        exchange = None
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit
            exchange = ccxt.bybit({
                'apiKey': os.getenv('BYBIT_API_KEY'),
                'secret': os.getenv('BYBIT_API_SECRET'),
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot'
                }
            })
            
            # Testnet —Ä–µ–∂–∏–º
            if os.getenv('BYBIT_TESTNET', 'true').lower() == 'true':
                exchange.set_sandbox_mode(True)
                print(f"  {Colors.YELLOW}üß™ –†–µ–∂–∏–º Testnet –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω{Colors.ENDC}")
            
            # –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
            markets = await exchange.load_markets()
            results['connection'] = True
            results['market_data']['markets_count'] = len(markets)
            print(f"  {Colors.GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤{Colors.ENDC}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
            ticker = await exchange.fetch_ticker('BTC/USDT')
            results['market_data']['btc_price'] = ticker['last']
            print(f"  {Colors.GREEN}‚úÖ BTC/USDT —Ü–µ–Ω–∞: ${ticker['last']:,.2f}{Colors.ENDC}")
            
            # –¢–µ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏)
            if os.getenv('BYBIT_API_KEY') and os.getenv('BYBIT_API_SECRET'):
                try:
                    balance = await exchange.fetch_balance()
                    results['authentication'] = True
                    results['account_data']['balances'] = {
                        currency: bal for currency, bal in balance['total'].items() 
                        if bal > 0
                    }
                    print(f"  {Colors.GREEN}‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞{Colors.ENDC}")
                    
                    # –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–æ–≤
                    for currency, amount in results['account_data']['balances'].items():
                        print(f"    üí∞ {currency}: {amount}")
                        
                except Exception as e:
                    self.warnings.append(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limits
            if hasattr(exchange, 'last_response_headers'):
                rate_limit = exchange.last_response_headers.get('X-RateLimit-Limit', 'N/A')
                rate_remaining = exchange.last_response_headers.get('X-RateLimit-Remaining', 'N/A')
                results['rate_limit'] = {
                    'limit': rate_limit,
                    'remaining': rate_remaining
                }
                print(f"  {Colors.CYAN}üìä Rate limit: {rate_remaining}/{rate_limit}{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ Bybit: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}{Colors.ENDC}")
            traceback.print_exc()
        finally:
            if exchange:
                await exchange.close()
        
        return results
    
    async def test_core_modules(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
        - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 4: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏{Colors.ENDC}")
        results = {
            'modules': {},
            'classes': {}
        }
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_modules = [
            ('src.core.database', 'Database'),
            ('src.core.base_models', 'BotState'),
            ('src.bot.manager', 'BotManager'),
            ('src.risk.enhanced_risk_manager', 'EnhancedRiskManager'),
            ('src.ml.strategy_selector', 'StrategySelector'),
        ]
        
        for module_name, class_name in test_modules:
            try:
                # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
                module = __import__(module_name, fromlist=[class_name])
                results['modules'][module_name] = 'imported'
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞
                if hasattr(module, class_name):
                    cls = getattr(module, class_name)
                    results['classes'][class_name] = 'found'
                    print(f"  {Colors.GREEN}‚úÖ {module_name}.{class_name}{Colors.ENDC}")
                else:
                    results['classes'][class_name] = 'not_found'
                    self.warnings.append(f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_name}")
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è  {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_name}{Colors.ENDC}")
                    
            except Exception as e:
                results['modules'][module_name] = f'error: {str(e)}'
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {str(e)}")
                print(f"  {Colors.RED}‚ùå {module_name}: {e}{Colors.ENDC}")
        
        return results
    
    async def test_trading_logic(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        - –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        - –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 5: –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞{Colors.ENDC}")
        results = {
            'signal_generation': {},
            'risk_management': {},
            'order_execution': {}
        }
        
        try:
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            from src.ml.strategy_selector import StrategySelector
            selector = StrategySelector()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            mock_data = {
                'symbol': 'BTC/USDT',
                'price': 50000,
                'volume': 1000,
                'rsi': 45,
                'macd': {'macd': 100, 'signal': 90, 'histogram': 10},
                'bollinger': {'upper': 51000, 'middle': 50000, 'lower': 49000}
            }
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            results['signal_generation']['test'] = 'passed'
            print(f"  {Colors.GREEN}‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç{Colors.ENDC}")
            
            # –¢–µ—Å—Ç —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            from src.risk.enhanced_risk_manager import EnhancedRiskManager
            risk_manager = EnhancedRiskManager({
                'MAX_POSITION_SIZE_PERCENT': 5,
                'STOP_LOSS_PERCENT': 2,
                'TAKE_PROFIT_PERCENT': 4
            })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = risk_manager.calculate_position_size(
                balance=10000,
                risk_percent=1,
                stop_loss_percent=2
            )
            
            results['risk_management']['position_size'] = position_size
            print(f"  {Colors.GREEN}‚úÖ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        
        return results
    
    async def test_web_interface(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        –í–∞–ª–∏–¥–∞—Ü–∏—è:
        - Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        - API endpoints
        - WebSocket —Å–µ—Ä–≤–µ—Ä
        """
        print(f"\n{Colors.BOLD}{Colors.CYAN}üîç –¢–µ—Å—Ç 6: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å{Colors.ENDC}")
        results = {
            'flask_app': False,
            'endpoints': {},
            'websocket': False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            from src.web.app import create_app
            app = create_app()
            results['flask_app'] = True
            print(f"  {Colors.GREEN}‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ{Colors.ENDC}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
            test_client = app.test_client()
            endpoints = ['/', '/api/status', '/api/trades', '/api/signals']
            
            for endpoint in endpoints:
                try:
                    response = test_client.get(endpoint)
                    results['endpoints'][endpoint] = response.status_code
                    status_icon = "‚úÖ" if response.status_code < 400 else "‚ö†Ô∏è"
                    print(f"  {status_icon} {endpoint}: {response.status_code}")
                except Exception as e:
                    results['endpoints'][endpoint] = f"error: {str(e)}"
                    print(f"  {Colors.RED}‚ùå {endpoint}: {e}{Colors.ENDC}")
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")
            print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        
        return results
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print(f"\n{Colors.BOLD}{Colors.BLUE}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢{Colors.ENDC}")
        print("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_errors = len(self.errors)
        total_warnings = len(self.warnings)
        
        if total_errors == 0:
            print(f"{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.ENDC}")
        else:
            print(f"{Colors.RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_errors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫{Colors.ENDC}")
        
        if total_warnings > 0:
            print(f"{Colors.YELLOW}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π{Colors.ENDC}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if self.errors:
            print(f"\n{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:{Colors.ENDC}")
            for i, error in enumerate(self.errors, 1):
                print(f"  {i}. {error}")
        
        if self.warnings:
            print(f"\n{Colors.YELLOW}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:{Colors.ENDC}")
            for i, warning in enumerate(self.warnings, 1):
                print(f"  {i}. {warning}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'errors': self.errors,
            'warnings': self.warnings,
            'test_results': self.test_results
        }
        
        with open('test_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\n{Colors.CYAN}üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.json{Colors.ENDC}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{Colors.BOLD}{Colors.CYAN}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.ENDC}")
        
        if total_errors == 0:
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: python main.py --test")
            print("2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print("3. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º")
            print("4. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã")
        else:
            print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        
        return total_errors == 0
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"{Colors.BOLD}{Colors.MAGENTA}üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´{Colors.ENDC}")
        print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_results['environment'] = await self.test_environment()
        self.test_results['database'] = await self.test_database_connection()
        self.test_results['bybit'] = await self.test_bybit_connection()
        self.test_results['modules'] = await self.test_core_modules()
        self.test_results['trading'] = await self.test_trading_logic()
        self.test_results['web'] = await self.test_web_interface()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        success = await self.generate_report()
        
        return success

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SystemTester()
    success = await tester.run_all_tests()
    
    if success:
        print(f"\n{Colors.BOLD}{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.ENDC}")
        sys.exit(0)
    else:
        print(f"\n{Colors.BOLD}{Colors.RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(main())