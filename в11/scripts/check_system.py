
"""–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
import sys
import os
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

from src.core.config import config
from src.core.database import engine

def check_system():
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    errors = []
    warnings = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    if config.BYBIT_API_KEY and config.BYBIT_API_KEY != 'your_testnet_api_key_here':
        print("   ‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        errors.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    print(f"   üìä –†–µ–∂–∏–º: {'TESTNET' if config.BYBIT_TESTNET else 'MAINNET'}")
    print(f"   üí± –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {', '.join(config.TRADING_PAIRS)}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    print("\n2Ô∏è‚É£ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
    try:
        with engine.connect() as conn:
            result = conn.execute("SELECT 1")
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\n3Ô∏è‚É£ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    required_packages = [
        'fastapi', 'uvicorn', 'ccxt', 'pandas', 
        'sqlalchemy', 'redis', 'telegram'
    ]
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            errors.append(f"{package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    if errors:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        return False
    else:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        return True

if __name__ == "__main__":
    if not check_system():
        sys.exit(1)