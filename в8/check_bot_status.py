#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""
import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/www/www-root/data/www/systemetech.ru')

from src.core.database import SessionLocal
from src.core.models import Trade, Signal, BotState, TradingPair
from src.core.bot_manager import bot_manager

load_dotenv()

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê")
    print("=" * 50)
    
    # 1. –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    status = bot_manager.get_status()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    print(f"   –ó–∞–ø—É—â–µ–Ω: {'‚úÖ –î–∞' if status['is_running'] else '‚ùå –ù–µ—Ç'}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(status['active_pairs'])}")
    print(f"   –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {status['open_positions']}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    db = SessionLocal()
    try:
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        bot_state = db.query(BotState).first()
        if bot_state:
            print(f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î:")
            print(f"   –ó–∞–ø—É—â–µ–Ω: {'‚úÖ –î–∞' if bot_state.is_running else '‚ùå –ù–µ—Ç'}")
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {bot_state.start_time}")
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {bot_state.total_trades}")
            print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {bot_state.profitable_trades}")
            print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${bot_state.total_profit:.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${bot_state.current_balance:.2f}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        active_pairs = db.query(TradingPair).filter(TradingPair.is_active == True).all()
        print(f"\nüí± –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã ({len(active_pairs)}):")
        for pair in active_pairs:
            print(f"   - {pair.symbol} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {pair.strategy})")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        recent_signals = db.query(Signal).order_by(Signal.created_at.desc()).limit(5).all()
        print(f"\nüì° –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã ({len(recent_signals)}):")
        for signal in recent_signals:
            time_ago = datetime.utcnow() - signal.created_at
            print(f"   - {signal.created_at.strftime('%H:%M:%S')} ({int(time_ago.total_seconds()/60)}–º –Ω–∞–∑–∞–¥): "
                  f"{signal.symbol} {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        open_trades = db.query(Trade).filter(Trade.status == 'OPEN').all()
        print(f"\nüíº –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(open_trades)}):")
        for trade in open_trades:
            print(f"   - {trade.symbol} {trade.side} @ ${trade.entry_price:.2f} "
                  f"(–∫–æ–ª-–≤–æ: {trade.quantity:.4f})")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        closed_trades = db.query(Trade).filter(
            Trade.status == 'CLOSED'
        ).order_by(Trade.closed_at.desc()).limit(5).all()
        
        print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ ({len(closed_trades)}):")
        for trade in closed_trades:
            if trade.closed_at:
                time_ago = datetime.utcnow() - trade.closed_at
                print(f"   - {trade.closed_at.strftime('%H:%M:%S')} ({int(time_ago.total_seconds()/60)}–º –Ω–∞–∑–∞–¥): "
                      f"{trade.symbol} P&L: ${trade.profit:.2f}")
        
    finally:
        db.close()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö:")
    try:
        with open('/var/www/www-root/data/www/systemetech.ru/logs/trading.log', 'r') as f:
            lines = f.readlines()
            for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                print(f"   {line.strip()}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def test_bot_cycle():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüß™ –¢–ï–°–¢ –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
    if not bot_manager.is_running:
        print("‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ü–∏–∫–ª...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        bot_manager._load_state()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
        if bot_manager.active_pairs:
            symbol = bot_manager.active_pairs[0]
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {symbol}...")
            
            try:
                signal = await bot_manager._analyze_pair(symbol)
                if signal:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
                else:
                    print("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω (WAIT)")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        print("‚ÑπÔ∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    check_bot_status()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    print("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞? (y/n): ", end='')
    if input().lower() == 'y':
        asyncio.run(test_bot_cycle())