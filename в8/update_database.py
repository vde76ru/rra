#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—è
"""

import os
import sys
import pymysql
from dotenv import load_dotenv
from sqlalchemy import text

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_NAME = os.getenv('DB_NAME', 'crypto_top_bd_mysql')
DB_USER = os.getenv('DB_USER', 'crypto_top_admin')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'LSM6_PqnuZ10nvEdzfe6')

print("üî® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
print("=" * 50)

try:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
    connection = pymysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        charset='utf8mb4'
    )
    
    cursor = connection.cursor()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
    
    # –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    updates = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É trades
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã trades...")
    cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = %s AND TABLE_NAME = 'trades'
    """, (DB_NAME,))
    
    existing_columns = [row[0] for row in cursor.fetchall()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    if 'stop_loss' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN stop_loss FLOAT")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ stop_loss –≤ trades")
    
    if 'take_profit' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN take_profit FLOAT")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ take_profit –≤ trades")
    
    if 'profit_percent' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN profit_percent FLOAT")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ profit_percent –≤ trades")
    
    if 'trailing_stop' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN trailing_stop BOOLEAN DEFAULT FALSE")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ trailing_stop –≤ trades")
    
    if 'commission' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN commission FLOAT DEFAULT 0")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ commission –≤ trades")
    
    if 'notes' not in existing_columns:
        cursor.execute("ALTER TABLE trades ADD COLUMN notes TEXT")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ notes –≤ trades")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É signals
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã signals...")
    cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = %s AND TABLE_NAME = 'signals'
    """, (DB_NAME,))
    
    signal_columns = [row[0] for row in cursor.fetchall()]
    
    if signal_columns:  # –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'stop_loss' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN stop_loss FLOAT")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ stop_loss –≤ signals")
        
        if 'take_profit' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN take_profit FLOAT")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ take_profit –≤ signals")
        
        if 'strategy' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN strategy VARCHAR(50)")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ strategy –≤ signals")
        
        if 'reason' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN reason TEXT")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ reason –≤ signals")
        
        if 'executed_at' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN executed_at TIMESTAMP NULL")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ executed_at –≤ signals")
        
        if 'trade_id' not in signal_columns:
            cursor.execute("ALTER TABLE signals ADD COLUMN trade_id INT")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ trade_id –≤ signals")
    
    # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É bot_state –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã bot_state...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bot_state (
            id INT AUTO_INCREMENT PRIMARY KEY,
            is_running BOOLEAN DEFAULT FALSE,
            start_time TIMESTAMP NULL,
            stop_time TIMESTAMP NULL,
            total_trades INT DEFAULT 0,
            profitable_trades INT DEFAULT 0,
            total_profit FLOAT DEFAULT 0,
            current_balance FLOAT DEFAULT 0,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            INDEX idx_updated_at (updated_at)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    """)
    updates.append("‚úÖ –°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ bot_state")
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users...")
    cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = %s AND TABLE_NAME = 'users'
    """, (DB_NAME,))
    
    user_columns = [row[0] for row in cursor.fetchall()]
    
    if user_columns:
        if 'email' not in user_columns:
            cursor.execute("ALTER TABLE users ADD COLUMN email VARCHAR(100)")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ email –≤ users")
        
        if 'is_admin' not in user_columns:
            cursor.execute("ALTER TABLE users ADD COLUMN is_admin BOOLEAN DEFAULT FALSE")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ is_admin –≤ users")
    
    # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É trading_pairs
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã trading_pairs...")
    cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = %s AND TABLE_NAME = 'trading_pairs'
    """, (DB_NAME,))
    
    pair_columns = [row[0] for row in cursor.fetchall()]
    
    if pair_columns:
        if 'stop_loss_percent' not in pair_columns:
            cursor.execute("ALTER TABLE trading_pairs ADD COLUMN stop_loss_percent FLOAT DEFAULT 2.0")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ stop_loss_percent –≤ trading_pairs")
        
        if 'take_profit_percent' not in pair_columns:
            cursor.execute("ALTER TABLE trading_pairs ADD COLUMN take_profit_percent FLOAT DEFAULT 4.0")
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ take_profit_percent –≤ trading_pairs")
        
        if 'updated_at' not in pair_columns:
            cursor.execute("""
                ALTER TABLE trading_pairs 
                ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            """)
            updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at –≤ trading_pairs")
    
    # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É bot_settings
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã bot_settings...")
    cursor.execute("""
        SELECT COLUMN_NAME 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = %s AND TABLE_NAME = 'bot_settings'
    """, (DB_NAME,))
    
    settings_columns = [row[0] for row in cursor.fetchall()]
    
    if settings_columns and 'description' not in settings_columns:
        cursor.execute("ALTER TABLE bot_settings ADD COLUMN description TEXT")
        updates.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ description –≤ bot_settings")
    
    # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    def create_index_if_not_exists(table, index_name, columns):
        cursor.execute(f"""
            SELECT COUNT(1) 
            FROM INFORMATION_SCHEMA.STATISTICS 
            WHERE table_schema = '{DB_NAME}' 
            AND table_name = '{table}' 
            AND index_name = '{index_name}'
        """)
        if cursor.fetchone()[0] == 0:
            cursor.execute(f"CREATE INDEX {index_name} ON {table} ({columns})")
            updates.append(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å {index_name} –Ω–∞ {table}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    create_index_if_not_exists('trades', 'idx_closed_at', 'closed_at')
    create_index_if_not_exists('signals', 'idx_executed', 'executed')
    create_index_if_not_exists('signals', 'idx_strategy', 'strategy')
    create_index_if_not_exists('balances', 'idx_currency_timestamp', 'currency, timestamp')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    connection.commit()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    if updates:
        print(f"\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
        for update in updates:
            print(f"   {update}")
    else:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î:")
    cursor.execute("SHOW TABLES")
    tables = cursor.fetchall()
    print(f"–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
    for table in tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table[0]}")
        count = cursor.fetchone()[0]
        print(f"   - {table[0]}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    connection.close()
    print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    
except pymysql.Error as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ MySQL: {e}")
    sys.exit(1)
except Exception as e:
    print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)