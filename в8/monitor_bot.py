#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import os
import sys
import time
import subprocess
from datetime import datetime
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    os.system('clear' if os.name == 'posix' else 'cls')

def get_last_lines(filename, n=20):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ n —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        result = subprocess.run(['tail', '-n', str(n), filename], 
                              capture_output=True, text=True)
        return result.stdout.splitlines()
    except:
        try:
            with open(filename, 'r') as f:
                lines = f.readlines()
                return [line.strip() for line in lines[-n:]]
        except:
            return []

def colorize_log_line(line):
    """–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    if 'ERROR' in line or '‚ùå' in line:
        return f"{Fore.RED}{line}{Style.RESET_ALL}"
    elif 'WARNING' in line or '‚ö†Ô∏è' in line:
        return f"{Fore.YELLOW}{line}{Style.RESET_ALL}"
    elif 'INFO' in line and ('‚úÖ' in line or 'üéØ' in line or '—Å–∏–≥–Ω–∞–ª' in line.lower()):
        return f"{Fore.GREEN}{line}{Style.RESET_ALL}"
    elif 'üîÑ' in line or '–¶–∏–∫–ª #' in line:
        return f"{Fore.CYAN}{line}{Style.RESET_ALL}"
    elif 'üìä' in line or 'üíº' in line or 'üìà' in line:
        return f"{Fore.BLUE}{line}{Style.RESET_ALL}"
    else:
        return line

def get_process_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    processes = {
        'app.py': False,
        'main.py': False
    }
    
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        for line in result.stdout.splitlines():
            if 'python' in line:
                if 'app.py' in line:
                    processes['app.py'] = True
                elif 'main.py' in line and 'main_simple' not in line:
                    processes['main.py'] = True
    except:
        pass
    
    return processes

def monitor():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    log_file = '/var/www/www-root/data/www/systemetech.ru/logs/trading.log'
    web_log_file = '/var/www/www-root/data/www/systemetech.ru/logs/web.log'
    
    print(f"{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì CRYPTO TRADING BOT - –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
    print()
    
    while True:
        clear_screen()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"{Fore.CYAN}ü§ñ CRYPTO BOT MONITOR | {current_time}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        processes = get_process_status()
        print(f"\n{Fore.YELLOW}üìä –°–¢–ê–¢–£–° –ü–†–û–¶–ï–°–°–û–í:{Style.RESET_ALL}")
        print(f"   Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (app.py): {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if processes['app.py'] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç (main.py): {'‚úÖ –ó–∞–ø—É—â–µ–Ω' if processes['main.py'] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞
        print(f"\n{Fore.YELLOW}üìã –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –ë–û–¢–ê:{Style.RESET_ALL}")
        bot_logs = get_last_lines(log_file, 15)
        if bot_logs:
            for line in bot_logs:
                print(f"   {colorize_log_line(line)}")
        else:
            print(f"   {Fore.RED}–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã{Style.RESET_ALL}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        print(f"\n{Fore.YELLOW}üåê –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê:{Style.RESET_ALL}")
        web_logs = get_last_lines(web_log_file, 5)
        if web_logs:
            for line in web_logs:
                print(f"   {colorize_log_line(line)}")
        else:
            print(f"   {Fore.BLUE}–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏{Style.RESET_ALL}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ª–æ–≥–æ–≤
        print(f"\n{Fore.YELLOW}üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:{Style.RESET_ALL}")
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥–∞—Ö
        if bot_logs:
            cycles = sum(1 for line in bot_logs if '–¶–∏–∫–ª #' in line)
            signals = sum(1 for line in bot_logs if '—Å–∏–≥–Ω–∞–ª' in line.lower() and 'WAIT' not in line)
            errors = sum(1 for line in bot_logs if 'ERROR' in line or '‚ùå' in line)
            
            print(f"   –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {cycles}")
            print(f"   –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {signals}")
            print(f"   –û—à–∏–±–æ–∫: {errors}")
        
        print(f"\n{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞{Style.RESET_ALL}")
        
        time.sleep(3)

if __name__ == "__main__":
    try:
        monitor()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        sys.exit(1)