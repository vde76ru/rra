"""
ORDER EXECUTION ENGINE - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–§–∞–π–ª: src/exchange/execution_engine.py

üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –∏–∑ core
‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å try/except
‚úÖ Fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
"""
import asyncio
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import logging

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´
try:
    from ..core.database import SessionLocal
    from ..core.models import Trade, TradeStatus, OrderSide, Signal, SignalAction
    CORE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å core –º–æ–¥—É–ª–∏ –≤ execution_engine: {e}")
    SessionLocal = None
    Trade = TradeStatus = OrderSide = Signal = SignalAction = None
    CORE_AVAILABLE = False

try:
    from ..strategies.base import TradingSignal
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è TradingSignal
    @dataclass
    class TradingSignal:
        symbol: str
        action: str
        confidence: float
        price: float = 0.0
        strategy: str = "unknown"

try:
    from ..risk.enhanced_risk_manager import get_risk_manager
except ImportError:
    def get_risk_manager():
        return None

try:
    from ..logging.smart_logger import get_logger
    logger = get_logger(__name__)
except ImportError:
    import logging
    logger = logging.getLogger(__name__)

try:
    from .real_client import get_real_exchange_client
except ImportError:
    def get_real_exchange_client():
        return None

try:
    from .position_manager import get_position_manager, PositionInfo
except ImportError:
    def get_position_manager():
        return None
    
    @dataclass
    class PositionInfo:
        symbol: str
        side: str
        size: float
        entry_price: float
        unrealized_pnl: float
        percentage: float
        value: float

class ExecutionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    PENDING = "pending"
    VALIDATING = "validating"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"
    REJECTED = "rejected"

@dataclass
class ExecutionRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    signal: TradingSignal
    strategy_name: str
    confidence: float
    market_conditions: Dict[str, Any]
    risk_params: Dict[str, Any]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–µ –ø–æ–ª—è
    quantity: Optional[float] = None
    expected_slippage: Optional[float] = None
    execution_priority: int = 1  # 1-–Ω–∏–∑–∫–∏–π, 5-–≤—ã—Å–æ–∫–∏–π
    
@dataclass
class ExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    request: ExecutionRequest
    status: ExecutionStatus
    order_id: Optional[str] = None
    trade_id: Optional[int] = None
    executed_price: Optional[float] = None
    executed_quantity: Optional[float] = None
    slippage: Optional[float] = None
    error_message: Optional[str] = None
    execution_time: Optional[datetime] = None

class OrderExecutionEngine:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    üî• –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò:
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –°–ò–ì–ù–ê–õ –û–¢     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  –í–ê–õ–ò–î–ê–¶–ò–Ø       ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –ò–°–ü–û–õ–ù–ï–ù–ò–ï    ‚îÇ
    ‚îÇ   –°–¢–†–ê–¢–ï–ì–ò–ò     ‚îÇ    ‚îÇ  –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ï–†   ‚îÇ    ‚îÇ   –ù–ê –ë–ò–†–ñ–ï      ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚îÇ                        ‚îÇ                        ‚îÇ
             ‚ñº                        ‚ñº                        ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –†–ê–°–ß–ï–¢        ‚îÇ    ‚îÇ   –ü–†–û–í–ï–†–ö–ê       ‚îÇ    ‚îÇ   –ú–û–ù–ò–¢–û–†–ò–ù–ì    ‚îÇ
    ‚îÇ   –ü–û–ó–ò–¶–ò–ò       ‚îÇ    ‚îÇ   –õ–ò–ö–í–ò–î–ù–û–°–¢–ò    ‚îÇ    ‚îÇ   –ü–û–ó–ò–¶–ò–ò       ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self, max_concurrent_executions: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            max_concurrent_executions: –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
        """
        self.exchange = get_real_exchange_client()
        self.risk_manager = get_risk_manager()
        self.position_manager = get_position_manager()
        
        self.max_concurrent_executions = max_concurrent_executions
        self.execution_queue: asyncio.Queue = asyncio.Queue()
        self.active_executions: Dict[str, ExecutionRequest] = {}
        self.execution_history: List[ExecutionResult] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_executions = 0
        self.successful_executions = 0
        self.failed_executions = 0
        self.average_execution_time = 0.0
        self.emergency_stop = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_settings = {
            'min_confidence': 0.6,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            'max_slippage': 0.005,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (0.5%)
            'min_volume_ratio': 0.01,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'max_position_correlation': 0.7  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        }
        
        logger.info(
            "üè≠ OrderExecutionEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            category='execution',
            max_concurrent=max_concurrent_executions,
            exchange_available=bool(self.exchange),
            risk_manager_available=bool(self.risk_manager),
            position_manager_available=bool(self.position_manager)
        )
    
    async def execute_signal(self, signal: TradingSignal, strategy_name: str, 
                           market_conditions: Dict[str, Any]) -> ExecutionResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω:
        1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        2. –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        4. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        """
        execution_start = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        if self.emergency_stop:
            return ExecutionResult(
                request=ExecutionRequest(
                    signal=signal,
                    strategy_name=strategy_name,
                    confidence=signal.confidence,
                    market_conditions=market_conditions,
                    risk_params={}
                ),
                status=ExecutionStatus.REJECTED,
                error_message="Emergency stop activated"
            )
        
        logger.info(
            f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol} {signal.action}",
            category='execution',
            symbol=signal.symbol,
            action=signal.action,
            confidence=signal.confidence,
            strategy=strategy_name
        )
        
        try:
            # 1. –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–ê
            validation_result = await self._validate_signal(signal, market_conditions)
            if not validation_result['valid']:
                return ExecutionResult(
                    request=ExecutionRequest(
                        signal=signal,
                        strategy_name=strategy_name,
                        confidence=signal.confidence,
                        market_conditions=market_conditions,
                        risk_params={}
                    ),
                    status=ExecutionStatus.REJECTED,
                    error_message=validation_result['reason']
                )
            
            # 2. –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò
            risk_params = await self._calculate_risk_parameters(signal, market_conditions)
            
            execution_request = ExecutionRequest(
                signal=signal,
                strategy_name=strategy_name,
                confidence=signal.confidence,
                market_conditions=market_conditions,
                risk_params=risk_params,
                quantity=risk_params.get('position_size', 0.0),
                expected_slippage=risk_params.get('expected_slippage', 0.0)
            )
            
            # 3. –ü–†–û–í–ï–†–ö–ê –õ–ò–ö–í–ò–î–ù–û–°–¢–ò
            liquidity_check = await self._check_liquidity(execution_request)
            if not liquidity_check['sufficient']:
                return ExecutionResult(
                    request=execution_request,
                    status=ExecutionStatus.REJECTED,
                    error_message=f"Insufficient liquidity: {liquidity_check['reason']}"
                )
            
            # 4. –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–ê
            execution_result = await self._execute_order(execution_request)
            
            # 5. –ó–ê–ü–ò–°–¨ –í –ë–î
            if execution_result.status == ExecutionStatus.COMPLETED:
                await self._save_trade_to_db(execution_result)
            
            # 6. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
            execution_time = (datetime.utcnow() - execution_start).total_seconds()
            await self._update_execution_stats(execution_result, execution_time)
            
            return execution_result
            
        except Exception as e:
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}: {e}",
                category='execution'
            )
            
            return ExecutionResult(
                request=ExecutionRequest(
                    signal=signal,
                    strategy_name=strategy_name,
                    confidence=signal.confidence,
                    market_conditions=market_conditions,
                    risk_params={}
                ),
                status=ExecutionStatus.FAILED,
                error_message=str(e)
            )
    
    async def _validate_signal(self, signal: TradingSignal, 
                             market_conditions: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if signal.confidence < self.validation_settings['min_confidence']:
            return {
                'valid': False,
                'reason': f"Low confidence: {signal.confidence} < {self.validation_settings['min_confidence']}"
            }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        if self.risk_manager:
            try:
                risk_check = self.risk_manager.validate_signal(signal, market_conditions)
                if not risk_check.get('approved', True):
                    return {
                        'valid': False,
                        'reason': f"Risk manager rejection: {risk_check.get('reason', 'Unknown')}"
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        if self.position_manager:
            try:
                correlation_check = await self._check_position_correlation(signal)
                if correlation_check['high_correlation']:
                    return {
                        'valid': False,
                        'reason': f"High correlation with existing positions: {correlation_check['correlation']}"
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
        
        return {'valid': True}
    
    async def _calculate_risk_parameters(self, signal: TradingSignal, 
                                       market_conditions: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        
        default_params = {
            'position_size': 0.01,
            'stop_loss': 0.02,  # 2%
            'take_profit': 0.04,  # 4%
            'expected_slippage': 0.001,  # 0.1%
            'max_risk_per_trade': 0.02  # 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
        }
        
        if self.risk_manager:
            try:
                risk_params = self.risk_manager.calculate_position_size(
                    signal, market_conditions
                )
                if risk_params:
                    return risk_params
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        
        return default_params
    
    async def _check_liquidity(self, request: ExecutionRequest) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
        
        if not self.exchange:
            return {'sufficient': True, 'reason': 'Exchange not available for check'}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
            orderbook = await self.exchange.fetch_order_book(request.signal.symbol)
            
            if not orderbook or not orderbook.get('bids') or not orderbook.get('asks'):
                return {'sufficient': False, 'reason': 'Empty orderbook'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            side = 'asks' if request.signal.action in ['BUY', 'LONG'] else 'bids'
            available_volume = sum([price_level[1] for price_level in orderbook[side][:5]])
            
            if available_volume < request.quantity * 10:  # 10x –∑–∞–ø–∞—Å
                return {
                    'sufficient': False,
                    'reason': f'Low liquidity: {available_volume} < {request.quantity * 10}'
                }
            
            return {'sufficient': True}
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return {'sufficient': True, 'reason': 'Check failed, proceeding'}
    
    async def _check_position_correlation(self, signal: TradingSignal) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        
        if not self.position_manager:
            return {'high_correlation': False}
        
        try:
            open_positions = await self.position_manager.get_all_positions()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã
            for position in open_positions:
                if position.symbol == signal.symbol:
                    return {
                        'high_correlation': True,
                        'correlation': 1.0,
                        'reason': f'Same symbol already in position: {position.symbol}'
                    }
            
            return {'high_correlation': False}
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {'high_correlation': False}
    
    async def _execute_order(self, request: ExecutionRequest) -> ExecutionResult:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ"""
        
        if not self.exchange:
            # –ï—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.warning("‚ö†Ô∏è Exchange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.COMPLETED,
                order_id="mock_order_123",
                executed_price=request.signal.price,
                executed_quantity=request.quantity,
                slippage=0.001,
                execution_time=datetime.utcnow()
            )
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
            side = 'buy' if request.signal.action in ['BUY', 'LONG'] else 'sell'
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order_result = await self.exchange.create_order(
                symbol=request.signal.symbol,
                type='market',  # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                side=side,
                amount=request.quantity,
                price=None  # –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            )
            
            if order_result and order_result.get('id'):
                # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                order_status = await self.exchange.fetch_order(
                    order_result['id'], 
                    request.signal.symbol
                )
                
                if order_status.get('status') == 'closed':
                    executed_price = float(order_status.get('average', request.signal.price))
                    executed_quantity = float(order_status.get('filled', request.quantity))
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                    slippage = abs(executed_price - request.signal.price) / request.signal.price
                    
                    return ExecutionResult(
                        request=request,
                        status=ExecutionStatus.COMPLETED,
                        order_id=order_result['id'],
                        executed_price=executed_price,
                        executed_quantity=executed_quantity,
                        slippage=slippage,
                        execution_time=datetime.utcnow()
                    )
                else:
                    return ExecutionResult(
                        request=request,
                        status=ExecutionStatus.FAILED,
                        order_id=order_result['id'],
                        error_message=f"Order not filled: {order_status.get('status')}"
                    )
            else:
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.FAILED,
                    error_message="Failed to create order"
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=str(e)
            )
    
    async def _save_trade_to_db(self, result: ExecutionResult):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        if not CORE_AVAILABLE or not Trade or not SessionLocal:
            logger.warning("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏")
            return
        
        try:
            db = SessionLocal()
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
                if OrderSide:
                    side = OrderSide.BUY if result.request.signal.action in ['BUY', 'LONG'] else OrderSide.SELL
                else:
                    side = 'BUY' if result.request.signal.action in ['BUY', 'LONG'] else 'SELL'
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
                trade = Trade(
                    symbol=result.request.signal.symbol,
                    side=side,
                    quantity=result.executed_quantity or 0,
                    price=result.executed_price or 0,
                    strategy=result.request.strategy_name,
                    status=TradeStatus.OPEN if TradeStatus else 'OPEN',
                    created_at=datetime.utcnow(),
                    exchange_order_id=result.order_id,
                    slippage=result.slippage,
                    confidence=result.request.confidence
                )
                
                db.add(trade)
                db.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å ID —Å–¥–µ–ª–∫–∏
                result.trade_id = trade.id
                
                logger.info(
                    f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {trade.id}",
                    category='execution',
                    trade_id=trade.id,
                    symbol=trade.symbol,
                    side=trade.side
                )
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–î: {e}")
    
    async def _update_execution_stats(self, result: ExecutionResult, execution_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        self.total_executions += 1
        
        if result.status == ExecutionStatus.COMPLETED:
            self.successful_executions += 1
        else:
            self.failed_executions += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.total_executions > 1:
            self.average_execution_time = (
                (self.average_execution_time * (self.total_executions - 1) + execution_time) 
                / self.total_executions
            )
        else:
            self.average_execution_time = execution_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
        self.execution_history.append(result)
        if len(self.execution_history) > 1000:
            self.execution_history = self.execution_history[-500:]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500
        
        logger.info(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {self.successful_executions}/{self.total_executions}",
            category='execution',
            success_rate=self.successful_executions / self.total_executions,
            avg_execution_time=self.average_execution_time
        )
    
    def get_execution_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"""
        
        if self.total_executions == 0:
            return {
                'total_executions': 0,
                'success_rate': 0.0,
                'failure_rate': 0.0,
                'avg_execution_time_seconds': 0.0,
                'emergency_stop': self.emergency_stop
            }
        
        success_rate = self.successful_executions / self.total_executions
        failure_rate = self.failed_executions / self.total_executions
        
        return {
            'total_executions': self.total_executions,
            'successful_executions': self.successful_executions,
            'failed_executions': self.failed_executions,
            'success_rate': success_rate,
            'failure_rate': failure_rate,
            'avg_execution_time_seconds': self.average_execution_time,
            'emergency_stop': self.emergency_stop
        }
    
    def activate_emergency_stop(self, reason: str = "Manual activation"):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.emergency_stop = True
        
        logger.critical(
            f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê: {reason}",
            category='execution'
        )
    
    def deactivate_emergency_stop(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.emergency_stop = False
        
        logger.info(
            "‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            category='execution'
        )
    
    async def close_all_positions_emergency(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            self.activate_emergency_stop("Emergency close all positions")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Position Manager
            if self.position_manager:
                success = await self.position_manager.emergency_close_all()
            else:
                logger.warning("‚ö†Ô∏è Position Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                success = False
            
            if success:
                logger.critical(
                    "üö® –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã",
                    category='execution'
                )
            else:
                logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π",
                    category='execution'
                )
            
            return success
            
        except Exception as e:
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ó–ê–ö–†–´–¢–ò–Ø: {e}")
            return False

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
execution_engine = None

def get_execution_engine() -> OrderExecutionEngine:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    global execution_engine
    
    if execution_engine is None:
        execution_engine = OrderExecutionEngine()
    
    return execution_engine

def create_execution_engine(**kwargs) -> OrderExecutionEngine:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return OrderExecutionEngine(**kwargs)

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'OrderExecutionEngine',
    'ExecutionRequest',
    'ExecutionResult', 
    'ExecutionStatus',
    'get_execution_engine',
    'create_execution_engine'
]