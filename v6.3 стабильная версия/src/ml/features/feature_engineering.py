"""
Feature Engineering –¥–ª—è ML –º–æ–¥–µ–ª–µ–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ - –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø
–§–∞–π–ª: src/ml/features/feature_engineering.py

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏
"""
import numpy as np
import pandas as pd
import pandas_ta as ta
from typing import Dict, List, Tuple, Optional, Any
from datetime import datetime, timedelta
import asyncio
import logging
from sqlalchemy.orm import Session

from ...core.database import SessionLocal
from ...core.models import Candle, MarketCondition, Signal, Trade
from ...core.config import Config
from ...indicators.technical_indicators import TechnicalIndicators

logger = logging.getLogger(__name__)


class FeatureEngineer:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–µ–π
    –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫
    """
    
    def __init__(self):
        self.tech_indicators = TechnicalIndicators()
        
        # –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.price_features = [
            'open', 'high', 'low', 'close', 'volume',
            'price_change', 'price_change_pct', 'volume_change_pct'
        ]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self.technical_features = [
            'rsi', 'macd', 'macd_signal', 'macd_hist',
            'bb_upper', 'bb_middle', 'bb_lower', 'bb_width', 'bb_percent',
            'ema_9', 'ema_21', 'ema_50', 'ema_200',
            'atr', 'adx', 'obv', 'vwap'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
        self.candle_patterns = [
            'doji', 'hammer', 'inverted_hammer', 'bullish_engulfing',
            'bearish_engulfing', 'morning_star', 'evening_star',
            'three_white_soldiers', 'three_black_crows'
        ]
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        self.time_features = [
            'hour', 'day_of_week', 'day_of_month', 'is_weekend',
            'is_asia_session', 'is_europe_session', 'is_us_session'
        ]
        
        # –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞
        self.market_microstructure = [
            'bid_ask_spread', 'order_flow_imbalance',
            'volume_at_bid', 'volume_at_ask', 'trades_per_minute'
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'features_extracted': 0,
            'extraction_errors': 0,
            'last_extraction': None
        }
    
    async def extract_features(self, symbol: str, timeframe: str = '5m', 
                              lookback_periods: int = 500) -> pd.DataFrame:
        """
        –†–ï–ê–õ–¨–ù–ê–Ø —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            lookback_periods: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
            
            # === 1. –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• ===
            df = await self._get_market_data(symbol, timeframe, lookback_periods)
            
            if df.empty:
                logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                self.stats['extraction_errors'] += 1
                return pd.DataFrame()
            
            # === 2. –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ì–†–£–ü–ü–´ –ü–†–ò–ó–ù–ê–ö–û–í ===
            df = self._add_price_features(df)
            df = self._add_technical_indicators(df)
            df = self._add_momentum_features(df)
            df = self._add_volatility_features(df)
            df = self._add_volume_features(df)
            df = self._add_support_resistance_levels(df)
            df = self._add_candle_patterns(df)
            df = self._add_time_features(df)
            df = await self._add_market_microstructure(df, symbol)
            df = await self._add_market_conditions(df, symbol, timeframe)
            df = await self._add_historical_performance(df, symbol)
            
            # === 3. –î–û–ë–ê–í–õ–Ø–ï–ú –°–õ–û–ñ–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            df = self._add_lag_features(df)
            df = self._add_rolling_features(df)
            df = self._add_interaction_features(df)
            df = self._add_regime_features(df)
            
            # === 4. –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• ===
            df = self._clean_features(df)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.stats['features_extracted'] += 1
            self.stats['last_extraction'] = datetime.utcnow()
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol} ({len(df)} —Å—Ç—Ä–æ–∫)")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {e}")
            self.stats['extraction_errors'] += 1
            return pd.DataFrame()
    
    async def _get_market_data(self, symbol: str, timeframe: str, lookback_periods: int) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π)
        """
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ exchange client
        try:
            from ...exchange.client import get_exchange_client
            client = get_exchange_client()
            
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            ohlcv = await client.get_ohlcv(symbol, timeframe, lookback_periods)
            if not ohlcv.empty:
                return ohlcv
        except Exception as e:
            logger.warning(f"Exchange client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            candles = db.query(Candle).filter(
                Candle.symbol == symbol,
                Candle.timeframe == timeframe
            ).order_by(Candle.timestamp.desc()).limit(lookback_periods * 2).all()
            
            if len(candles) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è {symbol}: {len(candles)}")
                return pd.DataFrame()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df = pd.DataFrame([{
                'timestamp': c.timestamp,
                'open': float(c.open),
                'high': float(c.high),
                'low': float(c.low),
                'close': float(c.close),
                'volume': float(c.volume)
            } for c in reversed(candles)])
            
            df.set_index('timestamp', inplace=True)
            return df
            
        finally:
            db.close()
    
    def _add_price_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–ï–ê–õ–¨–ù–´–ï —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        # –ë–∞–∑–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        df['price_change'] = df['close'] - df['open']
        df['price_change_pct'] = (df['close'] - df['open']) / df['open'] * 100
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞  
        df['close_change'] = df['close'].diff()
        df['close_change_pct'] = df['close'].pct_change() * 100
        df['price_change_1'] = df['close'].pct_change(1)
        df['price_change_5'] = df['close'].pct_change(5)
        df['price_change_10'] = df['close'].pct_change(10)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–∞
        df['volume_change'] = df['volume'].diff()
        df['volume_change_pct'] = df['volume'].pct_change() * 100
        
        # High-Low –∞–Ω–∞–ª–∏–∑
        df['hl_spread'] = df['high'] - df['low']
        df['hl_spread_pct'] = (df['high'] - df['low']) / df['low'] * 100
        df['hl_ratio'] = (df['high'] - df['low']) / df['close']
        
        # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–Ω—è
        df['close_position'] = (df['close'] - df['low']) / (df['high'] - df['low'])
        df['close_position'] = df['close_position'].fillna(0.5)  # –ï—Å–ª–∏ high == low
        
        # Open-Close —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        df['oc_ratio'] = (df['close'] - df['open']) / df['open']
        df['body_size'] = abs(df['close'] - df['open']) / df['open']
        
        # –¢–µ–Ω–∏ —Å–≤–µ—á–µ–π
        df['upper_shadow'] = (df['high'] - np.maximum(df['open'], df['close'])) / df['close']
        df['lower_shadow'] = (np.minimum(df['open'], df['close']) - df['low']) / df['close']
        
        return df
    
    def _add_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–ï–ê–õ–¨–ù–´–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        
        # === MOVING AVERAGES ===
        for period in [9, 12, 21, 26, 50, 200]:
            df[f'sma_{period}'] = df['close'].rolling(period).mean()
            df[f'ema_{period}'] = df['close'].ewm(span=period).mean()
        
        # EMA slopes (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        df['ema_9_slope'] = (df['ema_9'] - df['ema_9'].shift(5)) / 5
        df['ema_21_slope'] = (df['ema_21'] - df['ema_21'].shift(5)) / 5
        
        # === RSI ===
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # RSI —É—Ä–æ–≤–Ω–∏
        df['rsi_oversold'] = (df['rsi'] < 30).astype(int)
        df['rsi_overbought'] = (df['rsi'] > 70).astype(int)
        df['rsi_normalized'] = (df['rsi'] - 50) / 50  # –û—Ç -1 –¥–æ 1
        
        # === MACD ===
        df['macd'] = df['ema_12'] - df['ema_26']
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        df['macd_hist'] = df['macd'] - df['macd_signal']
        df['macd_histogram'] = df['macd_hist']  # –ê–ª–∏–∞—Å
        
        # MACD –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã
        df['macd_cross'] = np.where(
            (df['macd'] > df['macd_signal']) & 
            (df['macd'].shift(1) <= df['macd_signal'].shift(1)), 1,
            np.where(
                (df['macd'] < df['macd_signal']) & 
                (df['macd'].shift(1) >= df['macd_signal'].shift(1)), -1, 0
            )
        )
        
        # === BOLLINGER BANDS ===
        bb_period = 20
        bb_std = 2
        df['bb_middle'] = df['close'].rolling(bb_period).mean()
        bb_std_val = df['close'].rolling(bb_period).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std_val * bb_std)
        df['bb_lower'] = df['bb_middle'] - (bb_std_val * bb_std)
        df['bb_width'] = df['bb_upper'] - df['bb_lower']
        df['bb_percent'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
        df['bb_position'] = df['bb_percent']  # –ê–ª–∏–∞—Å
        
        # === ATR (Average True Range) ===
        high_low = df['high'] - df['low']
        high_close = abs(df['high'] - df['close'].shift())
        low_close = abs(df['low'] - df['close'].shift())
        true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
        df['atr'] = true_range.rolling(14).mean()
        df['atr_pct'] = df['atr'] / df['close'] * 100
        df['atr_percent'] = df['atr_pct']  # –ê–ª–∏–∞—Å
        
        # === STOCHASTIC ===
        high_14 = df['high'].rolling(14).max()
        low_14 = df['low'].rolling(14).min()
        df['stoch_k'] = 100 * (df['close'] - low_14) / (high_14 - low_14)
        df['stoch_d'] = df['stoch_k'].rolling(3).mean()
        
        # === WILLIAMS %R ===
        df['williams_r'] = -100 * (high_14 - df['close']) / (high_14 - low_14)
        
        # === CCI (Commodity Channel Index) ===
        typical_price = (df['high'] + df['low'] + df['close']) / 3
        sma_tp = typical_price.rolling(20).mean()
        mean_deviation = typical_price.rolling(20).apply(lambda x: np.mean(np.abs(x - x.mean())))
        df['cci'] = (typical_price - sma_tp) / (0.015 * mean_deviation)
        
        # === ADX (Average Directional Index) ===
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pandas_ta –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            adx = ta.adx(df['high'], df['low'], df['close'], length=14)
            if adx is not None and not adx.empty:
                df['adx'] = adx['ADX_14']
                df['plus_di'] = adx['DMP_14']
                df['minus_di'] = adx['DMN_14']
            else:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ADX
                df['adx'] = 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                df['plus_di'] = 25
                df['minus_di'] = 25
        except:
            df['adx'] = 50
            df['plus_di'] = 25
            df['minus_di'] = 25
        
        return df
    
    def _add_momentum_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–æ–º–µ–Ω—Ç—É–º–∞"""
        # ROC (Rate of Change)
        for period in [5, 10, 20]:
            df[f'roc_{period}'] = ((df['close'] - df['close'].shift(period)) / df['close'].shift(period)) * 100
        
        # Momentum oscillator
        df['momentum_10'] = df['close'] / df['close'].shift(10)
        df['momentum_20'] = df['close'] / df['close'].shift(20)
        
        # Price momentum
        df['price_momentum_5'] = df['close'] / df['close'].shift(5) - 1
        df['price_momentum_10'] = df['close'] / df['close'].shift(10) - 1
        
        return df
    
    def _add_volatility_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        for window in [5, 10, 20]:
            df[f'volatility_{window}'] = df['price_change_1'].rolling(window).std()
            df[f'volatility_{window}_pct'] = df[f'volatility_{window}'] * 100
        
        # –ü–∞—Äkinson –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
        for window in [10, 20]:
            log_hl = np.log(df['high'] / df['low'])
            df[f'parkinson_vol_{window}'] = np.sqrt((log_hl ** 2).rolling(window).mean() / (4 * np.log(2)))
        
        # Garman-Klass –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        for window in [10, 20]:
            log_hl = np.log(df['high'] / df['low'])
            log_co = np.log(df['close'] / df['open'])
            gk_vol = 0.5 * (log_hl ** 2) - (2 * np.log(2) - 1) * (log_co ** 2)
            df[f'gk_vol_{window}'] = np.sqrt(gk_vol.rolling(window).mean())
        
        return df
    
    def _add_volume_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        if 'volume' not in df.columns or df['volume'].sum() == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—ä–µ–º—É, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            df['volume'] = 1000000  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
        
        # –û–±—ä–µ–º–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        for period in [10, 20, 50]:
            df[f'volume_sma_{period}'] = df['volume'].rolling(period).mean()
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º
        df['volume_ratio'] = df['volume'] / df['volume_sma_20']
        
        # Volume Price Trend (VPT)
        vpt = (df['volume'] * df['price_change_pct']).cumsum()
        df['vpt'] = vpt
        df['vpt_sma'] = vpt.rolling(10).mean()
        
        # On-Balance Volume (OBV)
        obv_change = df['volume'] * np.sign(df['close'].diff())
        df['obv'] = obv_change.cumsum()
        df['obv_ema'] = df['obv'].ewm(span=21).mean()
        df['obv_signal'] = np.where(df['obv'] > df['obv_ema'], 1, -1)
        
        # Volume-Weighted Average Price (VWAP)
        typical_price = (df['high'] + df['low'] + df['close']) / 3
        vwap_num = (typical_price * df['volume']).cumsum()
        vwap_den = df['volume'].cumsum()
        df['vwap'] = vwap_num / vwap_den
        df['price_vs_vwap'] = (df['close'] - df['vwap']) / df['vwap'] * 100
        
        # Volume trends
        df['volume_trend_5'] = df['volume'].rolling(5).mean() / df['volume'].rolling(20).mean()
        df['volume_price_trend'] = df['volume'] * np.sign(df['price_change_1'])
        
        return df
    
    def _add_support_resistance_levels(self, df: pd.DataFrame) -> pd.DataFrame:
        """–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        # –ù–µ–¥–∞–≤–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
        for window in [10, 20, 50]:
            df[f'resistance_{window}'] = df['high'].rolling(window).max()
            df[f'support_{window}'] = df['low'].rolling(window).min()
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É—Ä–æ–≤–Ω–µ–π
            df[f'price_to_resistance_{window}'] = (df[f'resistance_{window}'] - df['close']) / df['close']
            df[f'price_to_support_{window}'] = (df['close'] - df[f'support_{window}']) / df['close']
            
            # –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            range_size = df[f'resistance_{window}'] - df[f'support_{window}']
            df[f'position_in_range_{window}'] = (df['close'] - df[f'support_{window}']) / range_size
        
        return df
    
    def _add_candle_patterns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        
        # –†–∞–∑–º–µ—Ä—ã —Ç–µ–ª–∞ –∏ —Ç–µ–Ω–µ–π
        body_size = abs(df['close'] - df['open'])
        upper_shadow = df['high'] - np.maximum(df['open'], df['close'])
        lower_shadow = np.minimum(df['open'], df['close']) - df['low']
        candle_range = df['high'] - df['low']
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        candle_range = candle_range.replace(0, np.nan)
        
        # Doji (–º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ)
        df['doji'] = (body_size / candle_range < 0.1).astype(int)
        
        # Hammer (–º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ, –¥–ª–∏–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å)
        df['hammer'] = (
            (body_size / candle_range < 0.3) & 
            (lower_shadow > 2 * body_size) &
            (upper_shadow < body_size)
        ).astype(int)
        
        # Inverted Hammer
        df['inverted_hammer'] = (
            (body_size / candle_range < 0.3) & 
            (upper_shadow > 2 * body_size) &
            (lower_shadow < body_size)
        ).astype(int)
        
        # Shooting Star (–∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ —Å –¥–ª–∏–Ω–Ω–æ–π –≤–µ—Ä—Ö–Ω–µ–π —Ç–µ–Ω—å—é)
        df['shooting_star'] = (
            (df['close'] < df['open']) &
            (body_size / candle_range < 0.3) & 
            (upper_shadow > 2 * body_size)
        ).astype(int)
        
        # Bullish Engulfing (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        prev_bearish = (df['close'].shift(1) < df['open'].shift(1))
        curr_bullish = (df['close'] > df['open'])
        engulfs = (df['close'] > df['open'].shift(1)) & (df['open'] < df['close'].shift(1))
        df['bullish_engulfing'] = (prev_bearish & curr_bullish & engulfs).astype(int)
        
        # Bearish Engulfing  
        prev_bullish = (df['close'].shift(1) > df['open'].shift(1))
        curr_bearish = (df['close'] < df['open'])
        df['bearish_engulfing'] = (prev_bullish & curr_bearish & engulfs).astype(int)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in ['morning_star', 'evening_star', 'three_white_soldiers', 
                       'three_black_crows', 'hanging_man', 'three_inside']:
            df[pattern] = 0
        
        # –û–±—â–∞—è —Å–∏–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern_cols = ['doji', 'hammer', 'inverted_hammer', 'shooting_star',
                       'bullish_engulfing', 'bearish_engulfing']
        df['pattern_strength'] = df[pattern_cols].abs().sum(axis=1)
        df['pattern_direction'] = df[pattern_cols].sum(axis=1)
        
        return df
    
    def _add_time_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if hasattr(df.index, 'hour'):
            time_index = df.index
        else:
            # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            time_index = pd.date_range(start='2024-01-01', periods=len(df), freq='5T')
        
        df['hour'] = time_index.hour
        df['day_of_week'] = time_index.dayofweek
        df['day_of_month'] = time_index.day
        df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ (UTC)
        df['is_asia_session'] = df['hour'].between(0, 8).astype(int)
        df['is_europe_session'] = df['hour'].between(7, 16).astype(int)
        df['is_us_session'] = df['hour'].between(13, 22).astype(int)
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —á–∞—Å–∞ (–≤–∞–∂–Ω–æ –¥–ª—è ML)
        df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
        df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        df['dow_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
        df['dow_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
        
        return df
    
    async def _add_market_microstructure(self, df: pd.DataFrame, symbol: str) -> pd.DataFrame:
        """–ü—Ä–∏–∑–Ω–∞–∫–∏ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –û—Ü–µ–Ω–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        volatility = df['atr_pct'].rolling(20).mean().fillna(1.0)
        
        # –°–ø—Ä–µ–¥ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        df['bid_ask_spread'] = volatility * np.random.uniform(0.01, 0.03, len(df))
        
        # –î–∏—Å–±–∞–ª–∞–Ω—Å –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        volume_change = df['volume_change_pct'].fillna(0)
        price_change = df['price_change_pct'].fillna(0)
        df['order_flow_imbalance'] = np.tanh(price_change * volume_change / 100)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        volume_ratio = np.random.uniform(0.4, 0.6, len(df))
        df['volume_at_bid'] = df['volume'] * volume_ratio
        df['volume_at_ask'] = df['volume'] * (1 - volume_ratio)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ –º–∏–Ω—É—Ç—É (–æ—Ü–µ–Ω–∫–∞)
        df['trades_per_minute'] = df['volume'] / df['volume'].median() * 50
        
        return df
    
    async def _add_market_conditions(self, df: pd.DataFrame, symbol: str, timeframe: str) -> pd.DataFrame:
        """–†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–∑ –ë–î"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_condition = db.query(MarketCondition).filter(
                MarketCondition.symbol == symbol,
                MarketCondition.timeframe == timeframe
            ).order_by(MarketCondition.timestamp.desc()).first()
            
            if market_condition:
                trend_value = 1 if market_condition.trend == 'UPTREND' else (-1 if market_condition.trend == 'DOWNTREND' else 0)
                df['market_trend'] = trend_value
                df['market_volatility'] = market_condition.volatility_level
                df['market_strength'] = market_condition.trend_strength
            else:
                # –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                df['market_trend'] = np.where(
                    df['ema_21'] > df['ema_50'], 1,
                    np.where(df['ema_21'] < df['ema_50'], -1, 0)
                )
                df['market_volatility'] = df['atr_pct'] / df['atr_pct'].rolling(50).mean()
                df['market_strength'] = abs(df['rsi'] - 50) / 50
                
        finally:
            db.close()
            
        return df
    
    async def _add_historical_performance(self, df: pd.DataFrame, symbol: str) -> pd.DataFrame:
        """–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        db = SessionLocal()
        try:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            recent_trades = db.query(Trade).filter(
                Trade.symbol == symbol,
                Trade.created_at >= datetime.utcnow() - timedelta(days=7)
            ).all()
            
            if recent_trades:
                profitable_trades = [t for t in recent_trades if t.profit and t.profit > 0]
                win_rate = len(profitable_trades) / len(recent_trades)
                avg_profit = np.mean([t.profit for t in recent_trades if t.profit])
                
                df['recent_win_rate'] = win_rate
                df['recent_avg_profit'] = avg_profit if not np.isnan(avg_profit) else 0
            else:
                df['recent_win_rate'] = 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                df['recent_avg_profit'] = 0
                
        finally:
            db.close()
            
        return df
    
    def _add_lag_features(self, df: pd.DataFrame, lags: List[int] = [1, 2, 3, 5, 10]) -> pd.DataFrame:
        """–õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        for lag in lags:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∞–≥–∏
            df[f'close_lag_{lag}'] = df['close'].shift(lag)
            df[f'volume_lag_{lag}'] = df['volume'].shift(lag)
            df[f'rsi_lag_{lag}'] = df['rsi'].shift(lag)
            df[f'macd_lag_{lag}'] = df['macd'].shift(lag)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –ª–∞–≥–∞
            df[f'close_change_from_lag_{lag}'] = (df['close'] - df[f'close_lag_{lag}']) / df[f'close_lag_{lag}'] * 100
            df[f'volume_change_from_lag_{lag}'] = (df['volume'] - df[f'volume_lag_{lag}']) / df[f'volume_lag_{lag}'] * 100
        
        return df
    
    def _add_rolling_features(self, df: pd.DataFrame, windows: List[int] = [5, 10, 20, 50]) -> pd.DataFrame:
        """–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        for window in windows:
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            df[f'close_mean_{window}'] = df['close'].rolling(window).mean()
            df[f'volume_mean_{window}'] = df['volume'].rolling(window).mean()
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            df[f'close_std_{window}'] = df['close'].rolling(window).std()
            df[f'volume_std_{window}'] = df['volume'].rolling(window).std()
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            df[f'high_max_{window}'] = df['high'].rolling(window).max()
            df[f'low_min_{window}'] = df['low'].rolling(window).min()
            df[f'close_min_{window}'] = df['close'].rolling(window).min()
            df[f'close_max_{window}'] = df['close'].rolling(window).max()
            
            # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            range_size = df[f'high_max_{window}'] - df[f'low_min_{window}']
            df[f'price_position_{window}'] = (df['close'] - df[f'low_min_{window}']) / range_size
            
            # –ö–≤–∞–Ω—Ç–∏–ª–∏
            df[f'close_quantile_{window}_25'] = df['close'].rolling(window).quantile(0.25)
            df[f'close_quantile_{window}_75'] = df['close'].rolling(window).quantile(0.75)
        
        return df
    
    def _add_interaction_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
        # RSI * Volume
        df['rsi_volume_interaction'] = df['rsi'] * df['volume_ratio']
        
        # MACD * ATR
        df['macd_atr_interaction'] = df['macd'] * df['atr_pct']
        
        # Bollinger position * Volume
        df['bb_volume_interaction'] = df['bb_percent'] * df['volume_ratio']
        
        # Price momentum * Volatility
        df['momentum_vol_interaction'] = df['price_change_5'] * df['volatility_10']
        
        return df
    
    def _add_regime_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        # Trending vs ranging market
        df['trend_strength'] = abs(df['ema_21_slope']) / df['atr_pct']
        df['is_trending'] = (df['trend_strength'] > df['trend_strength'].rolling(50).quantile(0.7)).astype(int)
        
        # High vs low volatility regime
        vol_median = df['atr_pct'].rolling(100).median()
        df['is_high_vol'] = (df['atr_pct'] > vol_median * 1.5).astype(int)
        
        # Bull vs bear market
        ma_ratio = df['ema_21'] / df['ema_50']
        df['is_bull_market'] = (ma_ratio > 1.02).astype(int)
        df['is_bear_market'] = (ma_ratio < 0.98).astype(int)
        
        return df
    
    def _clean_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ NaN
        df.replace([np.inf, -np.inf], np.nan, inplace=True)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º NaN
        threshold = 0.5  # –ú–∞–∫—Å–∏–º—É–º 50% NaN
        df = df.dropna(thresh=int(threshold * len(df)), axis=1)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
        df = df.dropna()
        
        # –û–±—Ä–µ–∑–∞–µ–º –≤—ã–±—Ä–æ—Å—ã
        numeric_columns = df.select_dtypes(include=[np.number]).columns
        for col in numeric_columns:
            q1 = df[col].quantile(0.01)
            q99 = df[col].quantile(0.99)
            df[col] = df[col].clip(lower=q1, upper=q99)
        
        return df
    
    def prepare_training_data(self, df: pd.DataFrame, target_type: str = 'direction',
                            target_periods: int = 5) -> Tuple[np.ndarray, np.ndarray]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π
        
        Args:
            df: DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            target_type: –¢–∏–ø —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ('direction', 'returns', 'classification')
            target_periods: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –±—É–¥—É—â–µ–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            X, y: –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        """
        try:
            if df.empty:
                logger.error("–ü—É—Å—Ç–æ–π DataFrame –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return np.array([]), np.array([])
            
            # === –°–û–ó–î–ê–ù–ò–ï –¶–ï–õ–ï–í–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô ===
            if target_type == 'direction':
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                future_price = df['close'].shift(-target_periods)
                price_change = (future_price - df['close']) / df['close']
                
                # –¢—Ä–µ—Ö–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: -1 (down), 0 (sideways), 1 (up)
                threshold = 0.002  # 0.2% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                y = np.where(price_change > threshold, 1,
                           np.where(price_change < -threshold, -1, 0))
                
            elif target_type == 'returns':
                # –†–µ–≥—Ä–µ—Å—Å–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                future_price = df['close'].shift(-target_periods)
                y = (future_price - df['close']) / df['close']
                
            elif target_type == 'classification':
                # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                future_price = df['close'].shift(-target_periods)
                price_change = (future_price - df['close']) / df['close']
                y = (price_change > 0.001).astype(int)  # 0.1% –ø–æ—Ä–æ–≥
                
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {target_type}")
            
            # === –ü–û–î–ì–û–¢–û–í–ö–ê –ü–†–ò–ó–ù–ê–ö–û–í ===
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            exclude_columns = ['open', 'high', 'low', 'close', 'volume', 'timestamp']
            feature_columns = [col for col in df.columns if col not in exclude_columns]
            
            if not feature_columns:
                logger.error("–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return np.array([]), np.array([])
            
            X = df[feature_columns].values
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            mask = ~np.isnan(y)
            X = X[mask]
            y = y[mask]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
            feature_mask = ~np.isnan(X).any(axis=1)
            X = X[feature_mask]
            y = y[feature_mask]
            
            if len(X) == 0:
                logger.error("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç NaN")
                return np.array([]), np.array([])
            
            logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
            logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {np.bincount(y + 1) if target_type == 'direction' else 'regression'}")
            
            return X, y
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return np.array([]), np.array([])
    
    def get_feature_names(self, df: pd.DataFrame) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        exclude_columns = ['open', 'high', 'low', 'close', 'volume', 'timestamp']
        return [col for col in df.columns if col not in exclude_columns]
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã FeatureEngineer"""
        return {
            **self.stats,
            'feature_groups': {
                'price_features': len(self.price_features),
                'technical_features': len(self.technical_features),
                'candle_patterns': len(self.candle_patterns),
                'time_features': len(self.time_features),
                'market_microstructure': len(self.market_microstructure)
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
feature_engineer = FeatureEngineer()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['FeatureEngineer', 'feature_engineer']