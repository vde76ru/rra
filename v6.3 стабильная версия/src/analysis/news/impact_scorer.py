"""
News Impact Scorer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—ã–Ω–æ–∫
–§–∞–π–ª: src/analysis/news/impact_scorer.py

üéØ –§–£–ù–ö–¶–ò–ò:
‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö (sentiment analysis)
‚úÖ –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
"""

import re
import asyncio
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import logging

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import nltk
    from textblob import TextBlob
    NLTK_AVAILABLE = True
except ImportError:
    NLTK_AVAILABLE = False
    logging.warning("‚ö†Ô∏è NLTK/TextBlob –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")

from ...core.config import config
from ...core.database import SessionLocal
from ...core.models import NewsAnalysis

logger = logging.getLogger(__name__)

class SentimentType(Enum):
    """–¢–∏–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    VERY_NEGATIVE = "very_negative"
    NEGATIVE = "negative"
    NEUTRAL = "neutral"
    POSITIVE = "positive"
    VERY_POSITIVE = "very_positive"

class NewsCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    REGULATORY = "regulatory"          # –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    TECHNICAL = "technical"            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ADOPTION = "adoption"              # –ü—Ä–∏–Ω—è—Ç–∏–µ/–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
    MARKET = "market"                  # –†—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    SECURITY = "security"              # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å/—Ö–∞–∫—ã
    MACROECONOMIC = "macroeconomic"    # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞
    SOCIAL = "social"                  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

@dataclass
class NewsImpact:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    sentiment: SentimentType
    sentiment_score: float       # -1 –¥–æ 1
    impact_score: float         # 0 –¥–æ 10
    category: NewsCategory
    confidence: float           # 0 –¥–æ 1
    affected_symbols: List[str]
    key_phrases: List[str]
    urgency: str               # low/medium/high
    time_horizon: str          # short/medium/long

class NewsImpactScorer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏
    
    üî• –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô:
    - Sentiment analysis —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π –∏ –≤–ª–∏—è–Ω–∏—é
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –≤–ª–∏—è–Ω–∏—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.positive_keywords = {
            'adoption': ['partnership', 'integration', 'mainstream', 'institutional', 
                        '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–ø—Ä–∏–Ω—è—Ç–∏–µ'],
            'technical': ['upgrade', 'improvement', 'scalability', 'efficiency',
                         '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '—É–ª—É—á—à–µ–Ω–∏–µ', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å'],
            'market': ['bullish', 'rally', 'surge', 'breakthrough', 'ATH',
                      '–±—ã—á–∏–π', '—Ä–æ—Å—Ç', '–ø—Ä–æ—Ä—ã–≤', '—Ä–µ–∫–æ—Ä–¥']
        }
        
        self.negative_keywords = {
            'regulatory': ['ban', 'restriction', 'regulation', 'crackdown',
                          '–∑–∞–ø—Ä–µ—Ç', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            'security': ['hack', 'exploit', 'vulnerability', 'breach',
                        '–≤–∑–ª–æ–º', '—É—è–∑–≤–∏–º–æ—Å—Ç—å', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ'],
            'market': ['crash', 'dump', 'bearish', 'decline', 'correction',
                      '–ø–∞–¥–µ–Ω–∏–µ', '–º–µ–¥–≤–µ–∂–∏–π', '–∫–æ—Ä—Ä–µ–∫—Ü–∏—è']
        }
        
        # –°–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.crypto_symbols = [
            'BTC', 'ETH', 'ADA', 'DOT', 'SOL', 'MATIC', 'AVAX', 'LINK', 
            'UNI', 'ATOM', 'NEAR', 'ALGO', 'XRP', 'LTC', 'BCH', 'EOS',
            'Bitcoin', 'Ethereum', 'Cardano', 'Polkadot', 'Solana'
        ]
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.source_weights = {
            'reuters': 0.9,
            'bloomberg': 0.9,
            'coindesk': 0.8,
            'cointelegraph': 0.7,
            'decrypt': 0.7,
            'theblock': 0.8,
            'default': 0.5
        }
        
        logger.info("‚úÖ NewsImpactScorer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def score_news_impact(self, news_text: str, title: str = "", 
                         source: str = "unknown", symbol: str = None) -> NewsImpact:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        
        Args:
            news_text: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏
            symbol: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
            
        Returns:
            NewsImpact: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        """
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
            full_text = f"{title} {news_text}".strip()
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            sentiment_result = self.analyze_sentiment(full_text)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = self._classify_news_category(full_text)
            
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            affected_symbols = self._extract_crypto_symbols(full_text, symbol)
            
            # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
            key_phrases = self._extract_key_phrases(full_text)
            
            # –†–∞—Å—á–µ—Ç impact score
            impact_score = self._calculate_impact_score(
                sentiment_result, category, source, affected_symbols, key_phrases
            )
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
            urgency = self._determine_urgency(full_text, category)
            time_horizon = self._determine_time_horizon(category, sentiment_result['score'])
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ
            confidence = self._calculate_confidence(
                sentiment_result, category, len(affected_symbols)
            )
            
            result = NewsImpact(
                sentiment=sentiment_result['sentiment'],
                sentiment_score=sentiment_result['score'],
                impact_score=impact_score,
                category=category,
                confidence=confidence,
                affected_symbols=affected_symbols,
                key_phrases=key_phrases,
                urgency=urgency,
                time_horizon=time_horizon
            )
            
            logger.debug(
                f"üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏: {sentiment_result['sentiment'].value}, "
                f"Impact: {impact_score:.1f}, Symbols: {affected_symbols}"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            return self._get_default_impact(symbol)
    
    def analyze_sentiment(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ"""
        try:
            if NLTK_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextBlob –¥–ª—è sentiment analysis
                blob = TextBlob(text)
                polarity = blob.sentiment.polarity
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                crypto_adjustment = self._crypto_context_adjustment(text)
                adjusted_polarity = polarity + crypto_adjustment
                adjusted_polarity = max(-1, min(1, adjusted_polarity))
                
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                adjusted_polarity = self._simple_sentiment_analysis(text)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if adjusted_polarity > 0.5:
                sentiment = SentimentType.VERY_POSITIVE
            elif adjusted_polarity > 0.1:
                sentiment = SentimentType.POSITIVE
            elif adjusted_polarity < -0.5:
                sentiment = SentimentType.VERY_NEGATIVE
            elif adjusted_polarity < -0.1:
                sentiment = SentimentType.NEGATIVE
            else:
                sentiment = SentimentType.NEUTRAL
            
            return {
                'sentiment': sentiment,
                'score': adjusted_polarity,
                'confidence': abs(adjusted_polarity) if abs(adjusted_polarity) > 0.1 else 0.3
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
            return {
                'sentiment': SentimentType.NEUTRAL,
                'score': 0.0,
                'confidence': 0.3
            }
    
    def _simple_sentiment_analysis(self, text: str) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        text_lower = text.lower()
        positive_score = 0
        negative_score = 0
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for category, keywords in self.positive_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    positive_score += 1
        
        # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for category, keywords in self.negative_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    negative_score += 1
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        total_words = len(text.split())
        if total_words > 0:
            positive_ratio = positive_score / total_words * 10
            negative_ratio = negative_score / total_words * 10
            
            return max(-1, min(1, positive_ratio - negative_ratio))
        
        return 0.0
    
    def _crypto_context_adjustment(self, text: str) -> float:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ sentiment —Å —É—á–µ—Ç–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        adjustment = 0.0
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        crypto_positive = [
            'moon', 'hodl', 'diamond hands', 'to the moon', 'bullish',
            'adoption', 'mainstream', 'institutional'
        ]
        
        crypto_negative = [
            'dump', 'rug pull', 'bear market', 'crash', 'scam',
            'regulation', 'ban', 'crackdown'
        ]
        
        for phrase in crypto_positive:
            if phrase in text_lower:
                adjustment += 0.2
        
        for phrase in crypto_negative:
            if phrase in text_lower:
                adjustment -= 0.2
        
        return max(-0.5, min(0.5, adjustment))
    
    def _classify_news_category(self, text: str) -> NewsCategory:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
        text_lower = text.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_patterns = {
            NewsCategory.REGULATORY: ['regulation', 'sec', 'government', 'legal', 'ban', 'law'],
            NewsCategory.TECHNICAL: ['upgrade', 'protocol', 'blockchain', 'update', 'fork'],
            NewsCategory.ADOPTION: ['partnership', 'integration', 'mainstream', 'institutional'],
            NewsCategory.SECURITY: ['hack', 'exploit', 'security', 'vulnerability', 'breach'],
            NewsCategory.MARKET: ['price', 'trading', 'volume', 'exchange', 'market'],
            NewsCategory.MACROECONOMIC: ['inflation', 'fed', 'economy', 'gdp', 'interest']
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_scores = {}
        for category, patterns in category_patterns.items():
            score = sum(1 for pattern in patterns if pattern in text_lower)
            category_scores[category] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        if category_scores:
            best_category = max(category_scores, key=category_scores.get)
            if category_scores[best_category] > 0:
                return best_category
        
        return NewsCategory.SOCIAL  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _extract_crypto_symbols(self, text: str, hint_symbol: str = None) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        found_symbols = set()
        text_upper = text.upper()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if hint_symbol:
            found_symbols.add(hint_symbol.upper())
        
        # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for symbol in self.crypto_symbols:
            if symbol.upper() in text_upper:
                found_symbols.add(symbol.upper())
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ $SYMBOL
        dollar_pattern = r'\$([A-Z]{2,10})'
        dollar_matches = re.findall(dollar_pattern, text_upper)
        for match in dollar_matches:
            if len(match) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞
                found_symbols.add(match)
        
        return list(found_symbols)
    
    def _extract_key_phrases(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ –Ω–æ–≤–æ—Å—Ç–∏"""
        key_phrases = []
        text_lower = text.lower()
        
        # –í–∞–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        important_phrases = [
            'all-time high', 'market cap', 'price target', 'technical analysis',
            'whale movement', 'institutional adoption', 'regulatory approval',
            'new partnership', 'major update', 'security breach'
        ]
        
        for phrase in important_phrases:
            if phrase in text_lower:
                key_phrases.append(phrase)
        
        return key_phrases[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ—Ä–∞–∑
    
    def _calculate_impact_score(self, sentiment_result: Dict, category: NewsCategory,
                              source: str, symbols: List[str], key_phrases: List[str]) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            base_score = abs(sentiment_result['score']) * 5  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä 0-5
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_multipliers = {
                NewsCategory.REGULATORY: 1.5,    # –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ
                NewsCategory.SECURITY: 1.4,      # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞
                NewsCategory.ADOPTION: 1.3,      # –ü—Ä–∏–Ω—è—Ç–∏–µ –≤–∞–∂–Ω–æ
                NewsCategory.TECHNICAL: 1.1,     # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                NewsCategory.MARKET: 1.0,        # –†—ã–Ω–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã–µ
                NewsCategory.MACROECONOMIC: 1.2, # –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ –≤–∞–∂–Ω–∞
                NewsCategory.SOCIAL: 0.8         # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã
            }
            
            category_score = base_score * category_multipliers.get(category, 1.0)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            source_weight = self.source_weights.get(source.lower(), 
                                                   self.source_weights['default'])
            source_score = category_score * source_weight
            
            # –ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            symbol_bonus = min(len(symbols) * 0.5, 2.0)
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
            phrase_bonus = min(len(key_phrases) * 0.3, 1.5)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
            final_score = source_score + symbol_bonus + phrase_bonus
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-10
            return max(0, min(10, final_score))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ impact score: {e}")
            return 5.0
    
    def _determine_urgency(self, text: str, category: NewsCategory) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
        text_lower = text.lower()
        
        urgent_keywords = ['breaking', 'urgent', 'emergency', 'immediate', '—Å—Ä–æ—á–Ω–æ']
        
        if any(keyword in text_lower for keyword in urgent_keywords):
            return 'high'
        elif category in [NewsCategory.REGULATORY, NewsCategory.SECURITY]:
            return 'medium'
        else:
            return 'low'
    
    def _determine_time_horizon(self, category: NewsCategory, sentiment_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –≤–ª–∏—è–Ω–∏—è"""
        # –†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ—é—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        if category in [NewsCategory.REGULATORY, NewsCategory.ADOPTION]:
            return 'long'
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ—é—Ç —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        elif category == NewsCategory.TECHNICAL:
            return 'medium'
        # –†—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ
        else:
            return 'short'
    
    def _calculate_confidence(self, sentiment_result: Dict, category: NewsCategory,
                            symbols_count: int) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        base_confidence = sentiment_result.get('confidence', 0.5)
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbol_bonus = min(symbols_count * 0.1, 0.3)
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        category_confidence = {
            NewsCategory.REGULATORY: 0.8,
            NewsCategory.SECURITY: 0.9,
            NewsCategory.ADOPTION: 0.7,
            NewsCategory.TECHNICAL: 0.6,
            NewsCategory.MARKET: 0.5,
            NewsCategory.SOCIAL: 0.4
        }
        
        category_factor = category_confidence.get(category, 0.5)
        
        final_confidence = (base_confidence + symbol_bonus) * category_factor
        return max(0.2, min(0.95, final_confidence))
    
    def _get_default_impact(self, symbol: str = None) -> NewsImpact:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π impact –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return NewsImpact(
            sentiment=SentimentType.NEUTRAL,
            sentiment_score=0.0,
            impact_score=5.0,
            category=NewsCategory.SOCIAL,
            confidence=0.3,
            affected_symbols=[symbol] if symbol else [],
            key_phrases=[],
            urgency='low',
            time_horizon='short'
        )
    
    async def analyze_news_batch(self, news_items: List[Dict]) -> List[NewsImpact]:
        """–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        results = []
        
        for news in news_items:
            try:
                impact = self.score_news_impact(
                    news_text=news.get('content', ''),
                    title=news.get('title', ''),
                    source=news.get('source', 'unknown'),
                    symbol=news.get('symbol')
                )
                results.append(impact)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                results.append(self._get_default_impact())
        
        return results

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'NewsImpactScorer',
    'NewsImpact',
    'SentimentType',
    'NewsCategory'
]