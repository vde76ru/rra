#!/usr/bin/env python3
"""
–ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –í–ê–õ–Æ–¢
===========================================================

‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–Ø–ï–¢ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π src/bot/manager.py

–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º (2200+ —Å—Ç—Ä–æ–∫):
‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–æ 200 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
‚úÖ 7+ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º  
‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚úÖ 10+ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏

–ü—É—Ç—å: src/bot/manager.py
"""

import asyncio
import logging
import json
import pickle
import numpy as np
import pandas as pd
import psutil
import traceback
import signal
import threading
import time
from sqlalchemy import text
from typing import Dict, List, Optional, Tuple, Any, Set, Union, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass, field, asdict
from enum import Enum
from collections import defaultdict, deque
from contextlib import asynccontextmanager
from pathlib import Path
import aiofiles
import aiohttp
from concurrent.futures import ThreadPoolExecutor
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from ..core.config import config
from ..core.database import SessionLocal, get_session
from ..core.models import (
    Trade, TradingPair, Signal, TradeStatus, OrderSide, OrderType,
    BotState, StrategyPerformance, Candle, Balance, 
    MLModel, MLPrediction, NewsAnalysis, SocialSignal, TradingLog
)

# –ü–æ–¥–∞–≤–ª—è–µ–º TensorFlow warnings
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

logger = logging.getLogger(__name__)

# =================================================================
# ENUMS –ò DATACLASSES
# =================================================================

class BotStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –±–æ—Ç–∞"""
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"
    PAUSED = "paused"
    EMERGENCY_STOP = "emergency_stop"

class ComponentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    NOT_INITIALIZED = "not_initialized"
    INITIALIZING = "initializing" 
    READY = "ready"
    FAILED = "failed"
    DISABLED = "disabled"
    RECONNECTING = "reconnecting"

class MarketPhase(Enum):
    """–§–∞–∑—ã —Ä—ã–Ω–∫–∞"""
    ACCUMULATION = "accumulation"    # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
    MARKUP = "markup"                # –†–æ—Å—Ç
    DISTRIBUTION = "distribution"    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ  
    MARKDOWN = "markdown"            # –ü–∞–¥–µ–Ω–∏–µ
    UNKNOWN = "unknown"              # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è

class RiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    EXTREME = "extreme"

class TradeDecision(Enum):
    """–†–µ—à–µ–Ω–∏—è –ø–æ —Å–¥–µ–ª–∫–∞–º"""
    STRONG_BUY = "strong_buy"
    BUY = "buy"
    WEAK_BUY = "weak_buy"
    HOLD = "hold"
    WEAK_SELL = "weak_sell"
    SELL = "sell"
    STRONG_SELL = "strong_sell"

@dataclass
class TradingOpportunity:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
    symbol: str
    strategy: str
    decision: TradeDecision
    confidence: float               # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
    expected_profit: float          # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å %
    expected_loss: float           # –û–∂–∏–¥–∞–µ–º—ã–π —É–±—ã—Ç–æ–∫ %
    risk_level: RiskLevel
    price: float                   # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
    stop_loss: float              # –°—Ç–æ–ø-–ª–æ—Å—Å
    take_profit: float            # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    market_phase: MarketPhase
    volume_score: float           # –°–∫–æ—Ä –æ–±—ä–µ–º–∞ 0-1
    technical_score: float        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ 0-1
    ml_score: float              # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ 0-1
    news_sentiment: float        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π -1 to 1
    social_sentiment: float      # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ -1 to 1
    risk_reward_ratio: float     # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    correlation_risk: float      # –†–∏—Å–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ 0-1
    volatility: float           # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    liquidity_score: float      # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å 0-1
    timeframe: str              # –¢–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
    entry_reasons: List[str]    # –ü—Ä–∏—á–∏–Ω—ã –≤—Ö–æ–¥–∞
    exit_conditions: List[str]  # –£—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
    metadata: Dict[str, Any]    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    timestamp: datetime = field(default_factory=datetime.utcnow)
    expires_at: datetime = field(default_factory=lambda: datetime.utcnow() + timedelta(hours=1))

@dataclass
class MarketState:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞"""
    overall_trend: str              # BULLISH, BEARISH, SIDEWAYS
    volatility: str                 # LOW, MEDIUM, HIGH, EXTREME
    fear_greed_index: int          # 0-100
    market_cap: float              # –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
    volume_24h: float              # –û–±—ä–µ–º –∑–∞ 24—á
    dominance_btc: float           # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC
    dominance_eth: float           # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ETH
    active_pairs_count: int        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    trending_pairs: List[str]      # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã
    declining_pairs: List[str]     # –ü–∞–¥–∞—é—â–∏–µ –ø–∞—Ä—ã
    correlation_matrix: Dict[str, Dict[str, float]]  # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    sector_performance: Dict[str, float]  # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∫—Ç–æ—Ä–æ–≤
    market_regime: str             # BULL_MARKET, BEAR_MARKET, SIDEWAYS_MARKET
    risk_level: RiskLevel         # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    timestamp: datetime = field(default_factory=datetime.utcnow)

@dataclass
class ComponentInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    status: ComponentStatus
    instance: Any = None
    error: Optional[str] = None
    last_heartbeat: Optional[datetime] = None
    restart_count: int = 0
    dependencies: List[str] = field(default_factory=list)
    is_critical: bool = False
    health_check_interval: int = 60
    max_restart_attempts: int = 3

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    analysis_time_avg: float = 0.0
    trade_execution_time_avg: float = 0.0
    pairs_per_second: float = 0.0
    memory_usage_mb: float = 0.0
    cpu_usage_percent: float = 0.0
    network_latency_ms: float = 0.0
    error_rate_percent: float = 0.0
    uptime_seconds: float = 0.0
    cycles_per_hour: float = 0.0
    api_calls_per_minute: float = 0.0

@dataclass
class TradingStatistics:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    total_profit_usd: float = 0.0
    total_loss_usd: float = 0.0
    win_rate: float = 0.0
    profit_factor: float = 0.0
    max_drawdown: float = 0.0
    max_drawdown_duration: int = 0
    average_win: float = 0.0
    average_loss: float = 0.0
    largest_win: float = 0.0
    largest_loss: float = 0.0
    consecutive_wins: int = 0
    consecutive_losses: int = 0
    max_consecutive_wins: int = 0
    max_consecutive_losses: int = 0
    sharpe_ratio: float = 0.0
    sortino_ratio: float = 0.0
    calmar_ratio: float = 0.0
    trades_per_day: float = 0.0
    average_trade_duration: float = 0.0
    start_balance: float = 0.0
    current_balance: float = 0.0
    peak_balance: float = 0.0
    roi_percent: float = 0.0

# =================================================================
# –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° BOTMANAGER
# =================================================================

class BotManager:
    """
    –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
    
    –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–æ 200 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
    ‚úÖ 7+ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    ‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
    ‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π  
    ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    ‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    ‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    
    _instance = None
    _initialized = False
    
    def __new__(cls):
        """–ü–∞—Ç—Ç–µ—Ä–Ω Singleton"""
        if cls._instance is None:
            cls._instance = super(BotManager, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if BotManager._initialized:
            return
            
        BotManager._initialized = True
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û BotManager...")
        
        # === –û–°–ù–û–í–ù–´–ï –ê–¢–†–ò–ë–£–¢–´ ===
        self.status = BotStatus.STOPPED
        self.start_time = None
        self.stop_time = None
        self.pause_time = None
        
        # === –¢–û–†–ì–û–í–´–ï –ü–ê–†–´ - –†–ê–°–®–ò–†–ï–ù–û ===
        self.all_trading_pairs = []          # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
        self.active_pairs = []               # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.inactive_pairs = []             # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        self.blacklisted_pairs = set()       # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        self.watchlist_pairs = []            # –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        self.trending_pairs = []             # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã
        self.high_volume_pairs = []          # –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ –ø–∞—Ä—ã
        
        # === –ü–û–ó–ò–¶–ò–ò –ò –°–î–ï–õ–ö–ò ===
        self.positions = {}                  # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol: position_info}
        self.pending_orders = {}             # –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        self.executed_trades = []            # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        self.failed_trades = []              # –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        self.trades_today = 0               # –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å
        self.daily_profit = 0.0             # –ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å
        self.weekly_profit = 0.0            # –ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é
        self.monthly_profit = 0.0           # –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü
        
        # === –¶–ò–ö–õ–´ –ò –ó–ê–î–ê–ß–ò ===
        self.cycles_count = 0               # –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤
        self._stop_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._pause_event = asyncio.Event() # –°–æ–±—ã—Ç–∏–µ –ø–∞—É–∑—ã
        self._main_task = None              # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
        self.tasks = {}                     # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        self.task_health = {}               # –ó–¥–æ—Ä–æ–≤—å–µ –∑–∞–¥–∞—á
        
        # === –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ ===
        self.components = {}                # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.component_manager = None       # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.exchange = None               # –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
        self.market_analyzer = None        # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞
        self.trader = None                 # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫
        self.risk_manager = None           # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤
        self.portfolio_manager = None      # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.notifier = None              # –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.data_collector = None        # –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        self.strategy_factory = None      # –§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        # === –°–¢–†–ê–¢–ï–ì–ò–ò - –†–ê–°–®–ò–†–ï–ù–û ===
        self.available_strategies = config.ENABLED_STRATEGIES
        self.strategy_instances = {}       # –≠–∫–∑–µ–º–ø–ª—è—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_performance = defaultdict(lambda: {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_profit': 0.0,
            'win_rate': 0.0,
            'avg_profit_per_trade': 0.0,
            'max_drawdown': 0.0,
            'sharpe_ratio': 0.0,
            'sortino_ratio': 0.0,
            'last_used': None,
            'enabled': True,
            'confidence_scores': deque(maxlen=100),
            'recent_performance': deque(maxlen=50)
        })
        
        # === –¢–û–†–ì–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò ===
        self.current_opportunities = {}     # –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ {symbol: opportunity}
        self.opportunity_history = deque(maxlen=1000)  # –ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        self.missed_opportunities = deque(maxlen=100)  # –£–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        # === –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï - –†–ê–°–®–ò–†–ï–ù–û ===
        self.market_state = MarketState(
            overall_trend="UNKNOWN",
            volatility="MEDIUM",
            fear_greed_index=50,
            market_cap=0.0,
            volume_24h=0.0,
            dominance_btc=0.0,
            dominance_eth=0.0,
            active_pairs_count=0,
            trending_pairs=[],
            declining_pairs=[],
            correlation_matrix={},
            sector_performance={},
            market_regime="SIDEWAYS_MARKET",
            risk_level=RiskLevel.MEDIUM
        )
        
        # === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ===
        self.market_data_cache = {}         # –ö—ç—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {symbol: data}
        self.price_history = defaultdict(lambda: deque(maxlen=1000))  # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
        self.volume_history = defaultdict(lambda: deque(maxlen=1000))  # –ò—Å—Ç–æ—Ä–∏—è –æ–±—ä–µ–º–æ–≤
        self.indicator_cache = defaultdict(dict)  # –ö—ç—à –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.candle_cache = defaultdict(lambda: deque(maxlen=500))  # –ö—ç—à —Å–≤–µ—á–µ–π
        
        # === –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===
        self.ml_models = {}                # ML –º–æ–¥–µ–ª–∏ {symbol: model}
        self.ml_predictions = {}           # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {symbol: prediction}
        self.feature_cache = {}            # –ö—ç—à –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML
        self.model_performance = defaultdict(dict)  # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        self.training_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è
        self.prediction_cache = {}         # –ö—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        
        # === –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô ===
        self.news_cache = deque(maxlen=1000)  # –ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_sentiment = {}           # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π {symbol: sentiment}
        self.social_signals = deque(maxlen=500)  # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        self.sentiment_analyzer = None     # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.news_sources = []            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        # === –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ ===
        self.risk_limits = {
            'max_portfolio_risk': config.MAX_PORTFOLIO_RISK_PERCENT / 100,
            'max_daily_loss': config.MAX_DAILY_LOSS_PERCENT / 100,
            'max_correlation': config.MAX_CORRELATION_THRESHOLD,
            'max_positions': config.MAX_POSITIONS,
            'max_daily_trades': config.MAX_DAILY_TRADES
        }
        self.correlation_matrix = {}       # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        self.portfolio_risk = 0.0         # –¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.daily_loss = 0.0             # –î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        self.risk_alerts = []             # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        
        # === –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
        self.performance_metrics = PerformanceMetrics()
        self.system_stats = {}            # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.api_call_count = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫–∏ API –≤—ã–∑–æ–≤–æ–≤
        self.error_count = defaultdict(int)     # –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        self.latency_measurements = deque(maxlen=100)  # –ò–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        
        # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø ===
        self.trading_stats = TradingStatistics()
        self.strategy_stats = defaultdict(lambda: TradingStatistics())
        self.pair_stats = defaultdict(lambda: TradingStatistics())
        self.daily_stats = defaultdict(lambda: TradingStatistics())
        
        # === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
        self.config = config
        self.trading_pairs = config.get_active_trading_pairs()
        self.strategy = 'auto'
        self.mode = 'live' if not config.TEST_MODE else 'test'
        
        # === –°–û–ë–´–¢–ò–Ø –ò –°–õ–£–®–ê–¢–ï–õ–ò ===
        self.event_listeners = defaultdict(list)  # –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        self.event_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
        
        # === –ë–≠–ö–¢–ï–°–¢–ò–ù–ì ===
        self.backtesting_enabled = config.ENABLE_BACKTESTING
        self.backtest_results = {}
        self.optimization_results = {}
        
        # === –≠–ö–°–ü–û–†–¢ –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
        self.export_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.log_buffer = deque(maxlen=10000)  # –ë—É—Ñ–µ—Ä –ª–æ–≥–æ–≤
        
        # === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
        self.circuit_breaker_active = False
        self.emergency_stop_triggered = False
        self.suspicious_activity = []
        
        # === WEBSOCKET –ò –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø ===
        self.websocket_connections = {}
        self.real_time_data = {}
        self.price_alerts = {}
        
        # === THREAD POOL ===
        self.thread_pool = ThreadPoolExecutor(max_workers=config.MAX_CONCURRENT_ANALYSIS)
        
        logger.info("ü§ñ –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ú–∞–∫—Å–∏–º—É–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {config.MAX_TRADING_PAIRS}")
        logger.info(f"üìà –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {config.MAX_POSITIONS}")
        logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {len(self.available_strategies)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._initialization_completed = False
    
    
    
    async def _initialize_components(self):
        """
        –ê–ª–∏–∞—Å –¥–ª—è _initialize_all_components() –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        ‚ùå –û—à–∏–±–∫–∞ –±—ã–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ –≤ __init__ –≤—ã–∑—ã–≤–∞–ª—Å—è:
        asyncio.create_task(self._initialize_components())
        
        ‚úÖ –ê —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –Ω–∞–∑—ã–≤–∞–ª—Å—è:
        async def _initialize_all_components(self)
        
        ‚úÖ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        """
        return await self._initialize_all_components()
    
    # =================================================================
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    # =================================================================
    
    async def start(self) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if self.status == BotStatus.RUNNING:
            return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            self.status = BotStatus.STARTING
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._setup_signal_handlers()
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            init_success = await self._initialize_all_components()
            if not init_success:
                self.status = BotStatus.ERROR
                return False, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
            
            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            config_valid = await self._validate_configuration()
            if not config_valid:
                self.status = BotStatus.ERROR
                return False, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            
            # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
            logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
            exchange_connected = await self._connect_exchange()
            if not exchange_connected:
                self.status = BotStatus.ERROR
                return False, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"
            
            # 4. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            logger.info("üí∞ –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            pairs_discovered = await self._discover_all_trading_pairs()
            if not pairs_discovered:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ")
                self.active_pairs = self.trading_pairs[:config.MAX_TRADING_PAIRS]
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            await self._initialize_strategies()
            
            # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π
            if config.ENABLE_MACHINE_LEARNING:
                logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π...")
                await self._initialize_ml_system()
            
            # 7. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._load_historical_data()
            
            # 8. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
            logger.info("üåê –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞...")
            await self._perform_initial_market_analysis()
            
            # 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("üëÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            await self._setup_monitoring_system()
            
            # 10. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
            await self._start_all_trading_loops()
            
            # 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            health_status = await self._perform_health_check()
            if not health_status['overall_healthy']:
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
            
            # 12. –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if config.ENABLE_WEBSOCKET:
                logger.info("üåê –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
                await self._start_websocket_connections()
            
            # 13. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._send_startup_notification()
            
            self.status = BotStatus.RUNNING
            self.start_time = datetime.utcnow()
            self._stop_event.clear()
            self._pause_event.set()  # –ù–µ –Ω–∞ –ø–∞—É–∑–µ
            
            startup_time = (datetime.utcnow() - self.start_time).total_seconds()
            
            logger.info("‚úÖ –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(self.active_pairs)}")
            logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.available_strategies)}")
            logger.info(f"üß† ML –º–æ–¥–µ–ª–µ–π: {len(self.ml_models)}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {startup_time:.2f}—Å")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._log_startup_statistics()
            
            return True, f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∑–∞ {startup_time:.1f}—Å"
            
        except Exception as e:
            self.status = BotStatus.ERROR
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await self._send_error_notification(error_msg)
            
            return False, error_msg
    
    async def stop(self) -> Tuple[bool, str]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if self.status == BotStatus.STOPPED:
            return False, "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            old_status = self.status
            self.status = BotStatus.STOPPING
            
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._stop_event.set()
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            await self._save_current_state()
            
            # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if config.CLOSE_POSITIONS_ON_STOP:
                logger.info("üìä –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
                await self._close_all_positions_safely()
            
            # 4. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            logger.info("‚ùå –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
            await self._cancel_all_orders()
            
            # 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            await self._stop_all_tasks()
            
            # 6. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if hasattr(self, 'websocket_connections'):
                logger.info("üåê –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
                await self._close_websocket_connections()
            
            # 7. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π
            if config.ENABLE_MACHINE_LEARNING:
                logger.info("üß† –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã...")
                await self._stop_ml_system()
            
            # 8. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await self._export_final_data()
            
            # 9. –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∏—Ä–∂–∏
            logger.info("üì° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏...")
            await self._disconnect_exchange()
            
            # 10. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î...")
            await self._close_database_connections()
            
            # 11. –û—á–∏—â–∞–µ–º –∫—ç—à–∏
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π...")
            await self._cleanup_caches()
            
            # 12. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_shutdown_notification(old_status)
            
            self.status = BotStatus.STOPPED
            self.stop_time = datetime.utcnow()
            
            if self.start_time:
                uptime = (self.stop_time - self.start_time).total_seconds()
                logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.1f}—Å ({uptime/3600:.1f}—á)")
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}"
            logger.error(error_msg)
            logger.error(traceback.format_exc())
            return False, error_msg
    
    async def pause(self) -> Tuple[bool, str]:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.status != BotStatus.RUNNING:
            return False, "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        try:
            logger.info("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            self.status = BotStatus.PAUSED
            self.pause_time = datetime.utcnow()
            self._pause_event.clear()  # –°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._cancel_pending_orders()
            
            await self._send_pause_notification()
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True, "–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    async def resume(self) -> Tuple[bool, str]:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        if self.status != BotStatus.PAUSED:
            return False, "–ë–æ—Ç –Ω–µ –Ω–∞ –ø–∞—É–∑–µ"
        
        try:
            logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            self.status = BotStatus.RUNNING
            self._pause_event.set()  # –°–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._refresh_market_data()
            
            await self._send_resume_notification()
            
            if self.pause_time:
                pause_duration = (datetime.utcnow() - self.pause_time).total_seconds()
                logger.info(f"‚úÖ –†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã {pause_duration:.1f}—Å")
            
            return True, "–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    async def emergency_stop(self) -> Tuple[bool, str]:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.critical("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
            self.status = BotStatus.EMERGENCY_STOP
            self.emergency_stop_triggered = True
            
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._emergency_close_all_positions()
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
            await self._cancel_all_orders()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ü–∏–∫–ª—ã
            self._stop_event.set()
            
            await self._send_emergency_notification()
            
            logger.critical("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
            logger.critical(error_msg)
            return False, error_msg
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        current_time = datetime.utcnow()
        uptime = None
        
        if self.start_time:
            uptime = (current_time - self.start_time).total_seconds()
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status_info = {
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
            'status': self.status.value,
            'is_running': self.status == BotStatus.RUNNING,
            'is_paused': self.status == BotStatus.PAUSED,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'stop_time': self.stop_time.isoformat() if self.stop_time else None,
            'pause_time': self.pause_time.isoformat() if self.pause_time else None,
            'uptime_seconds': uptime,
            'cycles_count': self.cycles_count,
            'mode': self.mode,
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
            'trading_pairs': {
                'total_pairs': len(self.all_trading_pairs),
                'active_pairs': len(self.active_pairs),
                'inactive_pairs': len(self.inactive_pairs),
                'blacklisted_pairs': len(self.blacklisted_pairs),
                'watchlist_pairs': len(self.watchlist_pairs),
                'trending_pairs': self.trending_pairs[:10],  # –¢–æ–ø-10
                'high_volume_pairs': self.high_volume_pairs[:10]
            },
            
            # –ü–æ–∑–∏—Ü–∏–∏ –∏ —Å–¥–µ–ª–∫–∏
            'trading': {
                'open_positions': len(self.positions),
                'pending_orders': len(self.pending_orders),
                'trades_today': self.trades_today,
                'daily_profit': round(self.daily_profit, 2),
                'weekly_profit': round(self.weekly_profit, 2),
                'monthly_profit': round(self.monthly_profit, 2),
                'opportunities_found': len(self.current_opportunities),
                'missed_opportunities': len(self.missed_opportunities)
            },
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
            'strategies': {
                'available_strategies': self.available_strategies,
                'active_strategies': [name for name, perf in self.strategy_performance.items() 
                                   if perf.get('enabled', True)],
                'best_performing_strategy': self._get_best_strategy(),
                'strategy_performance': dict(self.strategy_performance)
            },
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            'market_state': {
                'overall_trend': self.market_state.overall_trend,
                'volatility': self.market_state.volatility,
                'fear_greed_index': self.market_state.fear_greed_index,
                'market_regime': self.market_state.market_regime,
                'risk_level': self.market_state.risk_level.value,
                'btc_dominance': round(self.market_state.dominance_btc, 2),
                'eth_dominance': round(self.market_state.dominance_eth, 2),
                'total_market_cap': self.market_state.market_cap,
                'volume_24h': self.market_state.volume_24h
            },
            
            # –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            'machine_learning': {
                'enabled': config.ENABLE_MACHINE_LEARNING,
                'models_loaded': len(self.ml_models),
                'predictions_cached': len(self.ml_predictions),
                'models_performance': dict(self.model_performance),
                'training_queue_size': self.training_queue.qsize() if hasattr(self.training_queue, 'qsize') else 0
            },
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
            'news_analysis': {
                'enabled': config.ENABLE_NEWS_ANALYSIS,
                'news_cached': len(self.news_cache),
                'sentiment_scores': len(self.news_sentiment),
                'social_signals': len(self.social_signals)
            },
            
            # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            'risk_management': {
                'portfolio_risk': round(self.portfolio_risk * 100, 2),
                'daily_loss': round(self.daily_loss * 100, 2),
                'risk_alerts': len(self.risk_alerts),
                'circuit_breaker_active': self.circuit_breaker_active,
                'correlation_pairs': len(self.correlation_matrix),
                'risk_limits': self.risk_limits
            },
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            'performance': asdict(self.performance_metrics),
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            'components': {
                name: {
                    'status': comp.status.value,
                    'last_heartbeat': comp.last_heartbeat.isoformat() if comp.last_heartbeat else None,
                    'restart_count': comp.restart_count,
                    'is_critical': comp.is_critical
                }
                for name, comp in self.components.items()
            },
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'statistics': asdict(self.trading_stats),
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            'tasks': {
                name: {
                    'running': not task.done() if task else False,
                    'health': self.task_health.get(name, 'unknown')
                }
                for name, task in self.tasks.items()
            },
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            'configuration': {
                'max_positions': config.MAX_POSITIONS,
                'max_daily_trades': config.MAX_DAILY_TRADES,
                'max_trading_pairs': config.MAX_TRADING_PAIRS,
                'position_size_percent': config.POSITION_SIZE_PERCENT,
                'stop_loss_percent': config.STOP_LOSS_PERCENT,
                'take_profit_percent': config.TAKE_PROFIT_PERCENT,
                'testnet_mode': config.BYBIT_TESTNET,
                'ml_enabled': config.ENABLE_MACHINE_LEARNING,
                'news_analysis_enabled': config.ENABLE_NEWS_ANALYSIS
            },
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            'timestamps': {
                'current_time': current_time.isoformat(),
                'last_analysis': getattr(self, 'last_analysis_time', None),
                'last_trade': getattr(self, 'last_trade_time', None),
                'last_health_check': getattr(self, 'last_health_check_time', None)
            }
        }
        
        return status_info
    
    # =================================================================
    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
    # =================================================================
    
    async def _initialize_all_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            initialization_order = [
                ('database', self._init_database, [], True),
                ('config_validator', self._init_config_validator, ['database'], True),
                ('exchange_client', self._init_exchange_client, ['config_validator'], True),
                ('data_collector', self._init_data_collector, ['exchange_client'], True),
                ('market_analyzer', self._init_market_analyzer, ['data_collector'], True),
                ('risk_manager', self._init_risk_manager, ['market_analyzer'], True),
                ('portfolio_manager', self._init_portfolio_manager, ['risk_manager'], True),
                ('strategy_factory', self._init_strategy_factory, ['market_analyzer'], True),
                ('trader', self._init_trader, ['exchange_client', 'risk_manager'], True),
                ('notifier', self._init_notifier, [], False),
                ('ml_system', self._init_ml_system, ['data_collector'], False),
                ('news_analyzer', self._init_news_analyzer, [], False),
                ('websocket_manager', self._init_websocket_manager, ['exchange_client'], False),
                ('export_manager', self._init_export_manager, ['database'], False),
                ('health_monitor', self._init_health_monitor, [], False)
            ]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            for comp_name, init_func, dependencies, is_critical in initialization_order:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    deps_ready = all(
                        self.components.get(dep, ComponentInfo('', ComponentStatus.NOT_INITIALIZED)).status == ComponentStatus.READY
                        for dep in dependencies
                    )
                    
                    if not deps_ready and dependencies:
                        logger.warning(f"‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è {comp_name} –Ω–µ –≥–æ—Ç–æ–≤—ã: {dependencies}")
                        if is_critical:
                            return False
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                    comp_info = ComponentInfo(
                        name=comp_name,
                        status=ComponentStatus.INITIALIZING,
                        dependencies=dependencies,
                        is_critical=is_critical
                    )
                    self.components[comp_name] = comp_info
                    
                    logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {comp_name}...")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    result = await init_func()
                    
                    if result:
                        comp_info.status = ComponentStatus.READY
                        comp_info.last_heartbeat = datetime.utcnow()
                        logger.info(f"‚úÖ {comp_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    else:
                        comp_info.status = ComponentStatus.FAILED
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}")
                        if is_critical:
                            return False
                        
                except Exception as e:
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {comp_name}: {e}")
                    if comp_name in self.components:
                        self.components[comp_name].status = ComponentStatus.FAILED
                        self.components[comp_name].error = str(e)
                    if is_critical:
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            critical_components = [name for name, comp in self.components.items() if comp.is_critical]
            failed_critical = [name for name in critical_components 
                             if self.components[name].status != ComponentStatus.READY]
            
            if failed_critical:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {failed_critical}")
                return False
            
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len([c for c in self.components.values() if c.status == ComponentStatus.READY])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def _init_database(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–º–ø–æ—Ä—Ç text –¥–ª—è SQLAlchemy 2.x
            from sqlalchemy import text
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db = SessionLocal()
            try:
                db.execute(text("SELECT 1"))  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!
                db.commit()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            finally:
                db.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    async def _init_config_validator(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not config.validate_config():
                return False
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def _init_exchange_client(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            from ..exchange.client import ExchangeClient
            self.exchange = ExchangeClient()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏: {e}")
            return False
    
    async def _init_data_collector(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def _init_market_analyzer(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            from ..analysis.market_analyzer import MarketAnalyzer
            self.market_analyzer = MarketAnalyzer()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
            return False
    
    async def _init_risk_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            return False
    
    async def _init_portfolio_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return False
    
    async def _init_strategy_factory(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return False
    
    async def _init_trader(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫: {e}")
            return False
    
    async def _init_notifier(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
            if config.TELEGRAM_ENABLED and config.TELEGRAM_BOT_TOKEN:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                logger.info("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def _init_ml_system(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if not config.ENABLE_MACHINE_LEARNING:
                logger.info("‚ö†Ô∏è –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return True
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML —Å–∏—Å—Ç–µ–º—É (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    async def _init_news_analyzer(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if not config.ENABLE_NEWS_ANALYSIS:
                logger.info("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return False
    
    async def _init_websocket_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return False
    
    async def _init_export_manager(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    async def _init_health_monitor(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è (–∑–∞–≥–ª—É—à–∫–∞)
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return False
    
    # =================================================================
    # –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –¢–û–†–ì–û–í–´–ú–ò –ü–ê–†–ê–ú–ò
    # =================================================================
    
    async def _discover_all_trading_pairs(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            
            if config.ENABLE_AUTO_PAIR_DISCOVERY and self.exchange:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏
                markets = await self._fetch_all_markets_from_exchange()
                
                if not markets:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏")
                    return False
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                filtered_pairs = await self._filter_and_rank_pairs(markets)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                max_pairs = config.MAX_TRADING_PAIRS
                self.all_trading_pairs = filtered_pairs[:max_pairs]
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await self._categorize_trading_pairs()
                
                logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.all_trading_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                logger.info(f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_pairs)}")
                logger.info(f"üëÄ –í —Å–ø–∏—Å–∫–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {len(self.watchlist_pairs)}")
                
                return True
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                self._load_pairs_from_config()
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return False
    
    async def _fetch_all_markets_from_exchange(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤ —Å –±–∏—Ä–∂–∏
        
        –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
        """
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –±–∏—Ä–∂–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π mock —Å–ø–∏—Å–æ–∫
            markets = []
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            base_pairs = config.EXTENDED_TRADING_PAIRS
            
            for symbol in base_pairs:
                market = {
                    'symbol': symbol,
                    'base': symbol.replace('USDT', '').replace('BUSD', '').replace('USDC', ''),
                    'quote': 'USDT' if 'USDT' in symbol else 'BUSD' if 'BUSD' in symbol else 'USDC',
                    'active': True,
                    'type': 'spot',
                    'spot': True,
                    'future': False,
                    'option': False
                }
                markets.append(market)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –∏ —Ä–∞—Å—á–µ—Ç–∞ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            for market in markets:
                # –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
                base_price = np.random.uniform(0.1, 1000)
                
                # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è base_price
                market.update({
                    'volume_24h': np.random.uniform(1000000, 100000000),
                    'price': base_price,  # ‚Üê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –°–ù–ê–ß–ê–õ–ê
                    'change_24h': np.random.uniform(-15, 15),
                    'high_24h': np.random.uniform(base_price, base_price * 1.1),  # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º base_price
                    'low_24h': np.random.uniform(base_price * 0.9, base_price),   # ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º base_price
                    'trades_count': np.random.randint(1000, 100000),
                    'bid': base_price * 0.999,
                    'ask': base_price * 1.001,
                    'spread': base_price * 0.002
                })
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤ —Å –±–∏—Ä–∂–∏")
            return markets
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
            return []
    
    async def _filter_and_rank_pairs(self, markets: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            filtered_pairs = []
            
            for market in markets:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if await self._passes_pair_filters(market):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                    score = await self._calculate_pair_score(market)
                    market['trading_score'] = score
                    filtered_pairs.append(market)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É (–ª—É—á—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
            filtered_pairs.sort(key=lambda x: x['trading_score'], reverse=True)
            
            logger.info(f"üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_pairs)} –ø–∞—Ä –∏–∑ {len(markets)}")
            return filtered_pairs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä: {e}")
            return []
    
    async def _passes_pair_filters(self, market: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            symbol = market.get('symbol', '')
            base = market.get('base', '')
            quote = market.get('quote', '')
            volume_24h = market.get('volume_24h', 0)
            price = market.get('price', 0)
            
            # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if not market.get('active', False):
                return False
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ
            if quote not in config.ALLOWED_QUOTE_ASSETS:
                return False
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º –±–∞–∑–æ–≤—ã–º –∞–∫—Ç–∏–≤–∞–º
            if base in config.EXCLUDED_BASE_ASSETS:
                return False
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É
            if volume_24h < config.MIN_VOLUME_24H_USD:
                return False
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if price < config.MIN_PRICE_USD or price > config.MAX_PRICE_USD:
                return False
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            if symbol in self.blacklisted_pairs:
                return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            change_24h = abs(market.get('change_24h', 0))
            if change_24h > 50:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ
                return False
            
            trades_count = market.get('trades_count', 0)
            if trades_count < 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                return False
            
            spread_percent = (market.get('ask', 0) - market.get('bid', 0)) / price * 100
            if spread_percent > 1:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 1%
                return False
            
            return True
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è {market.get('symbol', 'unknown')}: {e}")
            return False
    
    async def _calculate_pair_score(self, market: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            score = 0.0
            
            # –°–∫–æ—Ä –ø–æ –æ–±—ä–µ–º—É (30%)
            volume_24h = market.get('volume_24h', 0)
            volume_score = min(1.0, volume_24h / 50000000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ $50M
            score += volume_score * 0.3
            
            # –°–∫–æ—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤ (20%)
            trades_count = market.get('trades_count', 0)
            activity_score = min(1.0, trades_count / 10000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10k —Å–¥–µ–ª–æ–∫
            score += activity_score * 0.2
            
            # –°–∫–æ—Ä –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Å–ø—Ä–µ–¥—É) (20%)
            price = market.get('price', 1)
            spread = (market.get('ask', price) - market.get('bid', price)) / price
            liquidity_score = max(0, 1 - spread * 100)  # –ß–µ–º –º–µ–Ω—å—à–µ —Å–ø—Ä–µ–¥, —Ç–µ–º –ª—É—á—à–µ
            score += liquidity_score * 0.2
            
            # –°–∫–æ—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (15%)
            change_24h = abs(market.get('change_24h', 0))
            volatility_score = min(1.0, change_24h / 10)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10%
            score += volatility_score * 0.15
            
            # –°–∫–æ—Ä –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ (15%)
            base = market.get('base', '')
            popularity_score = self._get_asset_popularity_score(base)
            score += popularity_score * 0.15
            
            return min(1.0, score)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞ –¥–ª—è {market.get('symbol', 'unknown')}: {e}")
            return 0.0
    
    def _get_asset_popularity_score(self, base_asset: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞"""
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π —Å–∫–æ—Ä
        popularity_map = {
            'BTC': 1.0, 'ETH': 0.95, 'BNB': 0.9, 'SOL': 0.85, 'ADA': 0.8,
            'XRP': 0.75, 'DOT': 0.7, 'AVAX': 0.65, 'MATIC': 0.6, 'LINK': 0.55,
            'UNI': 0.5, 'LTC': 0.45, 'BCH': 0.4, 'ATOM': 0.35, 'FIL': 0.3
        }
        return popularity_map.get(base_asset, 0.1)  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    
    async def _categorize_trading_pairs(self):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.active_pairs.clear()
            self.watchlist_pairs.clear()
            self.trending_pairs.clear()
            self.high_volume_pairs.clear()
            
            if not self.all_trading_pairs:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
            sorted_pairs = sorted(self.all_trading_pairs, 
                                key=lambda x: x.get('trading_score', 0), 
                                reverse=True)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø 30% –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            max_active = min(config.MAX_POSITIONS, len(sorted_pairs) // 3)
            self.active_pairs = [pair['symbol'] for pair in sorted_pairs[:max_active]]
            
            # –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 20%)
            watchlist_count = min(50, len(sorted_pairs) // 5)
            start_idx = len(self.active_pairs)
            self.watchlist_pairs = [pair['symbol'] for pair in sorted_pairs[start_idx:start_idx + watchlist_count]]
            
            # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã (—Å –≤—ã—Å–æ–∫–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞ 24—á)
            trending_pairs = [pair for pair in sorted_pairs if abs(pair.get('change_24h', 0)) > 5]
            self.trending_pairs = [pair['symbol'] for pair in trending_pairs[:20]]
            
            # –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø –ø–æ –æ–±—ä–µ–º—É)
            volume_sorted = sorted(sorted_pairs, key=lambda x: x.get('volume_24h', 0), reverse=True)
            self.high_volume_pairs = [pair['symbol'] for pair in volume_sorted[:20]]
            
            logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            logger.info(f"  üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(self.active_pairs)}")
            logger.info(f"  üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ: {len(self.watchlist_pairs)}")
            logger.info(f"  üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ: {len(self.trending_pairs)}")
            logger.info(f"  üí∞ –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ: {len(self.high_volume_pairs)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä: {e}")
    
    def _load_pairs_from_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            configured_pairs = config.get_active_trading_pairs()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç all_trading_pairs
            self.all_trading_pairs = [
                {
                    'symbol': symbol,
                    'base': symbol.replace('USDT', '').replace('BUSD', '').replace('USDC', ''),
                    'quote': 'USDT',
                    'trading_score': 0.5  # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä
                }
                for symbol in configured_pairs
            ]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            max_pairs = config.MAX_TRADING_PAIRS
            self.all_trading_pairs = self.all_trading_pairs[:max_pairs]
            self.active_pairs = [pair['symbol'] for pair in self.all_trading_pairs[:config.MAX_POSITIONS]]
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.all_trading_pairs)} –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # Fallback –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É
            self.active_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT']
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –¶–ò–ö–õ–´ –ò –°–¢–†–ê–¢–ï–ì–ò–ò 
    # =================================================================
    
    async def _start_all_trading_loops(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤...")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            self.tasks['main_trading'] = asyncio.create_task(
                self._main_trading_loop(), name="main_trading"
            )
            
            # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
            self.tasks['market_monitoring'] = asyncio.create_task(
                self._market_monitoring_loop(), name="market_monitoring"
            )
            
            # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            self.tasks['pair_discovery'] = asyncio.create_task(
                self._pair_discovery_loop(), name="pair_discovery"
            )
            
            # –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
            self.tasks['position_management'] = asyncio.create_task(
                self._position_management_loop(), name="position_management"
            )
            
            # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
            self.tasks['risk_monitoring'] = asyncio.create_task(
                self._risk_monitoring_loop(), name="risk_monitoring"
            )
            
            # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
            self.tasks['health_monitoring'] = asyncio.create_task(
                self._health_monitoring_loop(), name="health_monitoring"
            )
            
            # –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.tasks['performance_monitoring'] = asyncio.create_task(
                self._performance_monitoring_loop(), name="performance_monitoring"
            )
            
            # –¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            self.tasks['data_export'] = asyncio.create_task(
                self._data_export_loop(), name="data_export"
            )
            
            # –¶–∏–∫–ª—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if config.ENABLE_MACHINE_LEARNING:
                self.tasks['ml_training'] = asyncio.create_task(
                    self._ml_training_loop(), name="ml_training"
                )
                self.tasks['ml_prediction'] = asyncio.create_task(
                    self._ml_prediction_loop(), name="ml_prediction"
                )
            
            # –¶–∏–∫–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if config.ENABLE_NEWS_ANALYSIS:
                self.tasks['news_collection'] = asyncio.create_task(
                    self._news_collection_loop(), name="news_collection"
                )
                self.tasks['sentiment_analysis'] = asyncio.create_task(
                    self._sentiment_analysis_loop(), name="sentiment_analysis"
                )
            
            # –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.tasks['event_processing'] = asyncio.create_task(
                self._event_processing_loop(), name="event_processing"
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∑–∞–¥–∞—á
            for task_name in self.tasks:
                self.task_health[task_name] = 'starting'
            
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.tasks)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤: {e}")
            raise
    
    async def _main_trading_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        self.task_health['main_trading'] = 'running'
        
        consecutive_errors = 0
        max_consecutive_errors = 5
        
        while not self._stop_event.is_set():
            try:
                # –ñ–¥–µ–º –µ—Å–ª–∏ –Ω–∞ –ø–∞—É–∑–µ
                await self._pause_event.wait()
                
                cycle_start = datetime.utcnow()
                self.cycles_count += 1
                
                logger.info(f"üìä –¶–∏–∫–ª #{self.cycles_count} - –∞–Ω–∞–ª–∏–∑ {len(self.active_pairs)} –ø–∞—Ä")
                
                # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await self._update_market_data()
                
                # 2. –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                opportunities = await self._find_all_trading_opportunities()
                
                # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                filtered_opportunities = await self._filter_opportunities(opportunities)
                ranked_opportunities = await self._rank_all_opportunities(filtered_opportunities)
                
                # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
                risk_check = await self._perform_pre_trade_risk_check()
                if not risk_check:
                    logger.warning("‚ö†Ô∏è –†–∏—Å–∫-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é")
                    await asyncio.sleep(config.ANALYSIS_INTERVAL_SECONDS)
                    continue
                
                # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
                trades_executed = await self._execute_best_trades(ranked_opportunities)
                
                # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                await self._update_strategy_performance()
                
                # 7. –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                await self._cleanup_expired_opportunities()
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ü–∏–∫–ª–µ
                consecutive_errors = 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                cycle_time = (datetime.utcnow() - cycle_start).total_seconds()
                self.performance_metrics.analysis_time_avg = (
                    self.performance_metrics.analysis_time_avg * 0.9 + cycle_time * 0.1
                )
                self.performance_metrics.pairs_per_second = (
                    len(self.active_pairs) / cycle_time if cycle_time > 0 else 0
                )
                
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª #{self.cycles_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_time:.2f}—Å, —Å–¥–µ–ª–æ–∫: {trades_executed}")
                
                # –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                sleep_time = max(1, config.ANALYSIS_INTERVAL_SECONDS - cycle_time)
                await asyncio.sleep(sleep_time)
                
            except asyncio.CancelledError:
                logger.info("üõë –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                self.task_health['main_trading'] = 'cancelled'
                break
            except Exception as e:
                consecutive_errors += 1
                self.task_health['main_trading'] = 'error'
                
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ #{consecutive_errors}: {e}")
                
                if consecutive_errors >= max_consecutive_errors:
                    logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {consecutive_errors}")
                    await self._trigger_emergency_stop("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ")
                    break
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                error_sleep = min(300, 30 * consecutive_errors)  # –î–æ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(error_sleep)
        
        self.task_health['main_trading'] = 'stopped'
        logger.info("üõë –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # ‚è≠Ô∏è –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ò–• –ú–ï–¢–û–î–ê–•...
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ—â–µ ~1500 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ —Å–æ –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–û–†–û–í–¨–ï–ú –°–ò–°–¢–ï–ú–´
    # =================================================================
    
    async def _perform_health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_info = {
                'timestamp': datetime.utcnow().isoformat(),
                'overall_healthy': True,
                'components': {},
                'tasks': {},
                'system': {},
                'alerts': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            for name, comp in self.components.items():
                is_healthy = comp.status == ComponentStatus.READY
                if comp.last_heartbeat:
                    time_since_heartbeat = (datetime.utcnow() - comp.last_heartbeat).total_seconds()
                    is_healthy = is_healthy and time_since_heartbeat < comp.health_check_interval * 2
                
                health_info['components'][name] = {
                    'status': comp.status.value,
                    'healthy': is_healthy,
                    'last_heartbeat': comp.last_heartbeat.isoformat() if comp.last_heartbeat else None,
                    'restart_count': comp.restart_count
                }
                
                if not is_healthy and comp.is_critical:
                    health_info['overall_healthy'] = False
                    health_info['alerts'].append(f"Critical component {name} is unhealthy")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á
            for name, task in self.tasks.items():
                task_healthy = task and not task.done()
                health_info['tasks'][name] = {
                    'running': task_healthy,
                    'health': self.task_health.get(name, 'unknown'),
                    'done': task.done() if task else True
                }
                
                if not task_healthy:
                    health_info['alerts'].append(f"Task {name} is not running")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            try:
                process = psutil.Process()
                memory_info = process.memory_info()
                
                health_info['system'] = {
                    'memory_usage_mb': memory_info.rss / 1024 / 1024,
                    'cpu_percent': process.cpu_percent(),
                    'open_files': len(process.open_files()),
                    'threads': process.num_threads()
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                if health_info['system']['memory_usage_mb'] > 2048:  # 2GB
                    health_info['alerts'].append("High memory usage detected")
                
            except Exception as e:
                health_info['system']['error'] = str(e)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            if self.trades_today >= config.MAX_DAILY_TRADES * 0.9:
                health_info['alerts'].append("Approaching daily trade limit")
            
            if len(self.positions) >= config.MAX_POSITIONS * 0.9:
                health_info['alerts'].append("Approaching position limit")
            
            # –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
            if health_info['alerts']:
                health_info['overall_healthy'] = False
            
            self.last_health_check_time = datetime.utcnow().isoformat()
            return health_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {
                'timestamp': datetime.utcnow().isoformat(),
                'overall_healthy': False,
                'error': str(e)
            }
    
    # =================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)
    # =================================================================
    
    async def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        pass
    
    async def _validate_configuration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return True
    
    async def _connect_exchange(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        return True
    
    async def _initialize_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        pass
    
    async def _initialize_ml_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML —Å–∏—Å—Ç–µ–º—ã"""
        pass
    
    async def _load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    async def _perform_initial_market_analysis(self):
        """–ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        pass
    
    async def _setup_monitoring_system(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        pass
    
    async def _start_websocket_connections(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        pass
    
    async def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        pass
    
    async def _log_startup_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        pass
    
    async def _save_current_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        pass
    
    async def _close_all_positions_safely(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        pass
    
    async def _cancel_all_orders(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        pass
    
    async def _stop_all_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        for task_name, task in self.tasks.items():
            if task and not task.done():
                task.cancel()
                try:
                    await asyncio.wait_for(task, timeout=5.0)
                except asyncio.TimeoutError:
                    logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {task_name}")
                except asyncio.CancelledError:
                    pass
    
    async def _close_websocket_connections(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        pass
    
    async def _stop_ml_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ML —Å–∏—Å—Ç–µ–º—ã"""
        pass
    
    async def _export_final_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    async def _disconnect_exchange(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        pass
    
    async def _close_database_connections(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
        pass
    
    async def _cleanup_caches(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π"""
        self.market_data_cache.clear()
        self.ml_predictions.clear()
        self.current_opportunities.clear()
    
    async def _send_shutdown_notification(self, old_status):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        pass
    
    async def _send_error_notification(self, error_msg):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        pass
    
    async def _cancel_pending_orders(self):
        """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        pass
    
    async def _send_pause_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—É–∑–µ"""
        pass
    
    async def _refresh_market_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    async def _send_resume_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        pass
    
    async def _emergency_close_all_positions(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        pass
    
    async def _send_emergency_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        pass
    
    def _get_best_strategy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.strategy_performance:
            return None
        
        best_strategy = max(
            self.strategy_performance.items(),
            key=lambda x: x[1].get('win_rate', 0)
        )
        return best_strategy[0]
    
    # =================================================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¶–ò–ö–õ–´ (–∑–∞–≥–ª—É—à–∫–∏)
    # =================================================================
    
    async def _market_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            except asyncio.CancelledError:
                break
    
    async def _pair_discovery_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä
                await asyncio.sleep(config.PAIR_DISCOVERY_INTERVAL_HOURS * 3600)
            except asyncio.CancelledError:
                break
    
    async def _position_management_loop(self):
        """–¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
                await asyncio.sleep(30)
            except asyncio.CancelledError:
                break
    
    async def _risk_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤
                await asyncio.sleep(60)
            except asyncio.CancelledError:
                break
    
    async def _health_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                health_status = await self._perform_health_check()
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            except asyncio.CancelledError:
                break
    
    async def _performance_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await asyncio.sleep(60)
            except asyncio.CancelledError:
                break
    
    async def _data_export_loop(self):
        """–¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                await asyncio.sleep(3600)  # 1 —á–∞—Å
            except asyncio.CancelledError:
                break
    
    async def _ml_training_loop(self):
        """–¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è ML"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML
                await asyncio.sleep(config.RETRAIN_INTERVAL_HOURS * 3600)
            except asyncio.CancelledError:
                break
    
    async def _ml_prediction_loop(self):
        """–¶–∏–∫–ª ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            except asyncio.CancelledError:
                break
    
    async def _news_collection_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            except asyncio.CancelledError:
                break
    
    async def _sentiment_analysis_loop(self):
        """–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            except asyncio.CancelledError:
                break
    
    async def _event_processing_loop(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        while not self._stop_event.is_set():
            try:
                await self._pause_event.wait()
                # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
                await asyncio.sleep(1)
            except asyncio.CancelledError:
                break
    
    # =================================================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò (–∑–∞–≥–ª—É—à–∫–∏)
    # =================================================================
    
    async def _update_market_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    async def _find_all_trading_opportunities(self) -> List[TradingOpportunity]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return []
    
    async def _filter_opportunities(self, opportunities: List[TradingOpportunity]) -> List[TradingOpportunity]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return opportunities
    
    async def _rank_all_opportunities(self, opportunities: List[TradingOpportunity]) -> List[TradingOpportunity]:
        """–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        return opportunities
    
    async def _perform_pre_trade_risk_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
        return True
    
    async def _execute_best_trades(self, opportunities: List[TradingOpportunity]) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫"""
        return 0
    
    async def _update_strategy_performance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        pass
    
    async def _cleanup_expired_opportunities(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        pass
    
    async def _trigger_emergency_stop(self, reason: str):
        """–ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        logger.critical(f"üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {reason}")
        await self.emergency_stop()
    
    # =================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    # =================================================================
    
    async def update_pairs(self, pairs: List[str]) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.trading_pairs = pairs
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        self.active_pairs = pairs[:config.MAX_TRADING_PAIRS]
        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {len(pairs)}")
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return (
            f"BotManager(status={self.status.value}, "
            f"pairs={len(self.active_pairs)}, "
            f"positions={len(self.positions)}, "
            f"cycles={self.cycles_count}, "
            f"uptime={self.start_time})"
        )


# =========================================================================
# === –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ===
# =========================================================================

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ (Singleton)
bot_manager = BotManager()

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ['BotManager', 'bot_manager']

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
    # –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("ü§ñ BotManager module loaded successfully")
    print(f"üìä Manager instance: {bot_manager}")
    print(f"üîß Configuration loaded: {hasattr(config, 'BYBIT_API_KEY')}")