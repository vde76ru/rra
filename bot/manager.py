"""
–ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/bot/manager.py

–≠—Ç–æ—Ç —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è "–º–æ–∑–≥–æ–º" –≤—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞. –û–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç:
- –ó–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–±–∏—Ä–∂–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ —Ä–∏—Å–∫–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

–í–∞–∂–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
1. Singleton pattern - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
2. Graceful degradation - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–±–æ—è—Ö
3. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
4. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import logging
import psutil
import os
from typing import Any, List, Optional, Tuple, Dict
from datetime import datetime, timedelta
from enum import Enum
import random

# ‚úÖ –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å SQL
from sqlalchemy import text, func
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError


# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from ..core.config import config
from ..core.database import SessionLocal
from ..core.models import Trade, Signal, BotState, TradingPair, TradeStatus, OrderSide, Balance, User
from ..exchange.client import ExchangeClient
from ..strategies import strategy_factory
from ..analysis.market_analyzer import MarketAnalyzer
from ..notifications.telegram import telegram_notifier
from .trader import Trader
from .risk_manager import RiskManager
from ..strategies.auto_strategy_selector import auto_strategy_selector
from ..logging.smart_logger import SmartLogger
from ..logging.log_manager import cleanup_scheduler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
smart_logger = SmartLogger(__name__)
logger = smart_logger  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º


class BotStatus(Enum):
    """
    –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±–æ—Ç–∞
    
    –ö–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –∏–º–µ–µ—Ç —Å–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    - STOPPED: –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    - STARTING: –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    - RUNNING: –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç
    - STOPPING: –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
    - ERROR: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    """
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"
    ERROR = "error"

class BotManager:
    """
    –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:
    - –ú–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
    - –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ
    - –ê–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞
    - –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Singleton
    _instance = None
    _initialized = False
    
    def __new__(cls):
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞.
        –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö BotManager() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç.
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏)
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ _initialized, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Singleton).
        """
        if not BotManager._initialized:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BotManager...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            asyncio.create_task(self._initialize_logging())
            
            # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===
            # –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å
            self.exchange = ExchangeClient()           # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∏—Ä–∂–µ–π
            self.analyzer = MarketAnalyzer()           # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.notifier = telegram_notifier          # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
            self.strategy_factory = strategy_factory  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            self.trader = Trader(self.exchange)        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
            self.risk_manager = RiskManager()          # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
            
            # === –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ===
            self.status = BotStatus.STOPPED
            self.positions: Dict[str, Trade] = {}      # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol: Trade}
            self.active_pairs: List[str] = []          # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
            
            # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–û–ú ===
            self._main_task: Optional[asyncio.Task] = None  # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            self._stop_event = asyncio.Event()              # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._process_info: Dict = {}                   # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
            # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
            self.start_time: Optional[datetime] = None
            self.cycles_count = 0                      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            self.trades_today = 0                      # –°–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._load_state_from_db()
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            BotManager._initialized = True
            logger.info("‚úÖ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def _initialize_logging(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º DB writer –¥–ª—è –ª–æ–≥–æ–≤
        await smart_logger.start_db_writer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏
        await cleanup_scheduler.start()
        
        smart_logger.info(
            "–°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
            category='system',
            log_stats=smart_logger.get_statistics()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    
    # =========================================================================
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú –ë–û–¢–ê ===
    # =========================================================================
    
    async def start(self) -> Tuple[bool, str]:
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (API, –ë–î, –±–∞–ª–∞–Ω—Å)
        3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        4. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        if self.status in [BotStatus.RUNNING, BotStatus.STARTING]:
            message = f"–ë–æ—Ç —É–∂–µ {self.status.value}"
            logger.warning(f"‚ö†Ô∏è {message}")
            return False, message
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
            self.status = BotStatus.STARTING
            smart_logger.info(
                "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...",
                category='system',
                action='bot_start'
            )
                        
            # === –®–ê–ì 1: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            if not await self._pre_start_checks():
                raise ValueError("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
            # === –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
            logger.info("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
            await self._load_configuration()
            
            # === –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –í –ë–î ===
            logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            self._update_bot_state_db(is_running=True)
            
            # === –®–ê–ì 4: –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –¶–ò–ö–õ–ê ===
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª...")
            self._stop_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._main_task = asyncio.create_task(self._trading_loop())
            
            # === –®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–¶–ï–°–°–ï ===
            self._update_process_info()
            
            # === –®–ê–ì 6: –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–ê–ü–£–°–ö–ï ===
            try:
                await self.notifier.send_startup_message(
                    pairs=self.active_pairs,
                    mode='TESTNET' if config.BYBIT_TESTNET else 'MAINNET'
                )
            except Exception as notify_error:
                # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {notify_error}")
            
            # === –§–ò–ù–ê–õ: –£–°–ü–ï–®–ù–´–ô –ó–ê–ü–£–°–ö ===
            self.status = BotStatus.RUNNING
            self.start_time = datetime.utcnow()
            
            success_message = f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {len(self.active_pairs)}"
            logger.info(f"‚úÖ {success_message}")
            return True, success_message
            
        except Exception as e:
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å ERROR
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}", exc_info=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            self._update_bot_state_db(is_running=False)
            
            return False, error_msg
    
    async def stop(self) -> Tuple[bool, str]:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        2. –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—É
        3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        4. –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
        if self.status not in [BotStatus.RUNNING, BotStatus.ERROR]:
            message = f"–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.status.value})"
            logger.warning(f"‚ö†Ô∏è {message}")
            return False, message
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
            self.status = BotStatus.STOPPING
            logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # === –®–ê–ì 1: –°–ò–ì–ù–ê–õ –û–°–¢–ê–ù–û–í–ö–ò ===
            logger.info("üì° –ü–æ–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—É...")
            self._stop_event.set()
            
            # === –®–ê–ì 2: –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–°–ù–û–í–ù–û–ô –ó–ê–î–ê–ß–ò ===
            if self._main_task and not self._main_task.done():
                logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)...")
                try:
                    await asyncio.wait_for(self._main_task, timeout=30.0)
                    logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª")
                    self._main_task.cancel()
                    try:
                        await self._main_task
                    except asyncio.CancelledError:
                        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # === –®–ê–ì 3: –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ô ===
            logger.info("üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
            await self._close_all_positions("Bot shutdown")
            
            # === –®–ê–ì 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –í –ë–î ===
            logger.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            self._update_bot_state_db(is_running=False)
            
            # === –®–ê–ì 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
            logger.info("üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã...")
            self._save_statistics()
            
            # === –®–ê–ì 6: –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–ë –û–°–¢–ê–ù–û–í–ö–ï ===
            try:
                runtime = datetime.utcnow() - self.start_time if self.start_time else None
                await self.notifier.send_shutdown_message(
                    runtime=runtime,
                    trades_count=self.trades_today
                )
            except Exception as notify_error:
                # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {notify_error}")
            
            # === –§–ò–ù–ê–õ: –£–°–ü–ï–®–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê ===
            self.status = BotStatus.STOPPED
            self.start_time = None
            
            success_message = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            logger.info(f"‚úÖ {success_message}")
            return True, success_message
            
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
            self.status = BotStatus.ERROR
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}"
            logger.error(f"‚ùå {error_msg}", exc_info=True)
            return False, error_msg
    
    # =========================================================================
    # === –û–°–ù–û–í–ù–û–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ ===
    # =========================================================================
    
    async def _trading_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è "—Å–µ—Ä–¥—Ü–µ–º" –±–æ—Ç–∞. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∏:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
        2. –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å
        3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—É
        4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        5. –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        6. –î–µ–ª–∞–µ—Ç –ø–∞—É–∑—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
        –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
        """
        logger.info("üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while not self._stop_event.is_set():
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤
                self.cycles_count += 1
                cycle_start = datetime.utcnow()
                
                logger.debug(f"üìä –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ #{self.cycles_count}")
                
                # === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –¢–û–†–ì–û–í–´–• –õ–ò–ú–ò–¢–û–í ===
                if not self._check_trading_limits():
                    logger.info("üìä –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏, –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É")
                    await self._human_delay(300, 600)  # –ü–∞—É–∑–∞ 5-10 –º–∏–Ω—É—Ç
                    continue
                
                # === –®–ê–ì 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===
                try:
                    await self._update_balance()
                except Exception as balance_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å: {balance_error}")
                
                # === –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –ü–ê–† ===
                for symbol in self.active_pairs:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π
                    if self._stop_event.is_set():
                        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä")
                        break
                    
                    try:
                        logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É: {symbol}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        market_data = await self.analyzer.analyze_symbol(symbol)
                        if not market_data:
                            logger.debug(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                            continue
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                        signal = await self._generate_signal(symbol, market_data)
                        if not signal:
                            logger.debug(f"üìä –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                            continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        self._save_signal(signal)
                        
                        # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π
                        if signal.action in ['BUY', 'SELL'] and signal.confidence >= 0.6:
                            logger.info(f"üéØ –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal.action} –¥–ª—è {symbol} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%})")
                            await self._execute_signal_human_like(signal)
                        else:
                            logger.debug(f"üìä –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal.action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%})")
                        
                    except Exception as symbol_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {symbol_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                        try:
                            await self.notifier.send_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {str(symbol_error)}")
                        except:
                            pass  # –ù–µ –ø–∞–¥–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                
                # === –®–ê–ì 4: –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ö–†–´–¢–´–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
                try:
                    await self._manage_positions()
                except Exception as positions_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {positions_error}")
                
                # === –®–ê–ì 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
                try:
                    self._update_statistics()
                except Exception as stats_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}")
                
                # === –®–ê–ì 6: –ü–ê–£–ó–ê –ú–ï–ñ–î–£ –¶–ò–ö–õ–ê–ú–ò ===
                cycle_duration = (datetime.utcnow() - cycle_start).total_seconds()
                logger.debug(f"‚è±Ô∏è –¶–∏–∫–ª #{self.cycles_count} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {cycle_duration:.1f} —Å–µ–∫—É–Ω–¥")
                
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                await self._human_delay()
                
            except asyncio.CancelledError:
                logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as cycle_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {cycle_error}", exc_info=True)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                try:
                    await self.notifier.send_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {str(cycle_error)}")
                except:
                    pass
                await self._human_delay(60, 180)  # –ü–∞—É–∑–∞ 1-3 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("üèÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # =========================================================================
    # === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –ò–°–ü–û–õ–ù–ï–ù–ò–ï –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í ===
    # =========================================================================
    
    async def _generate_signal(self, symbol: str, market_data: Dict) -> Optional[Signal]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:
        1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
        2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        3. –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            market_data: –î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ (—Ü–µ–Ω—ã, –æ–±—ä–µ–º—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
            
        Returns:
            Signal –∏–ª–∏ None –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        """
        try:
            logger.info(f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}")
            
            # === –®–ê–ì 1: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò ===
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            best_strategy_name, strategy_confidence = await auto_strategy_selector.select_best_strategy(symbol)
            
            logger.info(f"üß† –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è '{best_strategy_name}' –¥–ª—è {symbol} "
                       f"—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {strategy_confidence:.1%}")
            
            # === –®–ê–ì 2: –ü–û–õ–£–ß–ê–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–ê–†–´ ===
            pair_config = self._get_pair_config(symbol)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é
            # (—ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î)
            original_strategy = pair_config.strategy
            pair_config.strategy = best_strategy_name
            
            # === –®–ê–ì 3: –°–û–ó–î–ê–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–† –í–´–ë–†–ê–ù–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò ===
            try:
                strategy = self.strategy_factory.create(best_strategy_name)
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {best_strategy_name}: {e}")
                # Fallback –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy = self.strategy_factory.create('safe_multi_indicator')
                best_strategy_name = 'safe_multi_indicator'
            
            # === –®–ê–ì 4: –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï ===
            analysis = await strategy.analyze(market_data['df'], symbol)
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∂–¥–∞—Ç—å, —Å–∏–≥–Ω–∞–ª –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            if analysis.action == 'WAIT':
                logger.debug(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è {best_strategy_name} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∂–¥–∞—Ç—å: {analysis.reason}")
                return None
            
            # === –®–ê–ì 5: –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –£–í–ï–†–ï–ù–ù–û–°–¢–¨ ===
            # –£—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            combined_confidence = analysis.confidence * strategy_confidence
            
            # –ï—Å–ª–∏ –æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, –Ω–µ —Ç–æ—Ä–≥—É–µ–º
            if combined_confidence < 0.5:
                logger.info(f"üìä –ù–∏–∑–∫–∞—è –æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({combined_confidence:.1%}), "
                           f"–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª")
                return None
            
            # === –®–ê–ì 6: –°–û–ó–î–ê–ï–ú –°–ò–ì–ù–ê–õ ===
            signal = Signal(
                symbol=symbol,
                action=analysis.action,
                confidence=combined_confidence,
                price=market_data['current_price'],
                stop_loss=analysis.stop_loss,
                take_profit=analysis.take_profit,
                strategy=best_strategy_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                reason=f"[AUTO] {analysis.reason} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy_name}, "
                       f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞: {strategy_confidence:.1%})",
                created_at=datetime.utcnow()
            )
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª {signal.action} –¥–ª—è {symbol}: {signal.reason}")
            
            # === –®–ê–ì 7: –û–ë–£–ß–ï–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–ê ===
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if len(auto_strategy_selector.selection_history) > 100 and \
               len(auto_strategy_selector.selection_history) % 100 == 0:
                asyncio.create_task(self._train_strategy_selector())
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None
            
    async def _train_strategy_selector(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            logger.info("üéì –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            await asyncio.get_event_loop().run_in_executor(
                None, auto_strategy_selector.train_ml_model
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {e}")
    
    # =========================================================================
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ö–†–´–¢–´–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò ===
    # =========================================================================
    
    async def _manage_positions(self):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        
        –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
        1. –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        2. –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        3. –¢–∞–π–º–∞—É—Ç –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        4. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é.
        """
        if not self.positions:
            return  # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
        logger.debug(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(self.positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        positions_copy = list(self.positions.items())
        
        for symbol, trade in positions_copy:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –±–∏—Ä–∂–∏
                ticker = await self.exchange.fetch_ticker(symbol)
                current_price = ticker['last']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                should_close, reason = self._should_close_position(trade, current_price)
                
                if should_close:
                    logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {symbol}: {reason}")
                    await self._close_position(trade, current_price, reason)
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    if symbol in self.positions:
                        del self.positions[symbol]
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                    self._update_position_pnl(trade, current_price)
                
            except Exception as position_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {position_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    
    def _should_close_position(self, trade: Trade, current_price: float) -> Tuple[bool, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
        
        Args:
            trade: –û—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Tuple[bool, str]: (–Ω—É–∂–Ω–æ_–∑–∞–∫—Ä—ã–≤–∞—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (BUY)
        if trade.side == OrderSide.BUY:
            if current_price <= trade.stop_loss:
                return True, "Stop Loss triggered"
            elif current_price >= trade.take_profit:
                return True, "Take Profit triggered"
        
        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π (SELL)
        else:
            if current_price >= trade.stop_loss:
                return True, "Stop Loss triggered"
            elif current_price <= trade.take_profit:
                return True, "Take Profit triggered"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        if hasattr(config, 'MAX_POSITION_HOURS'):
            position_age = datetime.utcnow() - trade.created_at
            if position_age.total_seconds() > config.MAX_POSITION_HOURS * 3600:
                return True, "Position timeout"
        
        return False, ""
    
    def _update_position_pnl(self, trade: Trade, current_price: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            trade: –°–¥–µ–ª–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        try:
            if trade.side == OrderSide.BUY:
                # –î–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: –ø—Ä–∏–±—ã–ª—å = (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞) * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                unrealized_pnl = (current_price - trade.entry_price) * trade.quantity
            else:
                # –î–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏: –ø—Ä–∏–±—ã–ª—å = (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞) * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                unrealized_pnl = (trade.entry_price - current_price) * trade.quantity
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            commission = trade.commission or 0
            trade.unrealized_pnl = unrealized_pnl - commission
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL –¥–ª—è {trade.symbol}: {e}")
    
    async def _close_position(self, trade: Trade, current_price: float, reason: str):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            trade: –°–¥–µ–ª–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            current_price: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ trader
            close_result = await self.trader.close_position(trade, current_price)
            
            if close_result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ
                trade.exit_price = current_price
                trade.status = TradeStatus.CLOSED
                trade.closed_at = datetime.utcnow()
                trade.notes = reason
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
                trade.calculate_profit()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self._update_trade_db(trade)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await self.notifier.send_trade_closed(
                        symbol=trade.symbol,
                        side=trade.side.value if hasattr(trade.side, 'value') else str(trade.side),
                        profit=trade.profit,
                        reason=reason
                    )
                except Exception as notify_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏: {notify_error}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if trade.profit > 0:
                    self.risk_manager.update_statistics('win', trade.profit)
                else:
                    self.risk_manager.update_statistics('loss', abs(trade.profit))
                
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {trade.symbol} –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é ${trade.profit:.2f}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {trade.symbol}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {trade.symbol}: {e}")
    
    # =========================================================================
    # === –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
    # =========================================================================
    
    async def _pre_start_checks(self) -> bool:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º:
        1. –ù–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
        2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        4. –ù–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        5. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        """
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # === –ü–†–û–í–ï–†–ö–ê 1: API –ö–õ–Æ–ß–ò ===
        logger.debug("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏...")
        if not config.BYBIT_API_KEY or config.BYBIT_API_KEY == 'your_testnet_api_key_here':
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        if not config.BYBIT_API_SECRET or config.BYBIT_API_SECRET == 'your_testnet_secret_here':
            logger.error("‚ùå Secret –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        logger.info("‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # === –ü–†–û–í–ï–†–ö–ê 2: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ò–†–ñ–ï ===
        logger.debug("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ...")
        try:
            await self.exchange.test_connection()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ —É—Å–ø–µ—à–Ω–æ")
        except Exception as exchange_error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ: {exchange_error}")
            return False
        
        # === –ü–†–û–í–ï–†–ö–ê 3: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===
        logger.debug("üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            db = SessionLocal()
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞
                result = db.execute(text("SELECT 1 as test_connection"))
                test_value = result.fetchone()
                
                if test_value and test_value[0] == 1:
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return False
            finally:
                db.close()
        except Exception as db_error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
            return False
        
        # === –ü–†–û–í–ï–†–ö–ê 4: –ù–ê–õ–ò–ß–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–† ===
        logger.debug("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        if not self.active_pairs:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if hasattr(config, 'TRADING_PAIRS') and config.TRADING_PAIRS:
                self.active_pairs = config.TRADING_PAIRS
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.active_pairs}")
            else:
                logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
                return False
        
        # === –ü–†–û–í–ï–†–ö–ê 5: –ë–ê–õ–ê–ù–° (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) ===
        logger.debug("üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...")
        try:
            balance = await self.exchange.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            
            if usdt_balance < 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            else:
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
        except Exception as balance_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: {balance_error}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        
        logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    
    # =========================================================================
    # === –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
    # =========================================================================
    
    async def _load_configuration(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        –ó–∞–≥—Ä—É–∂–∞–µ–º:
        1. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        2. –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        logger.info("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        db = SessionLocal()
        try:
            # === –ó–ê–ì–†–£–ó–ö–ê –ê–ö–¢–ò–í–ù–´–• –¢–û–†–ì–û–í–´–• –ü–ê–† ===
            pairs = db.query(TradingPair).filter(
                TradingPair.is_active == True
            ).all()
            
            if pairs:
                self.active_pairs = [pair.symbol for pair in pairs]
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ë–î: {self.active_pairs}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ fallback
                if hasattr(config, 'TRADING_PAIRS'):
                    self.active_pairs = config.TRADING_PAIRS
                    logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.active_pairs}")
                else:
                    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä—ã
                    self.active_pairs = ['BTCUSDT', 'ETHUSDT']
                    logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä—ã: {self.active_pairs}")
            
            # === –ó–ê–ì–†–£–ó–ö–ê –û–¢–ö–†–´–¢–´–• –ü–û–ó–ò–¶–ò–ô ===
            open_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.OPEN
            ).all()
            
            if open_trades:
                self.positions = {trade.symbol: trade for trade in open_trades}
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {list(self.positions.keys())}")
            else:
                self.positions = {}
                logger.info("üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.active_pairs)} –ø–∞—Ä, {len(self.positions)} –ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.active_pairs = getattr(config, 'TRADING_PAIRS', ['BTCUSDT', 'ETHUSDT'])
            self.positions = {}
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        finally:
            db.close()
    
    # =========================================================================
    # === –ò–ú–ò–¢–ê–¶–ò–Ø –ß–ï–õ–û–í–ï–ß–ï–°–ö–û–ì–û –ü–û–í–ï–î–ï–ù–ò–Ø ===
    # =========================================================================
    
    async def _human_delay(self, min_seconds: float = None, max_seconds: float = None):
        """
        –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
        1. –í—Ä–µ–º—è —Å—É—Ç–æ–∫ (–Ω–æ—á—å—é –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
        2. –£—Å—Ç–∞–ª–æ—Å—Ç—å (–±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ = –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞)
        3. –°–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
        4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
        
        Args:
            min_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            max_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        """
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        if not getattr(config, 'ENABLE_HUMAN_MODE', True):
            await asyncio.sleep(60)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–∏–Ω—É—Ç–∞
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–∫–∏
        min_delay = min_seconds or getattr(config, 'MIN_DELAY_SECONDS', 30)
        max_delay = max_seconds or getattr(config, 'MAX_DELAY_SECONDS', 120)
        
        # –ë–∞–∑–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay = random.uniform(min_delay, max_delay)
        
        # === –§–ê–ö–¢–û–† –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö ===
        hour = datetime.utcnow().hour
        if 0 <= hour < 6:  # –ù–æ—á—å - —á–µ–ª–æ–≤–µ–∫ —Å–ø–∏—Ç –∏–ª–∏ –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–µ–Ω
            delay *= random.uniform(1.5, 2.5)
            logger.debug("üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É")
        elif 6 <= hour < 9:  # –£—Ç—Ä–æ - –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º
            delay *= random.uniform(1.2, 1.5)
            logger.debug("üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è - —Å–ª–µ–≥–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É")
        elif 22 <= hour <= 23:  # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä - —É—Å—Ç–∞–ª–æ—Å—Ç—å
            delay *= random.uniform(1.3, 1.7)
            logger.debug("üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑-–∑–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏")
        
        # === –§–ê–ö–¢–û–† –£–°–¢–ê–õ–û–°–¢–ò ===
        # –ß–µ–º –±–æ–ª—å—à–µ —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–µ–º –±–æ–ª—å—à–µ "—É—Å—Ç–∞–ª–æ—Å—Ç—å"
        if self.cycles_count > 100:
            fatigue_factor = min(2.0, 1 + (self.cycles_count - 100) / 200)
            delay *= fatigue_factor
            logger.debug(f"üò¥ –§–∞–∫—Ç–æ—Ä —É—Å—Ç–∞–ª–æ—Å—Ç–∏: x{fatigue_factor:.1f} (—Ü–∏–∫–ª–æ–≤: {self.cycles_count})")
        
        # === –°–õ–£–ß–ê–ô–ù–´–ï –ü–ï–†–ï–†–´–í–´ ===
        random_value = random.random()
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã (–∫–∞–∫ –±—É–¥—Ç–æ –æ—Ç–≤–ª–µ–∫—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω)
        if random_value < 0.02:  # 2% —à–∞–Ω—Å
            delay = random.uniform(300, 900)  # 5-15 –º–∏–Ω—É—Ç
            logger.info(f"‚òï –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # –î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã (–æ–±–µ–¥, –æ—Ç–¥—ã—Ö)
        elif random_value < 0.005:  # 0.5% —à–∞–Ω—Å
            delay = random.uniform(1800, 3600)  # 30-60 –º–∏–Ω—É—Ç
            logger.info(f"üçΩÔ∏è –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {delay/60:.1f} –º–∏–Ω—É—Ç")
        
        # === –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ï–†–ñ–ö–ò ===
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∫—É—Å–æ—á–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        remaining = delay
        while remaining > 0 and not self._stop_event.is_set():
            sleep_time = min(1.0, remaining)  # –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞ —Ä–∞–∑
            await asyncio.sleep(sleep_time)
            remaining -= sleep_time
        
        if delay > 60:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            logger.debug(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {delay:.1f} —Å–µ–∫—É–Ω–¥")
    
    # =========================================================================
    # === –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===
    # =========================================================================
    
    def _safe_db_operation(self, operation_name: str, operation_func, *args, **kwargs):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å –ë–î:
        1. –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –æ–ø–µ—Ä–∞—Ü–∏–∏
        2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
            operation_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.debug(f"üíæ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ë–î: {operation_name}")
            result = operation_func(*args, **kwargs)
            logger.debug(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {operation_name}")
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–î '{operation_name}': {e}")
            return None
    
    def _load_state_from_db(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑.
        –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞.
        """
        logger.debug("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ –ë–î...")
        
        def _load_operation():
            db = SessionLocal()
            try:
                bot_state = db.query(BotState).first()
                if bot_state and bot_state.is_running:
                    logger.warning("‚ö†Ô∏è –ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥")
                    bot_state.is_running = False
                    bot_state.stop_time = datetime.utcnow()
                    db.commit()
                    return True
                return False
            finally:
                db.close()
        
        try:
            self._safe_db_operation("–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", _load_operation)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î: {e}")
    
    def _update_bot_state_db(self, is_running: bool):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            is_running: –§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        """
        def _update_operation():
            db = SessionLocal()
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                state = db.query(BotState).first()
                if not state:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    state = BotState()
                    db.add(state)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                state.is_running = is_running
                if is_running:
                    state.start_time = datetime.utcnow()
                    state.stop_time = None
                else:
                    state.stop_time = datetime.utcnow()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                state.total_trades = self.trades_today
                state.current_balance = self._get_current_balance()
                
                db.commit()
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞", _update_operation)
    
    def _save_signal(self, signal: Signal):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        def _save_operation():
            db = SessionLocal()
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Signal –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                new_signal = Signal(
                    symbol=signal.symbol,
                    action=signal.action,
                    confidence=signal.confidence,
                    price=signal.price,
                    stop_loss=signal.stop_loss,
                    take_profit=signal.take_profit,
                    strategy=signal.strategy,
                    reason=signal.reason,
                    created_at=signal.created_at
                )
                db.add(new_signal)
                db.commit()
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
                signal.id = new_signal.id
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _save_operation)
    
    def _update_signal_db(self, signal: Signal):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        def _update_operation():
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                db_signal = db.query(Signal).filter(Signal.id == signal.id).first()
                if db_signal:
                    db_signal.executed = signal.executed
                    db_signal.executed_at = signal.executed_at
                    db_signal.trade_id = signal.trade_id
                    db.commit()
                    return True
                else:
                    logger.warning(f"–°–∏–≥–Ω–∞–ª —Å ID {signal.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return False
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _update_operation)
    
    def _update_trade_db(self, trade: Trade):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            trade: –û–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        def _update_operation():
            db = SessionLocal()
            try:
                db.merge(trade)
                db.commit()
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ {trade.symbol}", _update_operation)
    
    def _save_statistics(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç:
        1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        3. –û–±—â—É—é –ø—Ä–∏–±—ã–ª—å
        4. Win rate
        """
        logger.info("üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        def _stats_operation():
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                state = db.query(BotState).first()
                if not state:
                    state = BotState()
                    db.add(state)
                
                # === –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–û–î–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
                try:
                    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                    total_trades = db.query(Trade).count()
                    logger.info(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_trades}")
                except Exception as trade_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {trade_error}")
                    total_trades = 0
                
                try:
                    # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    profitable_trades = db.query(Trade).filter(
                        Trade.profit > 0,
                        Trade.status == TradeStatus.CLOSED
                    ).count()
                    logger.info(f"üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades}")
                except Exception as profit_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {profit_error}")
                    profitable_trades = 0
                
                try:
                    # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
                    total_profit_result = db.query(func.sum(Trade.profit)).filter(
                        Trade.status == TradeStatus.CLOSED
                    ).scalar()
                    total_profit = float(total_profit_result) if total_profit_result else 0.0
                    logger.info(f"üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
                except Exception as sum_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å: {sum_error}")
                    total_profit = 0.0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                state.total_trades = total_trades
                state.profitable_trades = profitable_trades
                state.total_profit = total_profit
                state.stop_time = datetime.utcnow()
                
                db.commit()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
                uptime = datetime.utcnow() - self.start_time if self.start_time else timedelta(0)
                
                logger.info("=" * 50)
                logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
                logger.info("=" * 50)
                logger.info(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
                logger.info(f"üîÑ –¶–∏–∫–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {self.cycles_count}")
                logger.info(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
                logger.info(f"üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades}")
                logger.info(f"üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
                logger.info(f"üìà Win Rate: {win_rate:.1f}%")
                logger.info("=" * 50)
                
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                db.rollback()
                return False
            finally:
                db.close()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        result = self._safe_db_operation("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", _stats_operation)
        if result:
            logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
    
    # =========================================================================
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    # =========================================================================
    
    def _check_trading_limits(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
        """
        max_daily_trades = getattr(config, 'MAX_DAILY_TRADES', 50)
        return self.trades_today < max_daily_trades
    
    async def _update_balance(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
        –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏
            balance = await self.exchange.fetch_balance()
            logger.debug("üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...")
            
            def _save_balance():
                db = SessionLocal()
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                    for currency, amount_info in balance.items():
                        if amount_info['total'] > 0:
                            balance_record = Balance(
                                currency=currency,
                                total=float(amount_info['total']),
                                free=float(amount_info['free']),
                                used=float(amount_info['used']),
                                timestamp=datetime.utcnow()
                            )
                            db.add(balance_record)
                    
                    db.commit()
                    return True
                except Exception as e:
                    db.rollback()
                    raise e
                finally:
                    db.close()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
            result = self._safe_db_operation("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", _save_balance)
            if result:
                logger.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    def _get_current_balance(self) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ USDT –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            float: –ë–∞–ª–∞–Ω—Å –≤ USDT
        """
        def _get_balance():
            db = SessionLocal()
            try:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ USDT
                latest_balance = db.query(Balance).filter(
                    Balance.currency == 'USDT'
                ).order_by(Balance.timestamp.desc()).first()
                
                if latest_balance:
                    return float(latest_balance.total)
                else:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
                    return float(getattr(config, 'INITIAL_CAPITAL', 1000))
            finally:
                db.close()
        
        result = self._safe_db_operation("–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞", _get_balance)
        return result if result is not None else 1000.0
    
    def _get_pair_config(self, symbol: str) -> TradingPair:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            
        Returns:
            TradingPair: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—ã
        """
        def _get_config():
            db = SessionLocal()
            try:
                pair = db.query(TradingPair).filter(
                    TradingPair.symbol == symbol
                ).first()
                
                if pair:
                    return pair
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∑–¥–µ—Å—å)
                    logger.debug(f"üîß –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {symbol}")
                    return TradingPair(
                        symbol=symbol,
                        strategy='multi_indicator',
                        stop_loss_percent=float(getattr(config, 'STOP_LOSS_PERCENT', 2.0)),
                        take_profit_percent=float(getattr(config, 'TAKE_PROFIT_PERCENT', 4.0)),
                        is_active=True
                    )
            finally:
                db.close()
        
        result = self._safe_db_operation(f"–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {symbol}", _get_config)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if result is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é")
            return TradingPair(
                symbol=symbol,
                strategy='multi_indicator',
                stop_loss_percent=2.0,
                take_profit_percent=4.0,
                is_active=True
            )
        
        return result
    
    def _update_process_info(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:
        - PID –ø—Ä–æ—Ü–µ—Å—Å–∞
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        - –ó–∞–≥—Ä—É–∑–∫–∞ CPU
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        - –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        
        –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = psutil.Process()
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            memory_info = process.memory_info()
            
            self._process_info = {
                'pid': process.pid,
                'memory_mb': round(memory_info.rss / 1024 / 1024, 2),  # RSS –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
                'memory_vms_mb': round(memory_info.vms / 1024 / 1024, 2),  # VMS –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
                'cpu_percent': process.cpu_percent(),
                'threads': process.num_threads(),
                'create_time': datetime.fromtimestamp(process.create_time()),
                'status': process.status(),
                'connections': len(process.connections()) if hasattr(process, 'connections') else 0
            }
            
            logger.debug(f"üìä –ü—Ä–æ—Ü–µ—Å—Å: PID={self._process_info['pid']}, "
                        f"RAM={self._process_info['memory_mb']}MB, "
                        f"CPU={self._process_info['cpu_percent']}%")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self._process_info = {
                'pid': os.getpid(),
                'memory_mb': 0,
                'cpu_percent': 0,
                'threads': 1,
                'create_time': datetime.utcnow(),
                'status': 'unknown'
            }
    
    def _update_statistics(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
        
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        - –¢–µ–∫—É—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        def _stats_operation():
            db = SessionLocal()
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ UTC
                today_start = datetime.utcnow().replace(
                    hour=0, minute=0, second=0, microsecond=0
                )
                
                # –°—á–∏—Ç–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today_trades_count = db.query(Trade).filter(
                    Trade.created_at >= today_start
                ).count()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—á–µ—Ç—á–∏–∫
                self.trades_today = today_trades_count
                
                logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.trades_today} —Å–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è")
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                return False
            finally:
                db.close()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
        self._safe_db_operation("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", _stats_operation)
    
    async def _close_all_positions(self, reason: str):
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ –∏–ª–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
        –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ.
        
        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–¥–ª—è –ª–æ–≥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        """
        if not self.positions:
            logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ—Ç")
            return
        
        logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º {len(self.positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        positions_to_close = list(self.positions.items())
        
        for symbol, trade in positions_to_close:
            try:
                logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {symbol}...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                ticker = await self.exchange.fetch_ticker(symbol)
                current_price = ticker['last']
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                await self._close_position(trade, current_price, reason)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.positions:
                    del self.positions[symbol]
                
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                
            except Exception as position_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}: {position_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                if symbol in self.positions:
                    del self.positions[symbol]
                    logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
        logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    
    # =========================================================================
    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û API ===
    # =========================================================================
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ API
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞,
        –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
            status_info = {
                'status': self.status.value,
                'is_running': self.status == BotStatus.RUNNING,
                'active_pairs': self.active_pairs.copy(),
                'open_positions': len(self.positions),
            }
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions_details = {}
            for symbol, trade in self.positions.items():
                try:
                    positions_details[symbol] = {
                        'side': trade.side.value if hasattr(trade.side, 'value') else str(trade.side),
                        'entry_price': float(trade.entry_price) if trade.entry_price else 0,
                        'quantity': float(trade.quantity) if trade.quantity else 0,
                        'profit': float(trade.profit) if trade.profit else 0,
                        'unrealized_pnl': float(getattr(trade, 'unrealized_pnl', 0)),
                        'created_at': trade.created_at.isoformat() if trade.created_at else None
                    }
                except Exception as pos_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {pos_error}")
                    positions_details[symbol] = {'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'}
            
            status_info['positions_details'] = positions_details
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
            uptime_str = None
            if self.start_time:
                uptime_delta = datetime.utcnow() - self.start_time
                hours = uptime_delta.seconds // 3600
                minutes = (uptime_delta.seconds % 3600) // 60
                uptime_str = f"{uptime_delta.days}–¥ {hours}—á {minutes}–º"
            
            status_info['statistics'] = {
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'uptime': uptime_str,
                'cycles_count': self.cycles_count,
                'trades_today': self.trades_today
            }
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            status_info['process_info'] = self._process_info.copy()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            status_info['config'] = {
                'mode': 'TESTNET' if getattr(config, 'BYBIT_TESTNET', True) else 'MAINNET',
                'max_positions': getattr(config, 'MAX_POSITIONS', 5),
                'human_mode': getattr(config, 'ENABLE_HUMAN_MODE', True),
                'max_daily_trades': getattr(config, 'MAX_DAILY_TRADES', 50)
            }
            
            return status_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'status': 'error',
                'is_running': False,
                'error': str(e),
                'active_pairs': [],
                'open_positions': 0,
                'positions_details': {},
                'statistics': {},
                'process_info': {},
                'config': {}
            }
    
    async def update_pairs(self, pairs: List[str]) -> Tuple[bool, str]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä
        –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            pairs: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['BTCUSDT', 'ETHUSDT'])
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        if not pairs:
            return False, "–°–ø–∏—Å–æ–∫ –ø–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä
        valid_pairs = []
        for pair in pairs:
            if isinstance(pair, str) and len(pair) >= 6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞
                valid_pairs.append(pair.upper())
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã: {pair}")
        
        if not valid_pairs:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"
        
        def _update_operation():
            db = SessionLocal()
            try:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã
                db.query(TradingPair).update({TradingPair.is_active: False})
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
                updated_count = 0
                created_count = 0
                
                for symbol in valid_pairs:
                    pair = db.query(TradingPair).filter(
                        TradingPair.symbol == symbol
                    ).first()
                    
                    if pair:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞—Ä—É
                        pair.is_active = True
                        pair.updated_at = datetime.utcnow()
                        updated_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                        pair = TradingPair(
                            symbol=symbol,
                            is_active=True,
                            strategy='multi_indicator',
                            stop_loss_percent=float(getattr(config, 'STOP_LOSS_PERCENT', 2.0)),
                            take_profit_percent=float(getattr(config, 'TAKE_PROFIT_PERCENT', 4.0)),
                            created_at=datetime.utcnow()
                        )
                        db.add(pair)
                        created_count += 1
                
                db.commit()
                
                return {
                    'updated': updated_count,
                    'created': created_count,
                    'total': len(valid_pairs)
                }
                
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
            result = self._safe_db_operation("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", _update_operation)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
                self.active_pairs = valid_pairs
                
                success_message = (
                    f"–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {result['total']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, "
                    f"{result['updated']} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {result['created']} —Å–æ–∑–¥–∞–Ω–æ"
                )
                
                logger.info(f"‚úÖ {success_message}")
                logger.info(f"üìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä: {self.active_pairs}")
                
                return True, success_message
            else:
                return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return False, error_msg
    
    async def close_position(self, symbol: str) -> Tuple[bool, str]:
        """
        –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ API.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if symbol not in self.positions:
            message = f"–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            logger.warning(f"‚ö†Ô∏è {message}")
            return False, message
        
        try:
            trade = self.positions[symbol]
            
            logger.info(f"üîÑ –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = await self.exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            await self._close_position(trade, current_price, "Manual close via API")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            del self.positions[symbol]
            
            success_message = f"–ü–æ–∑–∏—Ü–∏—è {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ {current_price}"
            logger.info(f"‚úÖ {success_message}")
            
            return True, success_message
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return False, error_msg
    
    def get_detailed_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤–∫–ª—é—á–∞—é—â—É—é:
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º
        - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Returns:
            Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        def _stats_operation():
            db = SessionLocal()
            try:
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                now = datetime.utcnow()
                today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
                week_start = today_start - timedelta(days=7)
                month_start = today_start - timedelta(days=30)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                periods_stats = {}
                
                for period_name, start_date in [
                    ('today', today_start),
                    ('week', week_start),
                    ('month', month_start),
                    ('all_time', datetime.min)
                ]:
                    trades = db.query(Trade).filter(
                        Trade.created_at >= start_date
                    ).all()
                    
                    total_trades = len(trades)
                    profitable_trades = len([t for t in trades if t.profit and t.profit > 0])
                    total_profit = sum(t.profit or 0 for t in trades)
                    
                    periods_stats[period_name] = {
                        'total_trades': total_trades,
                        'profitable_trades': profitable_trades,
                        'total_profit': round(total_profit, 2),
                        'win_rate': round((profitable_trades / total_trades * 100) if total_trades > 0 else 0, 2),
                        'average_profit': round(total_profit / total_trades if total_trades > 0 else 0, 2)
                    }
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º –ø–∞—Ä–∞–º
                pairs_stats = {}
                for symbol in self.active_pairs:
                    pair_trades = db.query(Trade).filter(
                        Trade.symbol == symbol
                    ).all()
                    
                    if pair_trades:
                        pair_total = len(pair_trades)
                        pair_profitable = len([t for t in pair_trades if t.profit and t.profit > 0])
                        pair_profit = sum(t.profit or 0 for t in pair_trades)
                        
                        pairs_stats[symbol] = {
                            'total_trades': pair_total,
                            'profitable_trades': pair_profitable,
                            'total_profit': round(pair_profit, 2),
                            'win_rate': round((pair_profitable / pair_total * 100) if pair_total > 0 else 0, 2)
                        }
                
                return {
                    'periods': periods_stats,
                    'pairs': pairs_stats,
                    'generated_at': now.isoformat()
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                return {'error': str(e)}
            finally:
                db.close()
        
        result = self._safe_db_operation("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", _stats_operation)
        return result or {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
    
    # =========================================================================
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
    # =========================================================================
    
    def get_health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        –¥–ª—è —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞.
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        """
        health_info = {
            'timestamp': datetime.utcnow().isoformat(),
            'overall_status': 'healthy',
            'components': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_to_check = [
            ('bot_manager', self.status != BotStatus.ERROR),
            ('exchange', hasattr(self, 'exchange') and self.exchange is not None),
            ('database', True),  # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
            ('telegram', hasattr(self, 'notifier') and self.notifier is not None),
            ('positions', len(self.positions) >= 0),  # –í—Å–µ–≥–¥–∞ True, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
        ]
        
        all_healthy = True
        
        for component_name, is_healthy in components_to_check:
            health_info['components'][component_name] = {
                'status': 'healthy' if is_healthy else 'unhealthy',
                'last_check': datetime.utcnow().isoformat()
            }
            
            if not is_healthy:
                all_healthy = False
        
        # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db = SessionLocal()
            db.execute(text("SELECT 1"))
            db.close()
            health_info['components']['database']['status'] = 'healthy'
        except Exception as db_error:
            health_info['components']['database']['status'] = 'unhealthy'
            health_info['components']['database']['error'] = str(db_error)
            all_healthy = False
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if not all_healthy:
            health_info['overall_status'] = 'degraded'
        
        if self.status == BotStatus.ERROR:
            health_info['overall_status'] = 'unhealthy'
        
        return health_info
    
    def __repr__(self) -> str:
        """
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        """
        return (
            f"BotManager(status={self.status.value}, "
            f"pairs={len(self.active_pairs)}, "
            f"positions={len(self.positions)}, "
            f"cycles={self.cycles_count})"
        )


# =========================================================================
# === –°–û–ó–î–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê ===
# =========================================================================

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞ (Singleton)
# –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
bot_manager = BotManager()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
    # –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("ü§ñ BotManager module loaded successfully")
    print(f"üìä Manager instance: {bot_manager}")
    print(f"üîß Configuration loaded: {hasattr(config, 'BYBIT_API_KEY')}")