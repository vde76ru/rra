"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–§–∞–π–ª: main.py
"""

import asyncio
import argparse
import signal
import sys
from pathlib import Path
from typing import Optional

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from src.core.config import Config
from src.core.clean_logging import init_logging_system, get_clean_logger, trading_logger
from src.bot.manager import BotManager  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
from src.web.api_routes import router as api_router, set_bot_manager, ws_manager
from src.core.database import init_database

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
config = Config()
bot_manager: Optional[BotManager] = None  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: BotManager –≤–º–µ—Å—Ç–æ TradingBotManager
web_app: Optional[FastAPI] = None
shutdown_event = asyncio.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = None

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

def create_web_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="üöÄ Crypto Trading Bot Dashboard",
        description="–ü–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–æ–º",
        version="3.0.0",
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
    app.include_router(api_router)
    
    @app.on_event("startup")
    async def startup_event():
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...")
    
    return app

async def run_bot_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global bot_manager
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        bot_manager = BotManager()  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: BotManager –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        success, message = await bot_manager.start()
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {message}")
            return
        
        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ: {e}", exc_info=True)
        raise
    finally:
        if bot_manager:
            await bot_manager.stop()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def run_web_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global web_app
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = create_web_app()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0",
            port=8000,
            log_level="warning",  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ uvicorn
            access_log=False,     # –û—Ç–∫–ª—é—á–∞–µ–º access –ª–æ–≥–∏
            ws_ping_interval=20,
            ws_ping_timeout=10
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        logger.info("üöÄ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8000")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:8000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", exc_info=True)
        raise

async def run_full_system():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –±–æ—Ç + –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global bot_manager, web_app
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        bot_manager = BotManager()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ API —Ä–æ—É—Ç–∞—Ö
        set_bot_manager(bot_manager)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = create_web_app()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0",
            port=8000,
            log_level="warning",
            access_log=False,
            ws_ping_interval=20,
            ws_ping_timeout=10
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        logger.info("üöÄ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://0.0.0.0:8000")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥: http://0.0.0.0:8000")
        logger.info("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://0.0.0.0:8000/docs")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        raise
    finally:
        if bot_manager:
            await bot_manager.stop()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global logger
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_logging_system()
    logger = get_clean_logger(__name__)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="Crypto Trading Bot")
    parser.add_argument("--mode", choices=["bot", "web", "full"], default="full",
                        help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (bot=—Ç–æ–ª—å–∫–æ –±–æ—Ç, web=—Ç–æ–ª—å–∫–æ –≤–µ–±, full=–ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
    args = parser.parse_args()
    
    logger.info("=" * 50)
    logger.info("üöÄ Crypto Trading Bot v3.0 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    logger.info("=" * 50)
    
    try:
        if args.mode == "bot":
            await run_bot_only()
        elif args.mode == "web":
            await run_web_only()
        else:  # full
            await run_full_system()
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        logger.info("üìà –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())